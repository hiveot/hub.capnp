// Code generated by capnpc-go. DO NOT EDIT.

package test

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

type CapTestService capnp.Client

// CapTestService_TypeID is the unique identifier for the type CapTestService.
const CapTestService_TypeID = 0xafe1cc57be19cf43

func (c CapTestService) CapMethod1(ctx context.Context, params func(CapTestService_capMethod1_Params) error) (CapTestService_capMethod1_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xafe1cc57be19cf43,
			MethodID:      0,
			InterfaceName: "CapTestService.capnp:CapTestService",
			MethodName:    "capMethod1",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapTestService_capMethod1_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapTestService_capMethod1_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapTestService) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapTestService) AddRef() CapTestService {
	return CapTestService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapTestService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapTestService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapTestService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapTestService) DecodeFromPtr(p capnp.Ptr) CapTestService {
	return CapTestService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapTestService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapTestService) IsSame(other CapTestService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapTestService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapTestService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A CapTestService_Server is a CapTestService with a local implementation.
type CapTestService_Server interface {
	CapMethod1(context.Context, CapTestService_capMethod1) error
}

// CapTestService_NewServer creates a new Server from an implementation of CapTestService_Server.
func CapTestService_NewServer(s CapTestService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapTestService_Methods(nil, s), s, c)
}

// CapTestService_ServerToClient creates a new Client from an implementation of CapTestService_Server.
// The caller is responsible for calling Release on the returned Client.
func CapTestService_ServerToClient(s CapTestService_Server) CapTestService {
	return CapTestService(capnp.NewClient(CapTestService_NewServer(s)))
}

// CapTestService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapTestService_Methods(methods []server.Method, s CapTestService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xafe1cc57be19cf43,
			MethodID:      0,
			InterfaceName: "CapTestService.capnp:CapTestService",
			MethodName:    "capMethod1",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapMethod1(ctx, CapTestService_capMethod1{call})
		},
	})

	return methods
}

// CapTestService_capMethod1 holds the state for a server call to CapTestService.capMethod1.
// See server.Call for documentation.
type CapTestService_capMethod1 struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapTestService_capMethod1) Args() CapTestService_capMethod1_Params {
	return CapTestService_capMethod1_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapTestService_capMethod1) AllocResults() (CapTestService_capMethod1_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapTestService_capMethod1_Results(r), err
}

// CapTestService_List is a list of CapTestService.
type CapTestService_List = capnp.CapList[CapTestService]

// NewCapTestService creates a new list of CapTestService.
func NewCapTestService_List(s *capnp.Segment, sz int32) (CapTestService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapTestService](l), err
}

type CapTestService_capMethod1_Params capnp.Struct

// CapTestService_capMethod1_Params_TypeID is the unique identifier for the type CapTestService_capMethod1_Params.
const CapTestService_capMethod1_Params_TypeID = 0xa2065d713427271a

func NewCapTestService_capMethod1_Params(s *capnp.Segment) (CapTestService_capMethod1_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapTestService_capMethod1_Params(st), err
}

func NewRootCapTestService_capMethod1_Params(s *capnp.Segment) (CapTestService_capMethod1_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapTestService_capMethod1_Params(st), err
}

func ReadRootCapTestService_capMethod1_Params(msg *capnp.Message) (CapTestService_capMethod1_Params, error) {
	root, err := msg.Root()
	return CapTestService_capMethod1_Params(root.Struct()), err
}

func (s CapTestService_capMethod1_Params) String() string {
	str, _ := text.Marshal(0xa2065d713427271a, capnp.Struct(s))
	return str
}

func (s CapTestService_capMethod1_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapTestService_capMethod1_Params) DecodeFromPtr(p capnp.Ptr) CapTestService_capMethod1_Params {
	return CapTestService_capMethod1_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapTestService_capMethod1_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapTestService_capMethod1_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapTestService_capMethod1_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapTestService_capMethod1_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapTestService_capMethod1_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapTestService_capMethod1_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapTestService_capMethod1_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapTestService_capMethod1_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapTestService_capMethod1_Params) ClientType() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapTestService_capMethod1_Params) HasClientType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapTestService_capMethod1_Params) ClientTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapTestService_capMethod1_Params) SetClientType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CapTestService_capMethod1_Params_List is a list of CapTestService_capMethod1_Params.
type CapTestService_capMethod1_Params_List = capnp.StructList[CapTestService_capMethod1_Params]

// NewCapTestService_capMethod1_Params creates a new list of CapTestService_capMethod1_Params.
func NewCapTestService_capMethod1_Params_List(s *capnp.Segment, sz int32) (CapTestService_capMethod1_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapTestService_capMethod1_Params](l), err
}

// CapTestService_capMethod1_Params_Future is a wrapper for a CapTestService_capMethod1_Params promised by a client call.
type CapTestService_capMethod1_Params_Future struct{ *capnp.Future }

func (f CapTestService_capMethod1_Params_Future) Struct() (CapTestService_capMethod1_Params, error) {
	p, err := f.Future.Ptr()
	return CapTestService_capMethod1_Params(p.Struct()), err
}

type CapTestService_capMethod1_Results capnp.Struct

// CapTestService_capMethod1_Results_TypeID is the unique identifier for the type CapTestService_capMethod1_Results.
const CapTestService_capMethod1_Results_TypeID = 0x93e8ced6560ad1ed

func NewCapTestService_capMethod1_Results(s *capnp.Segment) (CapTestService_capMethod1_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapTestService_capMethod1_Results(st), err
}

func NewRootCapTestService_capMethod1_Results(s *capnp.Segment) (CapTestService_capMethod1_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapTestService_capMethod1_Results(st), err
}

func ReadRootCapTestService_capMethod1_Results(msg *capnp.Message) (CapTestService_capMethod1_Results, error) {
	root, err := msg.Root()
	return CapTestService_capMethod1_Results(root.Struct()), err
}

func (s CapTestService_capMethod1_Results) String() string {
	str, _ := text.Marshal(0x93e8ced6560ad1ed, capnp.Struct(s))
	return str
}

func (s CapTestService_capMethod1_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapTestService_capMethod1_Results) DecodeFromPtr(p capnp.Ptr) CapTestService_capMethod1_Results {
	return CapTestService_capMethod1_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapTestService_capMethod1_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapTestService_capMethod1_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapTestService_capMethod1_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapTestService_capMethod1_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapTestService_capMethod1_Results) Capabilit() CapMethod1Service {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapMethod1Service(p.Interface().Client())
}

func (s CapTestService_capMethod1_Results) HasCapabilit() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapTestService_capMethod1_Results) SetCapabilit(v CapMethod1Service) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapTestService_capMethod1_Results_List is a list of CapTestService_capMethod1_Results.
type CapTestService_capMethod1_Results_List = capnp.StructList[CapTestService_capMethod1_Results]

// NewCapTestService_capMethod1_Results creates a new list of CapTestService_capMethod1_Results.
func NewCapTestService_capMethod1_Results_List(s *capnp.Segment, sz int32) (CapTestService_capMethod1_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapTestService_capMethod1_Results](l), err
}

// CapTestService_capMethod1_Results_Future is a wrapper for a CapTestService_capMethod1_Results promised by a client call.
type CapTestService_capMethod1_Results_Future struct{ *capnp.Future }

func (f CapTestService_capMethod1_Results_Future) Struct() (CapTestService_capMethod1_Results, error) {
	p, err := f.Future.Ptr()
	return CapTestService_capMethod1_Results(p.Struct()), err
}
func (p CapTestService_capMethod1_Results_Future) Capabilit() CapMethod1Service {
	return CapMethod1Service(p.Future.Field(0, nil).Client())
}

type CapMethod1Service capnp.Client

// CapMethod1Service_TypeID is the unique identifier for the type CapMethod1Service.
const CapMethod1Service_TypeID = 0xfc84130cfacf2439

func (c CapMethod1Service) Method1(ctx context.Context, params func(CapMethod1Service_method1_Params) error) (CapMethod1Service_method1_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfc84130cfacf2439,
			MethodID:      0,
			InterfaceName: "CapTestService.capnp:CapMethod1Service",
			MethodName:    "method1",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapMethod1Service_method1_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapMethod1Service_method1_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapMethod1Service) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapMethod1Service) AddRef() CapMethod1Service {
	return CapMethod1Service(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapMethod1Service) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapMethod1Service) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapMethod1Service) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapMethod1Service) DecodeFromPtr(p capnp.Ptr) CapMethod1Service {
	return CapMethod1Service(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapMethod1Service) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapMethod1Service) IsSame(other CapMethod1Service) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapMethod1Service) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapMethod1Service) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapMethod1Service_Server is a CapMethod1Service with a local implementation.
type CapMethod1Service_Server interface {
	Method1(context.Context, CapMethod1Service_method1) error
}

// CapMethod1Service_NewServer creates a new Server from an implementation of CapMethod1Service_Server.
func CapMethod1Service_NewServer(s CapMethod1Service_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapMethod1Service_Methods(nil, s), s, c)
}

// CapMethod1Service_ServerToClient creates a new Client from an implementation of CapMethod1Service_Server.
// The caller is responsible for calling Release on the returned Client.
func CapMethod1Service_ServerToClient(s CapMethod1Service_Server) CapMethod1Service {
	return CapMethod1Service(capnp.NewClient(CapMethod1Service_NewServer(s)))
}

// CapMethod1Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapMethod1Service_Methods(methods []server.Method, s CapMethod1Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfc84130cfacf2439,
			MethodID:      0,
			InterfaceName: "CapTestService.capnp:CapMethod1Service",
			MethodName:    "method1",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Method1(ctx, CapMethod1Service_method1{call})
		},
	})

	return methods
}

// CapMethod1Service_method1 holds the state for a server call to CapMethod1Service.method1.
// See server.Call for documentation.
type CapMethod1Service_method1 struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapMethod1Service_method1) Args() CapMethod1Service_method1_Params {
	return CapMethod1Service_method1_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapMethod1Service_method1) AllocResults() (CapMethod1Service_method1_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapMethod1Service_method1_Results(r), err
}

// CapMethod1Service_List is a list of CapMethod1Service.
type CapMethod1Service_List = capnp.CapList[CapMethod1Service]

// NewCapMethod1Service creates a new list of CapMethod1Service.
func NewCapMethod1Service_List(s *capnp.Segment, sz int32) (CapMethod1Service_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapMethod1Service](l), err
}

type CapMethod1Service_method1_Params capnp.Struct

// CapMethod1Service_method1_Params_TypeID is the unique identifier for the type CapMethod1Service_method1_Params.
const CapMethod1Service_method1_Params_TypeID = 0x963d57f7eb579e3e

func NewCapMethod1Service_method1_Params(s *capnp.Segment) (CapMethod1Service_method1_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapMethod1Service_method1_Params(st), err
}

func NewRootCapMethod1Service_method1_Params(s *capnp.Segment) (CapMethod1Service_method1_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapMethod1Service_method1_Params(st), err
}

func ReadRootCapMethod1Service_method1_Params(msg *capnp.Message) (CapMethod1Service_method1_Params, error) {
	root, err := msg.Root()
	return CapMethod1Service_method1_Params(root.Struct()), err
}

func (s CapMethod1Service_method1_Params) String() string {
	str, _ := text.Marshal(0x963d57f7eb579e3e, capnp.Struct(s))
	return str
}

func (s CapMethod1Service_method1_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapMethod1Service_method1_Params) DecodeFromPtr(p capnp.Ptr) CapMethod1Service_method1_Params {
	return CapMethod1Service_method1_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapMethod1Service_method1_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapMethod1Service_method1_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapMethod1Service_method1_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapMethod1Service_method1_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapMethod1Service_method1_Params_List is a list of CapMethod1Service_method1_Params.
type CapMethod1Service_method1_Params_List = capnp.StructList[CapMethod1Service_method1_Params]

// NewCapMethod1Service_method1_Params creates a new list of CapMethod1Service_method1_Params.
func NewCapMethod1Service_method1_Params_List(s *capnp.Segment, sz int32) (CapMethod1Service_method1_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapMethod1Service_method1_Params](l), err
}

// CapMethod1Service_method1_Params_Future is a wrapper for a CapMethod1Service_method1_Params promised by a client call.
type CapMethod1Service_method1_Params_Future struct{ *capnp.Future }

func (f CapMethod1Service_method1_Params_Future) Struct() (CapMethod1Service_method1_Params, error) {
	p, err := f.Future.Ptr()
	return CapMethod1Service_method1_Params(p.Struct()), err
}

type CapMethod1Service_method1_Results capnp.Struct

// CapMethod1Service_method1_Results_TypeID is the unique identifier for the type CapMethod1Service_method1_Results.
const CapMethod1Service_method1_Results_TypeID = 0xa93801887255bfec

func NewCapMethod1Service_method1_Results(s *capnp.Segment) (CapMethod1Service_method1_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapMethod1Service_method1_Results(st), err
}

func NewRootCapMethod1Service_method1_Results(s *capnp.Segment) (CapMethod1Service_method1_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapMethod1Service_method1_Results(st), err
}

func ReadRootCapMethod1Service_method1_Results(msg *capnp.Message) (CapMethod1Service_method1_Results, error) {
	root, err := msg.Root()
	return CapMethod1Service_method1_Results(root.Struct()), err
}

func (s CapMethod1Service_method1_Results) String() string {
	str, _ := text.Marshal(0xa93801887255bfec, capnp.Struct(s))
	return str
}

func (s CapMethod1Service_method1_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapMethod1Service_method1_Results) DecodeFromPtr(p capnp.Ptr) CapMethod1Service_method1_Results {
	return CapMethod1Service_method1_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapMethod1Service_method1_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapMethod1Service_method1_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapMethod1Service_method1_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapMethod1Service_method1_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapMethod1Service_method1_Results) ForYou() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapMethod1Service_method1_Results) HasForYou() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapMethod1Service_method1_Results) ForYouBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapMethod1Service_method1_Results) SetForYou(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapMethod1Service_method1_Results_List is a list of CapMethod1Service_method1_Results.
type CapMethod1Service_method1_Results_List = capnp.StructList[CapMethod1Service_method1_Results]

// NewCapMethod1Service_method1_Results creates a new list of CapMethod1Service_method1_Results.
func NewCapMethod1Service_method1_Results_List(s *capnp.Segment, sz int32) (CapMethod1Service_method1_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapMethod1Service_method1_Results](l), err
}

// CapMethod1Service_method1_Results_Future is a wrapper for a CapMethod1Service_method1_Results promised by a client call.
type CapMethod1Service_method1_Results_Future struct{ *capnp.Future }

func (f CapMethod1Service_method1_Results_Future) Struct() (CapMethod1Service_method1_Results, error) {
	p, err := f.Future.Ptr()
	return CapMethod1Service_method1_Results(p.Struct()), err
}

const schema_9f9160fd7c4ae45f = "x\xda\x94\x92Ah\x13A\x14\x86\xff\x7ff\xb7[%" +
	"\x05\x87\xad\xa0^\x04\x09\xa4\x82\x88\xa1=\xd8\xa0\xa6X" +
	"\xa1\xb4 dj5X\x10]\xd3\x15\x17\xd2fM6" +
	"\x96\x82\xe0\xc5\x83\x1eE\x14\xbc(\xf5\xe6I\xf4(\xa8" +
	"'ob\xf1P\xef\x82\x07A=\x17D\x19\x99d7" +
	"9\xd4\x0a\xb9\x0d\xff\x9b\xf7\xbd\xff=\xfe=[SN" +
	"qdUB\xe81w\xc8\xfc\xfc\xb4\xfb\xc2\xe7\x8f\xdf" +
	"\x1e@\xe5\x09\xb8\xf4\x80\xf1u\xbe&\xe8\xbfd\x194" +
	"\xa7\x9eT\xbfoUO>\x82*\x10pl}\x93\xaf" +
	"\x08\xc7\x1c(\x14&n\\\x1az\x96\xb6\x0a[zo" +
	"K\xf47\xb9\x0a\x9a\x1f\xef\xce7\xef\xf2\xf8\xf3nk" +
	"\x97=):\xecYa\xd9\xd3\x1b\xfb\xdfV?|y" +
	"\x01\xb5W\x9a\xcb_\xe7n\xfd\xb9r\xff)\xc0\xf1H" +
	"\x1c\xa2\xbff\x89~[\xcc\xf8\xeb\xf6e&\xf3\x1b\xbf" +
	"r\xfe\x9d\xdf\xdb~\xdf\x13%\xfa\x8f;\xbf\x1f\x8a\x19" +
	"\xff\x8d\xf0p\xc4L\x07\xf1B\xd8J\xce\xb9a\xf3f" +
	"T\x0b\x8f\xd6\x82x%.ej_<\x1b&\xd7\x1b" +
	"K\xc5\xfc|9l\xb5\xebIK;\xd2\x01\x1c\x02j" +
	"d\x1e\xd09I\xbdO\xd0\xd4\x828\xb8\x1a\xd5#0" +
	"\xa1\xea{\x01\xa9\xec&;MK\xf1\xd9\xc0\xe5tZ" +
	"\xe5`\xd0\x0c\x96[\x03\xbbL\xfb\xf4p\xcf\xe4\xe19" +
	"@\x8fI\xea\x09AE\x8e\xd2\x8a\xc5E@\x1f\x93\xd4" +
	"'\xac\xf3z\x14\xae$\xb3g\x000\x07\xc1\x1c2m" +
	"a\x0d2\x0e{\xe2\xa0K\xfc\xebd%@\x0fK\xea" +
	"Q\xc1\xf2\xb5F\xf3b\xa3\xbd\x0d/w\xda\xd5\x8bj" +
	"a\x85\xd4\x8et\x81^\xbc\x98ET\xa9E\x08\xb5\xcb" +
	"3\xd9= \x97\x8aS\xac\xf0?\xe8\xccy\xb9[\xe8" +
	"\xd3\xb3X3\x0b\xa9R\xa7!\x94\xeb\xddN\xb7\xeb\x80" +
	"\xff\x06\x00\x00\xff\xff\x84\xe9\xeaB"

func init() {
	schemas.Register(schema_9f9160fd7c4ae45f,
		0x93e8ced6560ad1ed,
		0x963d57f7eb579e3e,
		0xa2065d713427271a,
		0xa93801887255bfec,
		0xafe1cc57be19cf43,
		0xfc84130cfacf2439)
}

package internal_test

import (
	"flag"
	"io/ioutil"
	"os"
	"path"
	"strings"
	"testing"
	"time"

	"github.com/sirupsen/logrus"

	"github.com/wostzone/hub/cmd/launcher/internal"
	"github.com/wostzone/wost-go/pkg/config"
	"github.com/wostzone/wost-go/pkg/logging"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/wostzone/hub/cmd/certs/certsetup"
)

const PluginID = "launcher"
const launcherYamlTemplate = `
# generated by StartHub_test.go
# Plugins to start
plugins: # list of plugins to start
  - /bin/ls # for testing
`

// testing takes place using the test folder on localhost
var tempFolder string

var hostnames = []string{"localhost"}

// TestMain sets the project test folder as the home folder and makes sure the neccesary
// certificates exist.
func TestMain(m *testing.M) {
	logging.SetLogging("info", "")
	tempFolder = path.Join(os.TempDir(), "wost-launcher-test")
	configFolder := path.Join(tempFolder, config.DefaultConfigFolder)
	certsFolder := path.Join(tempFolder, config.DefaultCertsFolder)
	logFolder := path.Join(tempFolder, config.DefaultLogFolder)
	_ = os.MkdirAll(configFolder, 0700)
	_ = os.MkdirAll(certsFolder, 0700)
	_ = os.MkdirAll(logFolder, 0700)
	// create an empty hub config file
	hubYaml := path.Join(configFolder, config.DefaultHubConfigName)
	fp, _ := os.Create(hubYaml)
	_ = fp.Close()

	// create a launcher hub config file
	launcherYaml := path.Join(configFolder, PluginID+".yaml")
	_ = ioutil.WriteFile(launcherYaml, []byte(launcherYamlTemplate), 0600)
	_ = certsetup.CreateCertificateBundle(hostnames, certsFolder, true)

	result := m.Run()

	os.Exit(result)
}

// Setup to run each test
func setup() {
	// Reset args to prevent 'flag redefined' error
	flag.CommandLine = flag.NewFlagSet(os.Args[0], flag.ContinueOnError)
	os.Args = append(os.Args[0:1], strings.Split("", " ")...)
}

func TestStartHubNoPlugins(t *testing.T) {
	logrus.Infof("")
	setup()
	err := internal.StartHub(tempFolder, false)
	require.NoError(t, err)

	time.Sleep(3 * time.Second)
	internal.StopHub()
}

func TestStartHubWithPlugins(t *testing.T) {
	logrus.Infof("")
	setup()
	err := internal.StartHub(tempFolder, true)
	assert.NoError(t, err)

	time.Sleep(3 * time.Second)
	internal.StopHub()
}

func TestStartHubBadHome(t *testing.T) {
	logrus.Infof("")
	setup()
	err := internal.StartHub("/notahomefolder", true)
	assert.Error(t, err)
}

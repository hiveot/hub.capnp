# Cap'n proto definition for certificate management service
@0xcd6ed2180540008c;  # unique file ID, generated by `capnp id`

using Go = import "/go.capnp";
$Go.package("hubapi");
$Go.import("github.com/hiveot/hub/api/go/hubapi");

const certServiceName :Text = "certservice";
# Service name for use in logging and connectivity

const defaultCaCertFile :Text = "caCert.pem";
# Default name of CA certificate file

const defaultCaKeyFile :Text = "caKey.pem";
# Default name of CA key file

const defaultServiceCertValidityDays :Int32 = 30;
# Default validity of generated service certificates

const defaultUserCertValidityDays :Int32 = 30;
# Default validity of generated client certificates

const defaultDeviceCertValidityDays :Int32 = 30;
# Default validity of generated device certificates


const capNameDeviceCerts :Text = "capDeviceCerts";
const capNameServiceCerts :Text = "capServiceCerts";
const capNameUserCerts :Text = "capUserCerts";
const capNameVerifyCerts :Text = "capVerifyCerts";


interface CapCerts {
# Certificate service for providing capabilities
# For management of the CA, use the CLI.

  capDeviceCerts @0 (clientID :Text) -> (cap :CapDeviceCerts);
  # Get the capability to create device certificates

  capServiceCerts @1 (clientID :Text) -> (cap :CapServiceCerts);
  # Get the capability to create service certificates

  capUserCerts @2 (clientID :Text) -> (cap :CapUserCerts);
  # Get the capability to create user certificates

  capVerifyCerts @3 (clientID :Text) -> (cap :CapVerifyCerts);
  # Get the capability to verify certificates
}

interface CapDeviceCerts {
# Capability to create device certificates

  createDeviceCert @0 (deviceID:Text, pubKeyPEM:Text, validityDays:Int32=0) -> (certPEM: Text, caCertPEM :Text);
  # Generate or renew IoT device certificate for access hub IoT gateway
  #  @deviceID to include in the certificate
  #  @pubKeyPEM with device's public key in PEM format
  #  @validityDays validity of certificate in days. 0 to use the default
  # returns: device certificate and the CA used to sign it in PEM format
}

interface CapServiceCerts {
# Capability to create service certificates

  createServiceCert @0 (serviceID:Text, pubKeyPEM:Text, validityDays:Int32=0, names:List(Text)) -> (certPEM: Text, caCertPEM :Text);
  # Generate a hub service certificate
  #  @serviceID to include in the certificate, for example hubID/serviceName
  #  @pubKeyPEM with service public key in PEM format
  #  @validityDays validity of certificate in days. 0 to use the default
  #  @names contain the service DNS names or IP addresses the service can be reached at
  # returns: service certificate and the CA used to sign it in PEM format
}

interface CapUserCerts {
# Capability to create user certificates

  createUserCert @0 (clientID:Text, pubKeyPEM:Text, validityDays:Int32=0) -> (certPEM: Text, caCertPEM :Text);
  # Generate an end-user certificate for access hub gateway services
  #  @userID to include in the certificate, for example an email address
  #  @pubKeyPEM with user's public key in PEM format
  #  @validityDays validity of certificate in days. 0 to use the default
  # returns: client certificate and the CA used to sign it in PEM format
}


interface CapVerifyCerts {
# Capability to verify certificate. Intended for verification before renewal.

  verifyCert @0 (clientID:Text, certPEM:Text) -> ();
  #  @clientID must match the certificate assigned CN
  #  @certPEM certificate to verify in PEM format
  # returns: error if certificate is invalid
}

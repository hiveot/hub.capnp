// Code generated by capnpc-go. DO NOT EDIT.

package hubapi

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

// Constants defined in Authz.capnp.
const (
	AuthzServiceName    = "authz"
	ClientRoleNone      = "none"
	ClientRoleViewer    = "viewer"
	ClientRoleOperator  = "operator"
	ClientRoleManager   = "manager"
	ClientRoleIotDevice = "iotdevice"
	PermEmitAction      = "permEmitAction"
	PermPubEvent        = "permPubEvent"
	PermPubTD           = "permPublishTD"
	PermReadAction      = "permReadAction"
	PermReadEvent       = "permReadEvent"
	PermReadTD          = "permReadTD"
	PermWriteProperty   = "permWriteProperty"
	AllGroupName        = "all"
	CapNameClientAuthz  = "capClientAuthz"
	CapNameManageAuthz  = "capManageAuthz"
	CapNameVerifyAuthz  = "capVerifyAuthz"
)

type RoleMap capnp.Struct

// RoleMap_TypeID is the unique identifier for the type RoleMap.
const RoleMap_TypeID = 0x9e451e166449d1c8

func NewRoleMap(s *capnp.Segment) (RoleMap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RoleMap(st), err
}

func NewRootRoleMap(s *capnp.Segment) (RoleMap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RoleMap(st), err
}

func ReadRootRoleMap(msg *capnp.Message) (RoleMap, error) {
	root, err := msg.Root()
	return RoleMap(root.Struct()), err
}

func (s RoleMap) String() string {
	str, _ := text.Marshal(0x9e451e166449d1c8, capnp.Struct(s))
	return str
}

func (s RoleMap) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RoleMap) DecodeFromPtr(p capnp.Ptr) RoleMap {
	return RoleMap(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RoleMap) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RoleMap) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RoleMap) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RoleMap) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RoleMap) Entries() (RoleMap_Entry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RoleMap_Entry_List(p.List()), err
}

func (s RoleMap) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RoleMap) SetEntries(v RoleMap_Entry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated RoleMap_Entry_List, preferring placement in s's segment.
func (s RoleMap) NewEntries(n int32) (RoleMap_Entry_List, error) {
	l, err := NewRoleMap_Entry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return RoleMap_Entry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// RoleMap_List is a list of RoleMap.
type RoleMap_List = capnp.StructList[RoleMap]

// NewRoleMap creates a new list of RoleMap.
func NewRoleMap_List(s *capnp.Segment, sz int32) (RoleMap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RoleMap](l), err
}

// RoleMap_Future is a wrapper for a RoleMap promised by a client call.
type RoleMap_Future struct{ *capnp.Future }

func (f RoleMap_Future) Struct() (RoleMap, error) {
	p, err := f.Future.Ptr()
	return RoleMap(p.Struct()), err
}

type RoleMap_Entry capnp.Struct

// RoleMap_Entry_TypeID is the unique identifier for the type RoleMap_Entry.
const RoleMap_Entry_TypeID = 0x97183a096ac47cf5

func NewRoleMap_Entry(s *capnp.Segment) (RoleMap_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RoleMap_Entry(st), err
}

func NewRootRoleMap_Entry(s *capnp.Segment) (RoleMap_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RoleMap_Entry(st), err
}

func ReadRootRoleMap_Entry(msg *capnp.Message) (RoleMap_Entry, error) {
	root, err := msg.Root()
	return RoleMap_Entry(root.Struct()), err
}

func (s RoleMap_Entry) String() string {
	str, _ := text.Marshal(0x97183a096ac47cf5, capnp.Struct(s))
	return str
}

func (s RoleMap_Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RoleMap_Entry) DecodeFromPtr(p capnp.Ptr) RoleMap_Entry {
	return RoleMap_Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RoleMap_Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RoleMap_Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RoleMap_Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RoleMap_Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RoleMap_Entry) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RoleMap_Entry) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RoleMap_Entry) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RoleMap_Entry) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RoleMap_Entry) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s RoleMap_Entry) HasRole() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RoleMap_Entry) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s RoleMap_Entry) SetRole(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// RoleMap_Entry_List is a list of RoleMap_Entry.
type RoleMap_Entry_List = capnp.StructList[RoleMap_Entry]

// NewRoleMap_Entry creates a new list of RoleMap_Entry.
func NewRoleMap_Entry_List(s *capnp.Segment, sz int32) (RoleMap_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[RoleMap_Entry](l), err
}

// RoleMap_Entry_Future is a wrapper for a RoleMap_Entry promised by a client call.
type RoleMap_Entry_Future struct{ *capnp.Future }

func (f RoleMap_Entry_Future) Struct() (RoleMap_Entry, error) {
	p, err := f.Future.Ptr()
	return RoleMap_Entry(p.Struct()), err
}

type Group capnp.Struct

// Group_TypeID is the unique identifier for the type Group.
const Group_TypeID = 0xe8a6e2efa864976a

func NewGroup(s *capnp.Segment) (Group, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Group(st), err
}

func NewRootGroup(s *capnp.Segment) (Group, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Group(st), err
}

func ReadRootGroup(msg *capnp.Message) (Group, error) {
	root, err := msg.Root()
	return Group(root.Struct()), err
}

func (s Group) String() string {
	str, _ := text.Marshal(0xe8a6e2efa864976a, capnp.Struct(s))
	return str
}

func (s Group) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Group) DecodeFromPtr(p capnp.Ptr) Group {
	return Group(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Group) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Group) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Group) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Group) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Group) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Group) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Group) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Group) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Group) MemberRoles() (RoleMap, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RoleMap(p.Struct()), err
}

func (s Group) HasMemberRoles() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Group) SetMemberRoles(v RoleMap) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewMemberRoles sets the memberRoles field to a newly
// allocated RoleMap struct, preferring placement in s's segment.
func (s Group) NewMemberRoles() (RoleMap, error) {
	ss, err := NewRoleMap(capnp.Struct(s).Segment())
	if err != nil {
		return RoleMap{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Group_List is a list of Group.
type Group_List = capnp.StructList[Group]

// NewGroup creates a new list of Group.
func NewGroup_List(s *capnp.Segment, sz int32) (Group_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Group](l), err
}

// Group_Future is a wrapper for a Group promised by a client call.
type Group_Future struct{ *capnp.Future }

func (f Group_Future) Struct() (Group, error) {
	p, err := f.Future.Ptr()
	return Group(p.Struct()), err
}
func (p Group_Future) MemberRoles() RoleMap_Future {
	return RoleMap_Future{Future: p.Future.Field(1, nil)}
}

type CapAuthz capnp.Client

// CapAuthz_TypeID is the unique identifier for the type CapAuthz.
const CapAuthz_TypeID = 0xe7a8fc57f59c4ab4

func (c CapAuthz) CapClientAuthz(ctx context.Context, params func(CapAuthz_capClientAuthz_Params) error) (CapAuthz_capClientAuthz_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe7a8fc57f59c4ab4,
			MethodID:      0,
			InterfaceName: "hubapi/Authz.capnp:CapAuthz",
			MethodName:    "capClientAuthz",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapAuthz_capClientAuthz_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapAuthz_capClientAuthz_Results_Future{Future: ans.Future()}, release
}
func (c CapAuthz) CapManageAuthz(ctx context.Context, params func(CapAuthz_capManageAuthz_Params) error) (CapAuthz_capManageAuthz_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe7a8fc57f59c4ab4,
			MethodID:      1,
			InterfaceName: "hubapi/Authz.capnp:CapAuthz",
			MethodName:    "capManageAuthz",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapAuthz_capManageAuthz_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapAuthz_capManageAuthz_Results_Future{Future: ans.Future()}, release
}
func (c CapAuthz) CapVerifyAuthz(ctx context.Context, params func(CapAuthz_capVerifyAuthz_Params) error) (CapAuthz_capVerifyAuthz_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe7a8fc57f59c4ab4,
			MethodID:      2,
			InterfaceName: "hubapi/Authz.capnp:CapAuthz",
			MethodName:    "capVerifyAuthz",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapAuthz_capVerifyAuthz_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapAuthz_capVerifyAuthz_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapAuthz) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapAuthz) AddRef() CapAuthz {
	return CapAuthz(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapAuthz) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapAuthz) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapAuthz) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapAuthz) DecodeFromPtr(p capnp.Ptr) CapAuthz {
	return CapAuthz(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapAuthz) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapAuthz) IsSame(other CapAuthz) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapAuthz) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapAuthz) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapAuthz_Server is a CapAuthz with a local implementation.
type CapAuthz_Server interface {
	CapClientAuthz(context.Context, CapAuthz_capClientAuthz) error

	CapManageAuthz(context.Context, CapAuthz_capManageAuthz) error

	CapVerifyAuthz(context.Context, CapAuthz_capVerifyAuthz) error
}

// CapAuthz_NewServer creates a new Server from an implementation of CapAuthz_Server.
func CapAuthz_NewServer(s CapAuthz_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapAuthz_Methods(nil, s), s, c)
}

// CapAuthz_ServerToClient creates a new Client from an implementation of CapAuthz_Server.
// The caller is responsible for calling Release on the returned Client.
func CapAuthz_ServerToClient(s CapAuthz_Server) CapAuthz {
	return CapAuthz(capnp.NewClient(CapAuthz_NewServer(s)))
}

// CapAuthz_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapAuthz_Methods(methods []server.Method, s CapAuthz_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe7a8fc57f59c4ab4,
			MethodID:      0,
			InterfaceName: "hubapi/Authz.capnp:CapAuthz",
			MethodName:    "capClientAuthz",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapClientAuthz(ctx, CapAuthz_capClientAuthz{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe7a8fc57f59c4ab4,
			MethodID:      1,
			InterfaceName: "hubapi/Authz.capnp:CapAuthz",
			MethodName:    "capManageAuthz",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapManageAuthz(ctx, CapAuthz_capManageAuthz{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe7a8fc57f59c4ab4,
			MethodID:      2,
			InterfaceName: "hubapi/Authz.capnp:CapAuthz",
			MethodName:    "capVerifyAuthz",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapVerifyAuthz(ctx, CapAuthz_capVerifyAuthz{call})
		},
	})

	return methods
}

// CapAuthz_capClientAuthz holds the state for a server call to CapAuthz.capClientAuthz.
// See server.Call for documentation.
type CapAuthz_capClientAuthz struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapAuthz_capClientAuthz) Args() CapAuthz_capClientAuthz_Params {
	return CapAuthz_capClientAuthz_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapAuthz_capClientAuthz) AllocResults() (CapAuthz_capClientAuthz_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAuthz_capClientAuthz_Results(r), err
}

// CapAuthz_capManageAuthz holds the state for a server call to CapAuthz.capManageAuthz.
// See server.Call for documentation.
type CapAuthz_capManageAuthz struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapAuthz_capManageAuthz) Args() CapAuthz_capManageAuthz_Params {
	return CapAuthz_capManageAuthz_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapAuthz_capManageAuthz) AllocResults() (CapAuthz_capManageAuthz_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAuthz_capManageAuthz_Results(r), err
}

// CapAuthz_capVerifyAuthz holds the state for a server call to CapAuthz.capVerifyAuthz.
// See server.Call for documentation.
type CapAuthz_capVerifyAuthz struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapAuthz_capVerifyAuthz) Args() CapAuthz_capVerifyAuthz_Params {
	return CapAuthz_capVerifyAuthz_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapAuthz_capVerifyAuthz) AllocResults() (CapAuthz_capVerifyAuthz_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAuthz_capVerifyAuthz_Results(r), err
}

// CapAuthz_List is a list of CapAuthz.
type CapAuthz_List = capnp.CapList[CapAuthz]

// NewCapAuthz creates a new list of CapAuthz.
func NewCapAuthz_List(s *capnp.Segment, sz int32) (CapAuthz_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapAuthz](l), err
}

type CapAuthz_capClientAuthz_Params capnp.Struct

// CapAuthz_capClientAuthz_Params_TypeID is the unique identifier for the type CapAuthz_capClientAuthz_Params.
const CapAuthz_capClientAuthz_Params_TypeID = 0xd3cb6dc7b5b71ef7

func NewCapAuthz_capClientAuthz_Params(s *capnp.Segment) (CapAuthz_capClientAuthz_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAuthz_capClientAuthz_Params(st), err
}

func NewRootCapAuthz_capClientAuthz_Params(s *capnp.Segment) (CapAuthz_capClientAuthz_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAuthz_capClientAuthz_Params(st), err
}

func ReadRootCapAuthz_capClientAuthz_Params(msg *capnp.Message) (CapAuthz_capClientAuthz_Params, error) {
	root, err := msg.Root()
	return CapAuthz_capClientAuthz_Params(root.Struct()), err
}

func (s CapAuthz_capClientAuthz_Params) String() string {
	str, _ := text.Marshal(0xd3cb6dc7b5b71ef7, capnp.Struct(s))
	return str
}

func (s CapAuthz_capClientAuthz_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAuthz_capClientAuthz_Params) DecodeFromPtr(p capnp.Ptr) CapAuthz_capClientAuthz_Params {
	return CapAuthz_capClientAuthz_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAuthz_capClientAuthz_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAuthz_capClientAuthz_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAuthz_capClientAuthz_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAuthz_capClientAuthz_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapAuthz_capClientAuthz_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapAuthz_capClientAuthz_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapAuthz_capClientAuthz_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapAuthz_capClientAuthz_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapAuthz_capClientAuthz_Params_List is a list of CapAuthz_capClientAuthz_Params.
type CapAuthz_capClientAuthz_Params_List = capnp.StructList[CapAuthz_capClientAuthz_Params]

// NewCapAuthz_capClientAuthz_Params creates a new list of CapAuthz_capClientAuthz_Params.
func NewCapAuthz_capClientAuthz_Params_List(s *capnp.Segment, sz int32) (CapAuthz_capClientAuthz_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapAuthz_capClientAuthz_Params](l), err
}

// CapAuthz_capClientAuthz_Params_Future is a wrapper for a CapAuthz_capClientAuthz_Params promised by a client call.
type CapAuthz_capClientAuthz_Params_Future struct{ *capnp.Future }

func (f CapAuthz_capClientAuthz_Params_Future) Struct() (CapAuthz_capClientAuthz_Params, error) {
	p, err := f.Future.Ptr()
	return CapAuthz_capClientAuthz_Params(p.Struct()), err
}

type CapAuthz_capClientAuthz_Results capnp.Struct

// CapAuthz_capClientAuthz_Results_TypeID is the unique identifier for the type CapAuthz_capClientAuthz_Results.
const CapAuthz_capClientAuthz_Results_TypeID = 0x8936891056d33633

func NewCapAuthz_capClientAuthz_Results(s *capnp.Segment) (CapAuthz_capClientAuthz_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAuthz_capClientAuthz_Results(st), err
}

func NewRootCapAuthz_capClientAuthz_Results(s *capnp.Segment) (CapAuthz_capClientAuthz_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAuthz_capClientAuthz_Results(st), err
}

func ReadRootCapAuthz_capClientAuthz_Results(msg *capnp.Message) (CapAuthz_capClientAuthz_Results, error) {
	root, err := msg.Root()
	return CapAuthz_capClientAuthz_Results(root.Struct()), err
}

func (s CapAuthz_capClientAuthz_Results) String() string {
	str, _ := text.Marshal(0x8936891056d33633, capnp.Struct(s))
	return str
}

func (s CapAuthz_capClientAuthz_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAuthz_capClientAuthz_Results) DecodeFromPtr(p capnp.Ptr) CapAuthz_capClientAuthz_Results {
	return CapAuthz_capClientAuthz_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAuthz_capClientAuthz_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAuthz_capClientAuthz_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAuthz_capClientAuthz_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAuthz_capClientAuthz_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapAuthz_capClientAuthz_Results) Cap() CapClientAuthz {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapClientAuthz(p.Interface().Client())
}

func (s CapAuthz_capClientAuthz_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapAuthz_capClientAuthz_Results) SetCap(v CapClientAuthz) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapAuthz_capClientAuthz_Results_List is a list of CapAuthz_capClientAuthz_Results.
type CapAuthz_capClientAuthz_Results_List = capnp.StructList[CapAuthz_capClientAuthz_Results]

// NewCapAuthz_capClientAuthz_Results creates a new list of CapAuthz_capClientAuthz_Results.
func NewCapAuthz_capClientAuthz_Results_List(s *capnp.Segment, sz int32) (CapAuthz_capClientAuthz_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapAuthz_capClientAuthz_Results](l), err
}

// CapAuthz_capClientAuthz_Results_Future is a wrapper for a CapAuthz_capClientAuthz_Results promised by a client call.
type CapAuthz_capClientAuthz_Results_Future struct{ *capnp.Future }

func (f CapAuthz_capClientAuthz_Results_Future) Struct() (CapAuthz_capClientAuthz_Results, error) {
	p, err := f.Future.Ptr()
	return CapAuthz_capClientAuthz_Results(p.Struct()), err
}
func (p CapAuthz_capClientAuthz_Results_Future) Cap() CapClientAuthz {
	return CapClientAuthz(p.Future.Field(0, nil).Client())
}

type CapAuthz_capManageAuthz_Params capnp.Struct

// CapAuthz_capManageAuthz_Params_TypeID is the unique identifier for the type CapAuthz_capManageAuthz_Params.
const CapAuthz_capManageAuthz_Params_TypeID = 0xd1e1df166519d100

func NewCapAuthz_capManageAuthz_Params(s *capnp.Segment) (CapAuthz_capManageAuthz_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAuthz_capManageAuthz_Params(st), err
}

func NewRootCapAuthz_capManageAuthz_Params(s *capnp.Segment) (CapAuthz_capManageAuthz_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAuthz_capManageAuthz_Params(st), err
}

func ReadRootCapAuthz_capManageAuthz_Params(msg *capnp.Message) (CapAuthz_capManageAuthz_Params, error) {
	root, err := msg.Root()
	return CapAuthz_capManageAuthz_Params(root.Struct()), err
}

func (s CapAuthz_capManageAuthz_Params) String() string {
	str, _ := text.Marshal(0xd1e1df166519d100, capnp.Struct(s))
	return str
}

func (s CapAuthz_capManageAuthz_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAuthz_capManageAuthz_Params) DecodeFromPtr(p capnp.Ptr) CapAuthz_capManageAuthz_Params {
	return CapAuthz_capManageAuthz_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAuthz_capManageAuthz_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAuthz_capManageAuthz_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAuthz_capManageAuthz_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAuthz_capManageAuthz_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapAuthz_capManageAuthz_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapAuthz_capManageAuthz_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapAuthz_capManageAuthz_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapAuthz_capManageAuthz_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapAuthz_capManageAuthz_Params_List is a list of CapAuthz_capManageAuthz_Params.
type CapAuthz_capManageAuthz_Params_List = capnp.StructList[CapAuthz_capManageAuthz_Params]

// NewCapAuthz_capManageAuthz_Params creates a new list of CapAuthz_capManageAuthz_Params.
func NewCapAuthz_capManageAuthz_Params_List(s *capnp.Segment, sz int32) (CapAuthz_capManageAuthz_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapAuthz_capManageAuthz_Params](l), err
}

// CapAuthz_capManageAuthz_Params_Future is a wrapper for a CapAuthz_capManageAuthz_Params promised by a client call.
type CapAuthz_capManageAuthz_Params_Future struct{ *capnp.Future }

func (f CapAuthz_capManageAuthz_Params_Future) Struct() (CapAuthz_capManageAuthz_Params, error) {
	p, err := f.Future.Ptr()
	return CapAuthz_capManageAuthz_Params(p.Struct()), err
}

type CapAuthz_capManageAuthz_Results capnp.Struct

// CapAuthz_capManageAuthz_Results_TypeID is the unique identifier for the type CapAuthz_capManageAuthz_Results.
const CapAuthz_capManageAuthz_Results_TypeID = 0xb4ad26f6c52c0300

func NewCapAuthz_capManageAuthz_Results(s *capnp.Segment) (CapAuthz_capManageAuthz_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAuthz_capManageAuthz_Results(st), err
}

func NewRootCapAuthz_capManageAuthz_Results(s *capnp.Segment) (CapAuthz_capManageAuthz_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAuthz_capManageAuthz_Results(st), err
}

func ReadRootCapAuthz_capManageAuthz_Results(msg *capnp.Message) (CapAuthz_capManageAuthz_Results, error) {
	root, err := msg.Root()
	return CapAuthz_capManageAuthz_Results(root.Struct()), err
}

func (s CapAuthz_capManageAuthz_Results) String() string {
	str, _ := text.Marshal(0xb4ad26f6c52c0300, capnp.Struct(s))
	return str
}

func (s CapAuthz_capManageAuthz_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAuthz_capManageAuthz_Results) DecodeFromPtr(p capnp.Ptr) CapAuthz_capManageAuthz_Results {
	return CapAuthz_capManageAuthz_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAuthz_capManageAuthz_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAuthz_capManageAuthz_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAuthz_capManageAuthz_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAuthz_capManageAuthz_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapAuthz_capManageAuthz_Results) Cap() CapManageAuthz {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapManageAuthz(p.Interface().Client())
}

func (s CapAuthz_capManageAuthz_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapAuthz_capManageAuthz_Results) SetCap(v CapManageAuthz) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapAuthz_capManageAuthz_Results_List is a list of CapAuthz_capManageAuthz_Results.
type CapAuthz_capManageAuthz_Results_List = capnp.StructList[CapAuthz_capManageAuthz_Results]

// NewCapAuthz_capManageAuthz_Results creates a new list of CapAuthz_capManageAuthz_Results.
func NewCapAuthz_capManageAuthz_Results_List(s *capnp.Segment, sz int32) (CapAuthz_capManageAuthz_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapAuthz_capManageAuthz_Results](l), err
}

// CapAuthz_capManageAuthz_Results_Future is a wrapper for a CapAuthz_capManageAuthz_Results promised by a client call.
type CapAuthz_capManageAuthz_Results_Future struct{ *capnp.Future }

func (f CapAuthz_capManageAuthz_Results_Future) Struct() (CapAuthz_capManageAuthz_Results, error) {
	p, err := f.Future.Ptr()
	return CapAuthz_capManageAuthz_Results(p.Struct()), err
}
func (p CapAuthz_capManageAuthz_Results_Future) Cap() CapManageAuthz {
	return CapManageAuthz(p.Future.Field(0, nil).Client())
}

type CapAuthz_capVerifyAuthz_Params capnp.Struct

// CapAuthz_capVerifyAuthz_Params_TypeID is the unique identifier for the type CapAuthz_capVerifyAuthz_Params.
const CapAuthz_capVerifyAuthz_Params_TypeID = 0x8a65d37d1854b0b9

func NewCapAuthz_capVerifyAuthz_Params(s *capnp.Segment) (CapAuthz_capVerifyAuthz_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAuthz_capVerifyAuthz_Params(st), err
}

func NewRootCapAuthz_capVerifyAuthz_Params(s *capnp.Segment) (CapAuthz_capVerifyAuthz_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAuthz_capVerifyAuthz_Params(st), err
}

func ReadRootCapAuthz_capVerifyAuthz_Params(msg *capnp.Message) (CapAuthz_capVerifyAuthz_Params, error) {
	root, err := msg.Root()
	return CapAuthz_capVerifyAuthz_Params(root.Struct()), err
}

func (s CapAuthz_capVerifyAuthz_Params) String() string {
	str, _ := text.Marshal(0x8a65d37d1854b0b9, capnp.Struct(s))
	return str
}

func (s CapAuthz_capVerifyAuthz_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAuthz_capVerifyAuthz_Params) DecodeFromPtr(p capnp.Ptr) CapAuthz_capVerifyAuthz_Params {
	return CapAuthz_capVerifyAuthz_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAuthz_capVerifyAuthz_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAuthz_capVerifyAuthz_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAuthz_capVerifyAuthz_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAuthz_capVerifyAuthz_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapAuthz_capVerifyAuthz_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapAuthz_capVerifyAuthz_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapAuthz_capVerifyAuthz_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapAuthz_capVerifyAuthz_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapAuthz_capVerifyAuthz_Params_List is a list of CapAuthz_capVerifyAuthz_Params.
type CapAuthz_capVerifyAuthz_Params_List = capnp.StructList[CapAuthz_capVerifyAuthz_Params]

// NewCapAuthz_capVerifyAuthz_Params creates a new list of CapAuthz_capVerifyAuthz_Params.
func NewCapAuthz_capVerifyAuthz_Params_List(s *capnp.Segment, sz int32) (CapAuthz_capVerifyAuthz_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapAuthz_capVerifyAuthz_Params](l), err
}

// CapAuthz_capVerifyAuthz_Params_Future is a wrapper for a CapAuthz_capVerifyAuthz_Params promised by a client call.
type CapAuthz_capVerifyAuthz_Params_Future struct{ *capnp.Future }

func (f CapAuthz_capVerifyAuthz_Params_Future) Struct() (CapAuthz_capVerifyAuthz_Params, error) {
	p, err := f.Future.Ptr()
	return CapAuthz_capVerifyAuthz_Params(p.Struct()), err
}

type CapAuthz_capVerifyAuthz_Results capnp.Struct

// CapAuthz_capVerifyAuthz_Results_TypeID is the unique identifier for the type CapAuthz_capVerifyAuthz_Results.
const CapAuthz_capVerifyAuthz_Results_TypeID = 0xca7c68978c2cd0e0

func NewCapAuthz_capVerifyAuthz_Results(s *capnp.Segment) (CapAuthz_capVerifyAuthz_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAuthz_capVerifyAuthz_Results(st), err
}

func NewRootCapAuthz_capVerifyAuthz_Results(s *capnp.Segment) (CapAuthz_capVerifyAuthz_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAuthz_capVerifyAuthz_Results(st), err
}

func ReadRootCapAuthz_capVerifyAuthz_Results(msg *capnp.Message) (CapAuthz_capVerifyAuthz_Results, error) {
	root, err := msg.Root()
	return CapAuthz_capVerifyAuthz_Results(root.Struct()), err
}

func (s CapAuthz_capVerifyAuthz_Results) String() string {
	str, _ := text.Marshal(0xca7c68978c2cd0e0, capnp.Struct(s))
	return str
}

func (s CapAuthz_capVerifyAuthz_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAuthz_capVerifyAuthz_Results) DecodeFromPtr(p capnp.Ptr) CapAuthz_capVerifyAuthz_Results {
	return CapAuthz_capVerifyAuthz_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAuthz_capVerifyAuthz_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAuthz_capVerifyAuthz_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAuthz_capVerifyAuthz_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAuthz_capVerifyAuthz_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapAuthz_capVerifyAuthz_Results) Cap() CapVerifyAuthz {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapVerifyAuthz(p.Interface().Client())
}

func (s CapAuthz_capVerifyAuthz_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapAuthz_capVerifyAuthz_Results) SetCap(v CapVerifyAuthz) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapAuthz_capVerifyAuthz_Results_List is a list of CapAuthz_capVerifyAuthz_Results.
type CapAuthz_capVerifyAuthz_Results_List = capnp.StructList[CapAuthz_capVerifyAuthz_Results]

// NewCapAuthz_capVerifyAuthz_Results creates a new list of CapAuthz_capVerifyAuthz_Results.
func NewCapAuthz_capVerifyAuthz_Results_List(s *capnp.Segment, sz int32) (CapAuthz_capVerifyAuthz_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapAuthz_capVerifyAuthz_Results](l), err
}

// CapAuthz_capVerifyAuthz_Results_Future is a wrapper for a CapAuthz_capVerifyAuthz_Results promised by a client call.
type CapAuthz_capVerifyAuthz_Results_Future struct{ *capnp.Future }

func (f CapAuthz_capVerifyAuthz_Results_Future) Struct() (CapAuthz_capVerifyAuthz_Results, error) {
	p, err := f.Future.Ptr()
	return CapAuthz_capVerifyAuthz_Results(p.Struct()), err
}
func (p CapAuthz_capVerifyAuthz_Results_Future) Cap() CapVerifyAuthz {
	return CapVerifyAuthz(p.Future.Field(0, nil).Client())
}

type CapClientAuthz capnp.Client

// CapClientAuthz_TypeID is the unique identifier for the type CapClientAuthz.
const CapClientAuthz_TypeID = 0x901071c55900f0ee

func (c CapClientAuthz) GetPermissions(ctx context.Context, params func(CapClientAuthz_getPermissions_Params) error) (CapClientAuthz_getPermissions_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x901071c55900f0ee,
			MethodID:      0,
			InterfaceName: "hubapi/Authz.capnp:CapClientAuthz",
			MethodName:    "getPermissions",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapClientAuthz_getPermissions_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapClientAuthz_getPermissions_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapClientAuthz) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapClientAuthz) AddRef() CapClientAuthz {
	return CapClientAuthz(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapClientAuthz) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapClientAuthz) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapClientAuthz) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapClientAuthz) DecodeFromPtr(p capnp.Ptr) CapClientAuthz {
	return CapClientAuthz(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapClientAuthz) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapClientAuthz) IsSame(other CapClientAuthz) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapClientAuthz) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapClientAuthz) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapClientAuthz_Server is a CapClientAuthz with a local implementation.
type CapClientAuthz_Server interface {
	GetPermissions(context.Context, CapClientAuthz_getPermissions) error
}

// CapClientAuthz_NewServer creates a new Server from an implementation of CapClientAuthz_Server.
func CapClientAuthz_NewServer(s CapClientAuthz_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapClientAuthz_Methods(nil, s), s, c)
}

// CapClientAuthz_ServerToClient creates a new Client from an implementation of CapClientAuthz_Server.
// The caller is responsible for calling Release on the returned Client.
func CapClientAuthz_ServerToClient(s CapClientAuthz_Server) CapClientAuthz {
	return CapClientAuthz(capnp.NewClient(CapClientAuthz_NewServer(s)))
}

// CapClientAuthz_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapClientAuthz_Methods(methods []server.Method, s CapClientAuthz_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x901071c55900f0ee,
			MethodID:      0,
			InterfaceName: "hubapi/Authz.capnp:CapClientAuthz",
			MethodName:    "getPermissions",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetPermissions(ctx, CapClientAuthz_getPermissions{call})
		},
	})

	return methods
}

// CapClientAuthz_getPermissions holds the state for a server call to CapClientAuthz.getPermissions.
// See server.Call for documentation.
type CapClientAuthz_getPermissions struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapClientAuthz_getPermissions) Args() CapClientAuthz_getPermissions_Params {
	return CapClientAuthz_getPermissions_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapClientAuthz_getPermissions) AllocResults() (CapClientAuthz_getPermissions_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientAuthz_getPermissions_Results(r), err
}

// CapClientAuthz_List is a list of CapClientAuthz.
type CapClientAuthz_List = capnp.CapList[CapClientAuthz]

// NewCapClientAuthz creates a new list of CapClientAuthz.
func NewCapClientAuthz_List(s *capnp.Segment, sz int32) (CapClientAuthz_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapClientAuthz](l), err
}

type CapClientAuthz_getPermissions_Params capnp.Struct

// CapClientAuthz_getPermissions_Params_TypeID is the unique identifier for the type CapClientAuthz_getPermissions_Params.
const CapClientAuthz_getPermissions_Params_TypeID = 0x942c2bf8c8460f17

func NewCapClientAuthz_getPermissions_Params(s *capnp.Segment) (CapClientAuthz_getPermissions_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientAuthz_getPermissions_Params(st), err
}

func NewRootCapClientAuthz_getPermissions_Params(s *capnp.Segment) (CapClientAuthz_getPermissions_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientAuthz_getPermissions_Params(st), err
}

func ReadRootCapClientAuthz_getPermissions_Params(msg *capnp.Message) (CapClientAuthz_getPermissions_Params, error) {
	root, err := msg.Root()
	return CapClientAuthz_getPermissions_Params(root.Struct()), err
}

func (s CapClientAuthz_getPermissions_Params) String() string {
	str, _ := text.Marshal(0x942c2bf8c8460f17, capnp.Struct(s))
	return str
}

func (s CapClientAuthz_getPermissions_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapClientAuthz_getPermissions_Params) DecodeFromPtr(p capnp.Ptr) CapClientAuthz_getPermissions_Params {
	return CapClientAuthz_getPermissions_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapClientAuthz_getPermissions_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapClientAuthz_getPermissions_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapClientAuthz_getPermissions_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapClientAuthz_getPermissions_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapClientAuthz_getPermissions_Params) ThingAddr() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapClientAuthz_getPermissions_Params) HasThingAddr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapClientAuthz_getPermissions_Params) ThingAddrBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapClientAuthz_getPermissions_Params) SetThingAddr(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapClientAuthz_getPermissions_Params_List is a list of CapClientAuthz_getPermissions_Params.
type CapClientAuthz_getPermissions_Params_List = capnp.StructList[CapClientAuthz_getPermissions_Params]

// NewCapClientAuthz_getPermissions_Params creates a new list of CapClientAuthz_getPermissions_Params.
func NewCapClientAuthz_getPermissions_Params_List(s *capnp.Segment, sz int32) (CapClientAuthz_getPermissions_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapClientAuthz_getPermissions_Params](l), err
}

// CapClientAuthz_getPermissions_Params_Future is a wrapper for a CapClientAuthz_getPermissions_Params promised by a client call.
type CapClientAuthz_getPermissions_Params_Future struct{ *capnp.Future }

func (f CapClientAuthz_getPermissions_Params_Future) Struct() (CapClientAuthz_getPermissions_Params, error) {
	p, err := f.Future.Ptr()
	return CapClientAuthz_getPermissions_Params(p.Struct()), err
}

type CapClientAuthz_getPermissions_Results capnp.Struct

// CapClientAuthz_getPermissions_Results_TypeID is the unique identifier for the type CapClientAuthz_getPermissions_Results.
const CapClientAuthz_getPermissions_Results_TypeID = 0x8f4d5501f70df3cc

func NewCapClientAuthz_getPermissions_Results(s *capnp.Segment) (CapClientAuthz_getPermissions_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientAuthz_getPermissions_Results(st), err
}

func NewRootCapClientAuthz_getPermissions_Results(s *capnp.Segment) (CapClientAuthz_getPermissions_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientAuthz_getPermissions_Results(st), err
}

func ReadRootCapClientAuthz_getPermissions_Results(msg *capnp.Message) (CapClientAuthz_getPermissions_Results, error) {
	root, err := msg.Root()
	return CapClientAuthz_getPermissions_Results(root.Struct()), err
}

func (s CapClientAuthz_getPermissions_Results) String() string {
	str, _ := text.Marshal(0x8f4d5501f70df3cc, capnp.Struct(s))
	return str
}

func (s CapClientAuthz_getPermissions_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapClientAuthz_getPermissions_Results) DecodeFromPtr(p capnp.Ptr) CapClientAuthz_getPermissions_Results {
	return CapClientAuthz_getPermissions_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapClientAuthz_getPermissions_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapClientAuthz_getPermissions_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapClientAuthz_getPermissions_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapClientAuthz_getPermissions_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapClientAuthz_getPermissions_Results) Permissions() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s CapClientAuthz_getPermissions_Results) HasPermissions() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapClientAuthz_getPermissions_Results) SetPermissions(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPermissions sets the permissions field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s CapClientAuthz_getPermissions_Results) NewPermissions(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapClientAuthz_getPermissions_Results_List is a list of CapClientAuthz_getPermissions_Results.
type CapClientAuthz_getPermissions_Results_List = capnp.StructList[CapClientAuthz_getPermissions_Results]

// NewCapClientAuthz_getPermissions_Results creates a new list of CapClientAuthz_getPermissions_Results.
func NewCapClientAuthz_getPermissions_Results_List(s *capnp.Segment, sz int32) (CapClientAuthz_getPermissions_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapClientAuthz_getPermissions_Results](l), err
}

// CapClientAuthz_getPermissions_Results_Future is a wrapper for a CapClientAuthz_getPermissions_Results promised by a client call.
type CapClientAuthz_getPermissions_Results_Future struct{ *capnp.Future }

func (f CapClientAuthz_getPermissions_Results_Future) Struct() (CapClientAuthz_getPermissions_Results, error) {
	p, err := f.Future.Ptr()
	return CapClientAuthz_getPermissions_Results(p.Struct()), err
}

type CapManageAuthz capnp.Client

// CapManageAuthz_TypeID is the unique identifier for the type CapManageAuthz.
const CapManageAuthz_TypeID = 0xea9816b0e3a4ecd0

func (c CapManageAuthz) AddThing(ctx context.Context, params func(CapManageAuthz_addThing_Params) error) (CapManageAuthz_addThing_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xea9816b0e3a4ecd0,
			MethodID:      0,
			InterfaceName: "hubapi/Authz.capnp:CapManageAuthz",
			MethodName:    "addThing",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageAuthz_addThing_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageAuthz_addThing_Results_Future{Future: ans.Future()}, release
}
func (c CapManageAuthz) GetGroup(ctx context.Context, params func(CapManageAuthz_getGroup_Params) error) (CapManageAuthz_getGroup_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xea9816b0e3a4ecd0,
			MethodID:      1,
			InterfaceName: "hubapi/Authz.capnp:CapManageAuthz",
			MethodName:    "getGroup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageAuthz_getGroup_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageAuthz_getGroup_Results_Future{Future: ans.Future()}, release
}
func (c CapManageAuthz) GetGroupRoles(ctx context.Context, params func(CapManageAuthz_getGroupRoles_Params) error) (CapManageAuthz_getGroupRoles_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xea9816b0e3a4ecd0,
			MethodID:      2,
			InterfaceName: "hubapi/Authz.capnp:CapManageAuthz",
			MethodName:    "getGroupRoles",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageAuthz_getGroupRoles_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageAuthz_getGroupRoles_Results_Future{Future: ans.Future()}, release
}
func (c CapManageAuthz) ListGroups(ctx context.Context, params func(CapManageAuthz_listGroups_Params) error) (CapManageAuthz_listGroups_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xea9816b0e3a4ecd0,
			MethodID:      3,
			InterfaceName: "hubapi/Authz.capnp:CapManageAuthz",
			MethodName:    "listGroups",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageAuthz_listGroups_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageAuthz_listGroups_Results_Future{Future: ans.Future()}, release
}
func (c CapManageAuthz) RemoveAll(ctx context.Context, params func(CapManageAuthz_removeAll_Params) error) (CapManageAuthz_removeAll_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xea9816b0e3a4ecd0,
			MethodID:      4,
			InterfaceName: "hubapi/Authz.capnp:CapManageAuthz",
			MethodName:    "removeAll",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageAuthz_removeAll_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageAuthz_removeAll_Results_Future{Future: ans.Future()}, release
}
func (c CapManageAuthz) RemoveClient(ctx context.Context, params func(CapManageAuthz_removeClient_Params) error) (CapManageAuthz_removeClient_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xea9816b0e3a4ecd0,
			MethodID:      5,
			InterfaceName: "hubapi/Authz.capnp:CapManageAuthz",
			MethodName:    "removeClient",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageAuthz_removeClient_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageAuthz_removeClient_Results_Future{Future: ans.Future()}, release
}
func (c CapManageAuthz) RemoveThing(ctx context.Context, params func(CapManageAuthz_removeThing_Params) error) (CapManageAuthz_removeThing_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xea9816b0e3a4ecd0,
			MethodID:      6,
			InterfaceName: "hubapi/Authz.capnp:CapManageAuthz",
			MethodName:    "removeThing",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageAuthz_removeThing_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageAuthz_removeThing_Results_Future{Future: ans.Future()}, release
}
func (c CapManageAuthz) SetClientRole(ctx context.Context, params func(CapManageAuthz_setClientRole_Params) error) (CapManageAuthz_setClientRole_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xea9816b0e3a4ecd0,
			MethodID:      7,
			InterfaceName: "hubapi/Authz.capnp:CapManageAuthz",
			MethodName:    "setClientRole",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageAuthz_setClientRole_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageAuthz_setClientRole_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapManageAuthz) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapManageAuthz) AddRef() CapManageAuthz {
	return CapManageAuthz(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapManageAuthz) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapManageAuthz) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapManageAuthz) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapManageAuthz) DecodeFromPtr(p capnp.Ptr) CapManageAuthz {
	return CapManageAuthz(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapManageAuthz) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapManageAuthz) IsSame(other CapManageAuthz) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapManageAuthz) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapManageAuthz) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapManageAuthz_Server is a CapManageAuthz with a local implementation.
type CapManageAuthz_Server interface {
	AddThing(context.Context, CapManageAuthz_addThing) error

	GetGroup(context.Context, CapManageAuthz_getGroup) error

	GetGroupRoles(context.Context, CapManageAuthz_getGroupRoles) error

	ListGroups(context.Context, CapManageAuthz_listGroups) error

	RemoveAll(context.Context, CapManageAuthz_removeAll) error

	RemoveClient(context.Context, CapManageAuthz_removeClient) error

	RemoveThing(context.Context, CapManageAuthz_removeThing) error

	SetClientRole(context.Context, CapManageAuthz_setClientRole) error
}

// CapManageAuthz_NewServer creates a new Server from an implementation of CapManageAuthz_Server.
func CapManageAuthz_NewServer(s CapManageAuthz_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapManageAuthz_Methods(nil, s), s, c)
}

// CapManageAuthz_ServerToClient creates a new Client from an implementation of CapManageAuthz_Server.
// The caller is responsible for calling Release on the returned Client.
func CapManageAuthz_ServerToClient(s CapManageAuthz_Server) CapManageAuthz {
	return CapManageAuthz(capnp.NewClient(CapManageAuthz_NewServer(s)))
}

// CapManageAuthz_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapManageAuthz_Methods(methods []server.Method, s CapManageAuthz_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 8)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xea9816b0e3a4ecd0,
			MethodID:      0,
			InterfaceName: "hubapi/Authz.capnp:CapManageAuthz",
			MethodName:    "addThing",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddThing(ctx, CapManageAuthz_addThing{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xea9816b0e3a4ecd0,
			MethodID:      1,
			InterfaceName: "hubapi/Authz.capnp:CapManageAuthz",
			MethodName:    "getGroup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetGroup(ctx, CapManageAuthz_getGroup{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xea9816b0e3a4ecd0,
			MethodID:      2,
			InterfaceName: "hubapi/Authz.capnp:CapManageAuthz",
			MethodName:    "getGroupRoles",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetGroupRoles(ctx, CapManageAuthz_getGroupRoles{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xea9816b0e3a4ecd0,
			MethodID:      3,
			InterfaceName: "hubapi/Authz.capnp:CapManageAuthz",
			MethodName:    "listGroups",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListGroups(ctx, CapManageAuthz_listGroups{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xea9816b0e3a4ecd0,
			MethodID:      4,
			InterfaceName: "hubapi/Authz.capnp:CapManageAuthz",
			MethodName:    "removeAll",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveAll(ctx, CapManageAuthz_removeAll{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xea9816b0e3a4ecd0,
			MethodID:      5,
			InterfaceName: "hubapi/Authz.capnp:CapManageAuthz",
			MethodName:    "removeClient",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveClient(ctx, CapManageAuthz_removeClient{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xea9816b0e3a4ecd0,
			MethodID:      6,
			InterfaceName: "hubapi/Authz.capnp:CapManageAuthz",
			MethodName:    "removeThing",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveThing(ctx, CapManageAuthz_removeThing{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xea9816b0e3a4ecd0,
			MethodID:      7,
			InterfaceName: "hubapi/Authz.capnp:CapManageAuthz",
			MethodName:    "setClientRole",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetClientRole(ctx, CapManageAuthz_setClientRole{call})
		},
	})

	return methods
}

// CapManageAuthz_addThing holds the state for a server call to CapManageAuthz.addThing.
// See server.Call for documentation.
type CapManageAuthz_addThing struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageAuthz_addThing) Args() CapManageAuthz_addThing_Params {
	return CapManageAuthz_addThing_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageAuthz_addThing) AllocResults() (CapManageAuthz_addThing_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageAuthz_addThing_Results(r), err
}

// CapManageAuthz_getGroup holds the state for a server call to CapManageAuthz.getGroup.
// See server.Call for documentation.
type CapManageAuthz_getGroup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageAuthz_getGroup) Args() CapManageAuthz_getGroup_Params {
	return CapManageAuthz_getGroup_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageAuthz_getGroup) AllocResults() (CapManageAuthz_getGroup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageAuthz_getGroup_Results(r), err
}

// CapManageAuthz_getGroupRoles holds the state for a server call to CapManageAuthz.getGroupRoles.
// See server.Call for documentation.
type CapManageAuthz_getGroupRoles struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageAuthz_getGroupRoles) Args() CapManageAuthz_getGroupRoles_Params {
	return CapManageAuthz_getGroupRoles_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageAuthz_getGroupRoles) AllocResults() (CapManageAuthz_getGroupRoles_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageAuthz_getGroupRoles_Results(r), err
}

// CapManageAuthz_listGroups holds the state for a server call to CapManageAuthz.listGroups.
// See server.Call for documentation.
type CapManageAuthz_listGroups struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageAuthz_listGroups) Args() CapManageAuthz_listGroups_Params {
	return CapManageAuthz_listGroups_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageAuthz_listGroups) AllocResults() (CapManageAuthz_listGroups_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageAuthz_listGroups_Results(r), err
}

// CapManageAuthz_removeAll holds the state for a server call to CapManageAuthz.removeAll.
// See server.Call for documentation.
type CapManageAuthz_removeAll struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageAuthz_removeAll) Args() CapManageAuthz_removeAll_Params {
	return CapManageAuthz_removeAll_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageAuthz_removeAll) AllocResults() (CapManageAuthz_removeAll_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageAuthz_removeAll_Results(r), err
}

// CapManageAuthz_removeClient holds the state for a server call to CapManageAuthz.removeClient.
// See server.Call for documentation.
type CapManageAuthz_removeClient struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageAuthz_removeClient) Args() CapManageAuthz_removeClient_Params {
	return CapManageAuthz_removeClient_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageAuthz_removeClient) AllocResults() (CapManageAuthz_removeClient_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageAuthz_removeClient_Results(r), err
}

// CapManageAuthz_removeThing holds the state for a server call to CapManageAuthz.removeThing.
// See server.Call for documentation.
type CapManageAuthz_removeThing struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageAuthz_removeThing) Args() CapManageAuthz_removeThing_Params {
	return CapManageAuthz_removeThing_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageAuthz_removeThing) AllocResults() (CapManageAuthz_removeThing_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageAuthz_removeThing_Results(r), err
}

// CapManageAuthz_setClientRole holds the state for a server call to CapManageAuthz.setClientRole.
// See server.Call for documentation.
type CapManageAuthz_setClientRole struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageAuthz_setClientRole) Args() CapManageAuthz_setClientRole_Params {
	return CapManageAuthz_setClientRole_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageAuthz_setClientRole) AllocResults() (CapManageAuthz_setClientRole_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageAuthz_setClientRole_Results(r), err
}

// CapManageAuthz_List is a list of CapManageAuthz.
type CapManageAuthz_List = capnp.CapList[CapManageAuthz]

// NewCapManageAuthz creates a new list of CapManageAuthz.
func NewCapManageAuthz_List(s *capnp.Segment, sz int32) (CapManageAuthz_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapManageAuthz](l), err
}

type CapManageAuthz_addThing_Params capnp.Struct

// CapManageAuthz_addThing_Params_TypeID is the unique identifier for the type CapManageAuthz_addThing_Params.
const CapManageAuthz_addThing_Params_TypeID = 0xa319eda6f36efbd8

func NewCapManageAuthz_addThing_Params(s *capnp.Segment) (CapManageAuthz_addThing_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapManageAuthz_addThing_Params(st), err
}

func NewRootCapManageAuthz_addThing_Params(s *capnp.Segment) (CapManageAuthz_addThing_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapManageAuthz_addThing_Params(st), err
}

func ReadRootCapManageAuthz_addThing_Params(msg *capnp.Message) (CapManageAuthz_addThing_Params, error) {
	root, err := msg.Root()
	return CapManageAuthz_addThing_Params(root.Struct()), err
}

func (s CapManageAuthz_addThing_Params) String() string {
	str, _ := text.Marshal(0xa319eda6f36efbd8, capnp.Struct(s))
	return str
}

func (s CapManageAuthz_addThing_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageAuthz_addThing_Params) DecodeFromPtr(p capnp.Ptr) CapManageAuthz_addThing_Params {
	return CapManageAuthz_addThing_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageAuthz_addThing_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageAuthz_addThing_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageAuthz_addThing_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageAuthz_addThing_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageAuthz_addThing_Params) ThingAddr() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapManageAuthz_addThing_Params) HasThingAddr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageAuthz_addThing_Params) ThingAddrBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapManageAuthz_addThing_Params) SetThingAddr(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapManageAuthz_addThing_Params) GroupName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapManageAuthz_addThing_Params) HasGroupName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapManageAuthz_addThing_Params) GroupNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapManageAuthz_addThing_Params) SetGroupName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CapManageAuthz_addThing_Params_List is a list of CapManageAuthz_addThing_Params.
type CapManageAuthz_addThing_Params_List = capnp.StructList[CapManageAuthz_addThing_Params]

// NewCapManageAuthz_addThing_Params creates a new list of CapManageAuthz_addThing_Params.
func NewCapManageAuthz_addThing_Params_List(s *capnp.Segment, sz int32) (CapManageAuthz_addThing_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapManageAuthz_addThing_Params](l), err
}

// CapManageAuthz_addThing_Params_Future is a wrapper for a CapManageAuthz_addThing_Params promised by a client call.
type CapManageAuthz_addThing_Params_Future struct{ *capnp.Future }

func (f CapManageAuthz_addThing_Params_Future) Struct() (CapManageAuthz_addThing_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageAuthz_addThing_Params(p.Struct()), err
}

type CapManageAuthz_addThing_Results capnp.Struct

// CapManageAuthz_addThing_Results_TypeID is the unique identifier for the type CapManageAuthz_addThing_Results.
const CapManageAuthz_addThing_Results_TypeID = 0x83b0068869d06e38

func NewCapManageAuthz_addThing_Results(s *capnp.Segment) (CapManageAuthz_addThing_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageAuthz_addThing_Results(st), err
}

func NewRootCapManageAuthz_addThing_Results(s *capnp.Segment) (CapManageAuthz_addThing_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageAuthz_addThing_Results(st), err
}

func ReadRootCapManageAuthz_addThing_Results(msg *capnp.Message) (CapManageAuthz_addThing_Results, error) {
	root, err := msg.Root()
	return CapManageAuthz_addThing_Results(root.Struct()), err
}

func (s CapManageAuthz_addThing_Results) String() string {
	str, _ := text.Marshal(0x83b0068869d06e38, capnp.Struct(s))
	return str
}

func (s CapManageAuthz_addThing_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageAuthz_addThing_Results) DecodeFromPtr(p capnp.Ptr) CapManageAuthz_addThing_Results {
	return CapManageAuthz_addThing_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageAuthz_addThing_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageAuthz_addThing_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageAuthz_addThing_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageAuthz_addThing_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapManageAuthz_addThing_Results_List is a list of CapManageAuthz_addThing_Results.
type CapManageAuthz_addThing_Results_List = capnp.StructList[CapManageAuthz_addThing_Results]

// NewCapManageAuthz_addThing_Results creates a new list of CapManageAuthz_addThing_Results.
func NewCapManageAuthz_addThing_Results_List(s *capnp.Segment, sz int32) (CapManageAuthz_addThing_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapManageAuthz_addThing_Results](l), err
}

// CapManageAuthz_addThing_Results_Future is a wrapper for a CapManageAuthz_addThing_Results promised by a client call.
type CapManageAuthz_addThing_Results_Future struct{ *capnp.Future }

func (f CapManageAuthz_addThing_Results_Future) Struct() (CapManageAuthz_addThing_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageAuthz_addThing_Results(p.Struct()), err
}

type CapManageAuthz_getGroup_Params capnp.Struct

// CapManageAuthz_getGroup_Params_TypeID is the unique identifier for the type CapManageAuthz_getGroup_Params.
const CapManageAuthz_getGroup_Params_TypeID = 0x921ec3b1c6717810

func NewCapManageAuthz_getGroup_Params(s *capnp.Segment) (CapManageAuthz_getGroup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageAuthz_getGroup_Params(st), err
}

func NewRootCapManageAuthz_getGroup_Params(s *capnp.Segment) (CapManageAuthz_getGroup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageAuthz_getGroup_Params(st), err
}

func ReadRootCapManageAuthz_getGroup_Params(msg *capnp.Message) (CapManageAuthz_getGroup_Params, error) {
	root, err := msg.Root()
	return CapManageAuthz_getGroup_Params(root.Struct()), err
}

func (s CapManageAuthz_getGroup_Params) String() string {
	str, _ := text.Marshal(0x921ec3b1c6717810, capnp.Struct(s))
	return str
}

func (s CapManageAuthz_getGroup_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageAuthz_getGroup_Params) DecodeFromPtr(p capnp.Ptr) CapManageAuthz_getGroup_Params {
	return CapManageAuthz_getGroup_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageAuthz_getGroup_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageAuthz_getGroup_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageAuthz_getGroup_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageAuthz_getGroup_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageAuthz_getGroup_Params) GroupName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapManageAuthz_getGroup_Params) HasGroupName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageAuthz_getGroup_Params) GroupNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapManageAuthz_getGroup_Params) SetGroupName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapManageAuthz_getGroup_Params_List is a list of CapManageAuthz_getGroup_Params.
type CapManageAuthz_getGroup_Params_List = capnp.StructList[CapManageAuthz_getGroup_Params]

// NewCapManageAuthz_getGroup_Params creates a new list of CapManageAuthz_getGroup_Params.
func NewCapManageAuthz_getGroup_Params_List(s *capnp.Segment, sz int32) (CapManageAuthz_getGroup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageAuthz_getGroup_Params](l), err
}

// CapManageAuthz_getGroup_Params_Future is a wrapper for a CapManageAuthz_getGroup_Params promised by a client call.
type CapManageAuthz_getGroup_Params_Future struct{ *capnp.Future }

func (f CapManageAuthz_getGroup_Params_Future) Struct() (CapManageAuthz_getGroup_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageAuthz_getGroup_Params(p.Struct()), err
}

type CapManageAuthz_getGroup_Results capnp.Struct

// CapManageAuthz_getGroup_Results_TypeID is the unique identifier for the type CapManageAuthz_getGroup_Results.
const CapManageAuthz_getGroup_Results_TypeID = 0x98a24585f7c66e69

func NewCapManageAuthz_getGroup_Results(s *capnp.Segment) (CapManageAuthz_getGroup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageAuthz_getGroup_Results(st), err
}

func NewRootCapManageAuthz_getGroup_Results(s *capnp.Segment) (CapManageAuthz_getGroup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageAuthz_getGroup_Results(st), err
}

func ReadRootCapManageAuthz_getGroup_Results(msg *capnp.Message) (CapManageAuthz_getGroup_Results, error) {
	root, err := msg.Root()
	return CapManageAuthz_getGroup_Results(root.Struct()), err
}

func (s CapManageAuthz_getGroup_Results) String() string {
	str, _ := text.Marshal(0x98a24585f7c66e69, capnp.Struct(s))
	return str
}

func (s CapManageAuthz_getGroup_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageAuthz_getGroup_Results) DecodeFromPtr(p capnp.Ptr) CapManageAuthz_getGroup_Results {
	return CapManageAuthz_getGroup_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageAuthz_getGroup_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageAuthz_getGroup_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageAuthz_getGroup_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageAuthz_getGroup_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageAuthz_getGroup_Results) Group() (Group, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Group(p.Struct()), err
}

func (s CapManageAuthz_getGroup_Results) HasGroup() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageAuthz_getGroup_Results) SetGroup(v Group) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGroup sets the group field to a newly
// allocated Group struct, preferring placement in s's segment.
func (s CapManageAuthz_getGroup_Results) NewGroup() (Group, error) {
	ss, err := NewGroup(capnp.Struct(s).Segment())
	if err != nil {
		return Group{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapManageAuthz_getGroup_Results_List is a list of CapManageAuthz_getGroup_Results.
type CapManageAuthz_getGroup_Results_List = capnp.StructList[CapManageAuthz_getGroup_Results]

// NewCapManageAuthz_getGroup_Results creates a new list of CapManageAuthz_getGroup_Results.
func NewCapManageAuthz_getGroup_Results_List(s *capnp.Segment, sz int32) (CapManageAuthz_getGroup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageAuthz_getGroup_Results](l), err
}

// CapManageAuthz_getGroup_Results_Future is a wrapper for a CapManageAuthz_getGroup_Results promised by a client call.
type CapManageAuthz_getGroup_Results_Future struct{ *capnp.Future }

func (f CapManageAuthz_getGroup_Results_Future) Struct() (CapManageAuthz_getGroup_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageAuthz_getGroup_Results(p.Struct()), err
}
func (p CapManageAuthz_getGroup_Results_Future) Group() Group_Future {
	return Group_Future{Future: p.Future.Field(0, nil)}
}

type CapManageAuthz_getGroupRoles_Params capnp.Struct

// CapManageAuthz_getGroupRoles_Params_TypeID is the unique identifier for the type CapManageAuthz_getGroupRoles_Params.
const CapManageAuthz_getGroupRoles_Params_TypeID = 0xbbe7aaaf47590309

func NewCapManageAuthz_getGroupRoles_Params(s *capnp.Segment) (CapManageAuthz_getGroupRoles_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageAuthz_getGroupRoles_Params(st), err
}

func NewRootCapManageAuthz_getGroupRoles_Params(s *capnp.Segment) (CapManageAuthz_getGroupRoles_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageAuthz_getGroupRoles_Params(st), err
}

func ReadRootCapManageAuthz_getGroupRoles_Params(msg *capnp.Message) (CapManageAuthz_getGroupRoles_Params, error) {
	root, err := msg.Root()
	return CapManageAuthz_getGroupRoles_Params(root.Struct()), err
}

func (s CapManageAuthz_getGroupRoles_Params) String() string {
	str, _ := text.Marshal(0xbbe7aaaf47590309, capnp.Struct(s))
	return str
}

func (s CapManageAuthz_getGroupRoles_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageAuthz_getGroupRoles_Params) DecodeFromPtr(p capnp.Ptr) CapManageAuthz_getGroupRoles_Params {
	return CapManageAuthz_getGroupRoles_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageAuthz_getGroupRoles_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageAuthz_getGroupRoles_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageAuthz_getGroupRoles_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageAuthz_getGroupRoles_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageAuthz_getGroupRoles_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapManageAuthz_getGroupRoles_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageAuthz_getGroupRoles_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapManageAuthz_getGroupRoles_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapManageAuthz_getGroupRoles_Params_List is a list of CapManageAuthz_getGroupRoles_Params.
type CapManageAuthz_getGroupRoles_Params_List = capnp.StructList[CapManageAuthz_getGroupRoles_Params]

// NewCapManageAuthz_getGroupRoles_Params creates a new list of CapManageAuthz_getGroupRoles_Params.
func NewCapManageAuthz_getGroupRoles_Params_List(s *capnp.Segment, sz int32) (CapManageAuthz_getGroupRoles_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageAuthz_getGroupRoles_Params](l), err
}

// CapManageAuthz_getGroupRoles_Params_Future is a wrapper for a CapManageAuthz_getGroupRoles_Params promised by a client call.
type CapManageAuthz_getGroupRoles_Params_Future struct{ *capnp.Future }

func (f CapManageAuthz_getGroupRoles_Params_Future) Struct() (CapManageAuthz_getGroupRoles_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageAuthz_getGroupRoles_Params(p.Struct()), err
}

type CapManageAuthz_getGroupRoles_Results capnp.Struct

// CapManageAuthz_getGroupRoles_Results_TypeID is the unique identifier for the type CapManageAuthz_getGroupRoles_Results.
const CapManageAuthz_getGroupRoles_Results_TypeID = 0x90cd9a09818e64bc

func NewCapManageAuthz_getGroupRoles_Results(s *capnp.Segment) (CapManageAuthz_getGroupRoles_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageAuthz_getGroupRoles_Results(st), err
}

func NewRootCapManageAuthz_getGroupRoles_Results(s *capnp.Segment) (CapManageAuthz_getGroupRoles_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageAuthz_getGroupRoles_Results(st), err
}

func ReadRootCapManageAuthz_getGroupRoles_Results(msg *capnp.Message) (CapManageAuthz_getGroupRoles_Results, error) {
	root, err := msg.Root()
	return CapManageAuthz_getGroupRoles_Results(root.Struct()), err
}

func (s CapManageAuthz_getGroupRoles_Results) String() string {
	str, _ := text.Marshal(0x90cd9a09818e64bc, capnp.Struct(s))
	return str
}

func (s CapManageAuthz_getGroupRoles_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageAuthz_getGroupRoles_Results) DecodeFromPtr(p capnp.Ptr) CapManageAuthz_getGroupRoles_Results {
	return CapManageAuthz_getGroupRoles_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageAuthz_getGroupRoles_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageAuthz_getGroupRoles_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageAuthz_getGroupRoles_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageAuthz_getGroupRoles_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageAuthz_getGroupRoles_Results) Roles() (RoleMap, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RoleMap(p.Struct()), err
}

func (s CapManageAuthz_getGroupRoles_Results) HasRoles() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageAuthz_getGroupRoles_Results) SetRoles(v RoleMap) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRoles sets the roles field to a newly
// allocated RoleMap struct, preferring placement in s's segment.
func (s CapManageAuthz_getGroupRoles_Results) NewRoles() (RoleMap, error) {
	ss, err := NewRoleMap(capnp.Struct(s).Segment())
	if err != nil {
		return RoleMap{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapManageAuthz_getGroupRoles_Results_List is a list of CapManageAuthz_getGroupRoles_Results.
type CapManageAuthz_getGroupRoles_Results_List = capnp.StructList[CapManageAuthz_getGroupRoles_Results]

// NewCapManageAuthz_getGroupRoles_Results creates a new list of CapManageAuthz_getGroupRoles_Results.
func NewCapManageAuthz_getGroupRoles_Results_List(s *capnp.Segment, sz int32) (CapManageAuthz_getGroupRoles_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageAuthz_getGroupRoles_Results](l), err
}

// CapManageAuthz_getGroupRoles_Results_Future is a wrapper for a CapManageAuthz_getGroupRoles_Results promised by a client call.
type CapManageAuthz_getGroupRoles_Results_Future struct{ *capnp.Future }

func (f CapManageAuthz_getGroupRoles_Results_Future) Struct() (CapManageAuthz_getGroupRoles_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageAuthz_getGroupRoles_Results(p.Struct()), err
}
func (p CapManageAuthz_getGroupRoles_Results_Future) Roles() RoleMap_Future {
	return RoleMap_Future{Future: p.Future.Field(0, nil)}
}

type CapManageAuthz_listGroups_Params capnp.Struct

// CapManageAuthz_listGroups_Params_TypeID is the unique identifier for the type CapManageAuthz_listGroups_Params.
const CapManageAuthz_listGroups_Params_TypeID = 0x8e0b29eea97424c5

func NewCapManageAuthz_listGroups_Params(s *capnp.Segment) (CapManageAuthz_listGroups_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapManageAuthz_listGroups_Params(st), err
}

func NewRootCapManageAuthz_listGroups_Params(s *capnp.Segment) (CapManageAuthz_listGroups_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapManageAuthz_listGroups_Params(st), err
}

func ReadRootCapManageAuthz_listGroups_Params(msg *capnp.Message) (CapManageAuthz_listGroups_Params, error) {
	root, err := msg.Root()
	return CapManageAuthz_listGroups_Params(root.Struct()), err
}

func (s CapManageAuthz_listGroups_Params) String() string {
	str, _ := text.Marshal(0x8e0b29eea97424c5, capnp.Struct(s))
	return str
}

func (s CapManageAuthz_listGroups_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageAuthz_listGroups_Params) DecodeFromPtr(p capnp.Ptr) CapManageAuthz_listGroups_Params {
	return CapManageAuthz_listGroups_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageAuthz_listGroups_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageAuthz_listGroups_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageAuthz_listGroups_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageAuthz_listGroups_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageAuthz_listGroups_Params) Limit() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CapManageAuthz_listGroups_Params) SetLimit(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CapManageAuthz_listGroups_Params) Offset() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CapManageAuthz_listGroups_Params) SetOffset(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// CapManageAuthz_listGroups_Params_List is a list of CapManageAuthz_listGroups_Params.
type CapManageAuthz_listGroups_Params_List = capnp.StructList[CapManageAuthz_listGroups_Params]

// NewCapManageAuthz_listGroups_Params creates a new list of CapManageAuthz_listGroups_Params.
func NewCapManageAuthz_listGroups_Params_List(s *capnp.Segment, sz int32) (CapManageAuthz_listGroups_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CapManageAuthz_listGroups_Params](l), err
}

// CapManageAuthz_listGroups_Params_Future is a wrapper for a CapManageAuthz_listGroups_Params promised by a client call.
type CapManageAuthz_listGroups_Params_Future struct{ *capnp.Future }

func (f CapManageAuthz_listGroups_Params_Future) Struct() (CapManageAuthz_listGroups_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageAuthz_listGroups_Params(p.Struct()), err
}

type CapManageAuthz_listGroups_Results capnp.Struct

// CapManageAuthz_listGroups_Results_TypeID is the unique identifier for the type CapManageAuthz_listGroups_Results.
const CapManageAuthz_listGroups_Results_TypeID = 0xfd66973322b6d825

func NewCapManageAuthz_listGroups_Results(s *capnp.Segment) (CapManageAuthz_listGroups_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageAuthz_listGroups_Results(st), err
}

func NewRootCapManageAuthz_listGroups_Results(s *capnp.Segment) (CapManageAuthz_listGroups_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageAuthz_listGroups_Results(st), err
}

func ReadRootCapManageAuthz_listGroups_Results(msg *capnp.Message) (CapManageAuthz_listGroups_Results, error) {
	root, err := msg.Root()
	return CapManageAuthz_listGroups_Results(root.Struct()), err
}

func (s CapManageAuthz_listGroups_Results) String() string {
	str, _ := text.Marshal(0xfd66973322b6d825, capnp.Struct(s))
	return str
}

func (s CapManageAuthz_listGroups_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageAuthz_listGroups_Results) DecodeFromPtr(p capnp.Ptr) CapManageAuthz_listGroups_Results {
	return CapManageAuthz_listGroups_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageAuthz_listGroups_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageAuthz_listGroups_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageAuthz_listGroups_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageAuthz_listGroups_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageAuthz_listGroups_Results) Groups() (Group_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Group_List(p.List()), err
}

func (s CapManageAuthz_listGroups_Results) HasGroups() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageAuthz_listGroups_Results) SetGroups(v Group_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewGroups sets the groups field to a newly
// allocated Group_List, preferring placement in s's segment.
func (s CapManageAuthz_listGroups_Results) NewGroups(n int32) (Group_List, error) {
	l, err := NewGroup_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Group_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapManageAuthz_listGroups_Results_List is a list of CapManageAuthz_listGroups_Results.
type CapManageAuthz_listGroups_Results_List = capnp.StructList[CapManageAuthz_listGroups_Results]

// NewCapManageAuthz_listGroups_Results creates a new list of CapManageAuthz_listGroups_Results.
func NewCapManageAuthz_listGroups_Results_List(s *capnp.Segment, sz int32) (CapManageAuthz_listGroups_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageAuthz_listGroups_Results](l), err
}

// CapManageAuthz_listGroups_Results_Future is a wrapper for a CapManageAuthz_listGroups_Results promised by a client call.
type CapManageAuthz_listGroups_Results_Future struct{ *capnp.Future }

func (f CapManageAuthz_listGroups_Results_Future) Struct() (CapManageAuthz_listGroups_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageAuthz_listGroups_Results(p.Struct()), err
}

type CapManageAuthz_removeAll_Params capnp.Struct

// CapManageAuthz_removeAll_Params_TypeID is the unique identifier for the type CapManageAuthz_removeAll_Params.
const CapManageAuthz_removeAll_Params_TypeID = 0xe47ee2c53558c61e

func NewCapManageAuthz_removeAll_Params(s *capnp.Segment) (CapManageAuthz_removeAll_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageAuthz_removeAll_Params(st), err
}

func NewRootCapManageAuthz_removeAll_Params(s *capnp.Segment) (CapManageAuthz_removeAll_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageAuthz_removeAll_Params(st), err
}

func ReadRootCapManageAuthz_removeAll_Params(msg *capnp.Message) (CapManageAuthz_removeAll_Params, error) {
	root, err := msg.Root()
	return CapManageAuthz_removeAll_Params(root.Struct()), err
}

func (s CapManageAuthz_removeAll_Params) String() string {
	str, _ := text.Marshal(0xe47ee2c53558c61e, capnp.Struct(s))
	return str
}

func (s CapManageAuthz_removeAll_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageAuthz_removeAll_Params) DecodeFromPtr(p capnp.Ptr) CapManageAuthz_removeAll_Params {
	return CapManageAuthz_removeAll_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageAuthz_removeAll_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageAuthz_removeAll_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageAuthz_removeAll_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageAuthz_removeAll_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageAuthz_removeAll_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapManageAuthz_removeAll_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageAuthz_removeAll_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapManageAuthz_removeAll_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapManageAuthz_removeAll_Params_List is a list of CapManageAuthz_removeAll_Params.
type CapManageAuthz_removeAll_Params_List = capnp.StructList[CapManageAuthz_removeAll_Params]

// NewCapManageAuthz_removeAll_Params creates a new list of CapManageAuthz_removeAll_Params.
func NewCapManageAuthz_removeAll_Params_List(s *capnp.Segment, sz int32) (CapManageAuthz_removeAll_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageAuthz_removeAll_Params](l), err
}

// CapManageAuthz_removeAll_Params_Future is a wrapper for a CapManageAuthz_removeAll_Params promised by a client call.
type CapManageAuthz_removeAll_Params_Future struct{ *capnp.Future }

func (f CapManageAuthz_removeAll_Params_Future) Struct() (CapManageAuthz_removeAll_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageAuthz_removeAll_Params(p.Struct()), err
}

type CapManageAuthz_removeAll_Results capnp.Struct

// CapManageAuthz_removeAll_Results_TypeID is the unique identifier for the type CapManageAuthz_removeAll_Results.
const CapManageAuthz_removeAll_Results_TypeID = 0xd2e95db6a0007eb0

func NewCapManageAuthz_removeAll_Results(s *capnp.Segment) (CapManageAuthz_removeAll_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageAuthz_removeAll_Results(st), err
}

func NewRootCapManageAuthz_removeAll_Results(s *capnp.Segment) (CapManageAuthz_removeAll_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageAuthz_removeAll_Results(st), err
}

func ReadRootCapManageAuthz_removeAll_Results(msg *capnp.Message) (CapManageAuthz_removeAll_Results, error) {
	root, err := msg.Root()
	return CapManageAuthz_removeAll_Results(root.Struct()), err
}

func (s CapManageAuthz_removeAll_Results) String() string {
	str, _ := text.Marshal(0xd2e95db6a0007eb0, capnp.Struct(s))
	return str
}

func (s CapManageAuthz_removeAll_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageAuthz_removeAll_Results) DecodeFromPtr(p capnp.Ptr) CapManageAuthz_removeAll_Results {
	return CapManageAuthz_removeAll_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageAuthz_removeAll_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageAuthz_removeAll_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageAuthz_removeAll_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageAuthz_removeAll_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapManageAuthz_removeAll_Results_List is a list of CapManageAuthz_removeAll_Results.
type CapManageAuthz_removeAll_Results_List = capnp.StructList[CapManageAuthz_removeAll_Results]

// NewCapManageAuthz_removeAll_Results creates a new list of CapManageAuthz_removeAll_Results.
func NewCapManageAuthz_removeAll_Results_List(s *capnp.Segment, sz int32) (CapManageAuthz_removeAll_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapManageAuthz_removeAll_Results](l), err
}

// CapManageAuthz_removeAll_Results_Future is a wrapper for a CapManageAuthz_removeAll_Results promised by a client call.
type CapManageAuthz_removeAll_Results_Future struct{ *capnp.Future }

func (f CapManageAuthz_removeAll_Results_Future) Struct() (CapManageAuthz_removeAll_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageAuthz_removeAll_Results(p.Struct()), err
}

type CapManageAuthz_removeClient_Params capnp.Struct

// CapManageAuthz_removeClient_Params_TypeID is the unique identifier for the type CapManageAuthz_removeClient_Params.
const CapManageAuthz_removeClient_Params_TypeID = 0xaeed8a641e89dccf

func NewCapManageAuthz_removeClient_Params(s *capnp.Segment) (CapManageAuthz_removeClient_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapManageAuthz_removeClient_Params(st), err
}

func NewRootCapManageAuthz_removeClient_Params(s *capnp.Segment) (CapManageAuthz_removeClient_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapManageAuthz_removeClient_Params(st), err
}

func ReadRootCapManageAuthz_removeClient_Params(msg *capnp.Message) (CapManageAuthz_removeClient_Params, error) {
	root, err := msg.Root()
	return CapManageAuthz_removeClient_Params(root.Struct()), err
}

func (s CapManageAuthz_removeClient_Params) String() string {
	str, _ := text.Marshal(0xaeed8a641e89dccf, capnp.Struct(s))
	return str
}

func (s CapManageAuthz_removeClient_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageAuthz_removeClient_Params) DecodeFromPtr(p capnp.Ptr) CapManageAuthz_removeClient_Params {
	return CapManageAuthz_removeClient_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageAuthz_removeClient_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageAuthz_removeClient_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageAuthz_removeClient_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageAuthz_removeClient_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageAuthz_removeClient_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapManageAuthz_removeClient_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageAuthz_removeClient_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapManageAuthz_removeClient_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapManageAuthz_removeClient_Params) GroupName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapManageAuthz_removeClient_Params) HasGroupName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapManageAuthz_removeClient_Params) GroupNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapManageAuthz_removeClient_Params) SetGroupName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CapManageAuthz_removeClient_Params_List is a list of CapManageAuthz_removeClient_Params.
type CapManageAuthz_removeClient_Params_List = capnp.StructList[CapManageAuthz_removeClient_Params]

// NewCapManageAuthz_removeClient_Params creates a new list of CapManageAuthz_removeClient_Params.
func NewCapManageAuthz_removeClient_Params_List(s *capnp.Segment, sz int32) (CapManageAuthz_removeClient_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapManageAuthz_removeClient_Params](l), err
}

// CapManageAuthz_removeClient_Params_Future is a wrapper for a CapManageAuthz_removeClient_Params promised by a client call.
type CapManageAuthz_removeClient_Params_Future struct{ *capnp.Future }

func (f CapManageAuthz_removeClient_Params_Future) Struct() (CapManageAuthz_removeClient_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageAuthz_removeClient_Params(p.Struct()), err
}

type CapManageAuthz_removeClient_Results capnp.Struct

// CapManageAuthz_removeClient_Results_TypeID is the unique identifier for the type CapManageAuthz_removeClient_Results.
const CapManageAuthz_removeClient_Results_TypeID = 0xedf2f26fa7576a7f

func NewCapManageAuthz_removeClient_Results(s *capnp.Segment) (CapManageAuthz_removeClient_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageAuthz_removeClient_Results(st), err
}

func NewRootCapManageAuthz_removeClient_Results(s *capnp.Segment) (CapManageAuthz_removeClient_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageAuthz_removeClient_Results(st), err
}

func ReadRootCapManageAuthz_removeClient_Results(msg *capnp.Message) (CapManageAuthz_removeClient_Results, error) {
	root, err := msg.Root()
	return CapManageAuthz_removeClient_Results(root.Struct()), err
}

func (s CapManageAuthz_removeClient_Results) String() string {
	str, _ := text.Marshal(0xedf2f26fa7576a7f, capnp.Struct(s))
	return str
}

func (s CapManageAuthz_removeClient_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageAuthz_removeClient_Results) DecodeFromPtr(p capnp.Ptr) CapManageAuthz_removeClient_Results {
	return CapManageAuthz_removeClient_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageAuthz_removeClient_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageAuthz_removeClient_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageAuthz_removeClient_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageAuthz_removeClient_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapManageAuthz_removeClient_Results_List is a list of CapManageAuthz_removeClient_Results.
type CapManageAuthz_removeClient_Results_List = capnp.StructList[CapManageAuthz_removeClient_Results]

// NewCapManageAuthz_removeClient_Results creates a new list of CapManageAuthz_removeClient_Results.
func NewCapManageAuthz_removeClient_Results_List(s *capnp.Segment, sz int32) (CapManageAuthz_removeClient_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapManageAuthz_removeClient_Results](l), err
}

// CapManageAuthz_removeClient_Results_Future is a wrapper for a CapManageAuthz_removeClient_Results promised by a client call.
type CapManageAuthz_removeClient_Results_Future struct{ *capnp.Future }

func (f CapManageAuthz_removeClient_Results_Future) Struct() (CapManageAuthz_removeClient_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageAuthz_removeClient_Results(p.Struct()), err
}

type CapManageAuthz_removeThing_Params capnp.Struct

// CapManageAuthz_removeThing_Params_TypeID is the unique identifier for the type CapManageAuthz_removeThing_Params.
const CapManageAuthz_removeThing_Params_TypeID = 0xce8ad1f5fca7517e

func NewCapManageAuthz_removeThing_Params(s *capnp.Segment) (CapManageAuthz_removeThing_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapManageAuthz_removeThing_Params(st), err
}

func NewRootCapManageAuthz_removeThing_Params(s *capnp.Segment) (CapManageAuthz_removeThing_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapManageAuthz_removeThing_Params(st), err
}

func ReadRootCapManageAuthz_removeThing_Params(msg *capnp.Message) (CapManageAuthz_removeThing_Params, error) {
	root, err := msg.Root()
	return CapManageAuthz_removeThing_Params(root.Struct()), err
}

func (s CapManageAuthz_removeThing_Params) String() string {
	str, _ := text.Marshal(0xce8ad1f5fca7517e, capnp.Struct(s))
	return str
}

func (s CapManageAuthz_removeThing_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageAuthz_removeThing_Params) DecodeFromPtr(p capnp.Ptr) CapManageAuthz_removeThing_Params {
	return CapManageAuthz_removeThing_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageAuthz_removeThing_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageAuthz_removeThing_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageAuthz_removeThing_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageAuthz_removeThing_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageAuthz_removeThing_Params) ThingAddr() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapManageAuthz_removeThing_Params) HasThingAddr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageAuthz_removeThing_Params) ThingAddrBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapManageAuthz_removeThing_Params) SetThingAddr(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapManageAuthz_removeThing_Params) GroupName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapManageAuthz_removeThing_Params) HasGroupName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapManageAuthz_removeThing_Params) GroupNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapManageAuthz_removeThing_Params) SetGroupName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CapManageAuthz_removeThing_Params_List is a list of CapManageAuthz_removeThing_Params.
type CapManageAuthz_removeThing_Params_List = capnp.StructList[CapManageAuthz_removeThing_Params]

// NewCapManageAuthz_removeThing_Params creates a new list of CapManageAuthz_removeThing_Params.
func NewCapManageAuthz_removeThing_Params_List(s *capnp.Segment, sz int32) (CapManageAuthz_removeThing_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapManageAuthz_removeThing_Params](l), err
}

// CapManageAuthz_removeThing_Params_Future is a wrapper for a CapManageAuthz_removeThing_Params promised by a client call.
type CapManageAuthz_removeThing_Params_Future struct{ *capnp.Future }

func (f CapManageAuthz_removeThing_Params_Future) Struct() (CapManageAuthz_removeThing_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageAuthz_removeThing_Params(p.Struct()), err
}

type CapManageAuthz_removeThing_Results capnp.Struct

// CapManageAuthz_removeThing_Results_TypeID is the unique identifier for the type CapManageAuthz_removeThing_Results.
const CapManageAuthz_removeThing_Results_TypeID = 0x91cda370415fe10c

func NewCapManageAuthz_removeThing_Results(s *capnp.Segment) (CapManageAuthz_removeThing_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageAuthz_removeThing_Results(st), err
}

func NewRootCapManageAuthz_removeThing_Results(s *capnp.Segment) (CapManageAuthz_removeThing_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageAuthz_removeThing_Results(st), err
}

func ReadRootCapManageAuthz_removeThing_Results(msg *capnp.Message) (CapManageAuthz_removeThing_Results, error) {
	root, err := msg.Root()
	return CapManageAuthz_removeThing_Results(root.Struct()), err
}

func (s CapManageAuthz_removeThing_Results) String() string {
	str, _ := text.Marshal(0x91cda370415fe10c, capnp.Struct(s))
	return str
}

func (s CapManageAuthz_removeThing_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageAuthz_removeThing_Results) DecodeFromPtr(p capnp.Ptr) CapManageAuthz_removeThing_Results {
	return CapManageAuthz_removeThing_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageAuthz_removeThing_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageAuthz_removeThing_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageAuthz_removeThing_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageAuthz_removeThing_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapManageAuthz_removeThing_Results_List is a list of CapManageAuthz_removeThing_Results.
type CapManageAuthz_removeThing_Results_List = capnp.StructList[CapManageAuthz_removeThing_Results]

// NewCapManageAuthz_removeThing_Results creates a new list of CapManageAuthz_removeThing_Results.
func NewCapManageAuthz_removeThing_Results_List(s *capnp.Segment, sz int32) (CapManageAuthz_removeThing_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapManageAuthz_removeThing_Results](l), err
}

// CapManageAuthz_removeThing_Results_Future is a wrapper for a CapManageAuthz_removeThing_Results promised by a client call.
type CapManageAuthz_removeThing_Results_Future struct{ *capnp.Future }

func (f CapManageAuthz_removeThing_Results_Future) Struct() (CapManageAuthz_removeThing_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageAuthz_removeThing_Results(p.Struct()), err
}

type CapManageAuthz_setClientRole_Params capnp.Struct

// CapManageAuthz_setClientRole_Params_TypeID is the unique identifier for the type CapManageAuthz_setClientRole_Params.
const CapManageAuthz_setClientRole_Params_TypeID = 0xf1c713df386a5dca

func NewCapManageAuthz_setClientRole_Params(s *capnp.Segment) (CapManageAuthz_setClientRole_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapManageAuthz_setClientRole_Params(st), err
}

func NewRootCapManageAuthz_setClientRole_Params(s *capnp.Segment) (CapManageAuthz_setClientRole_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapManageAuthz_setClientRole_Params(st), err
}

func ReadRootCapManageAuthz_setClientRole_Params(msg *capnp.Message) (CapManageAuthz_setClientRole_Params, error) {
	root, err := msg.Root()
	return CapManageAuthz_setClientRole_Params(root.Struct()), err
}

func (s CapManageAuthz_setClientRole_Params) String() string {
	str, _ := text.Marshal(0xf1c713df386a5dca, capnp.Struct(s))
	return str
}

func (s CapManageAuthz_setClientRole_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageAuthz_setClientRole_Params) DecodeFromPtr(p capnp.Ptr) CapManageAuthz_setClientRole_Params {
	return CapManageAuthz_setClientRole_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageAuthz_setClientRole_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageAuthz_setClientRole_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageAuthz_setClientRole_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageAuthz_setClientRole_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageAuthz_setClientRole_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapManageAuthz_setClientRole_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageAuthz_setClientRole_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapManageAuthz_setClientRole_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapManageAuthz_setClientRole_Params) GroupName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapManageAuthz_setClientRole_Params) HasGroupName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapManageAuthz_setClientRole_Params) GroupNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapManageAuthz_setClientRole_Params) SetGroupName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapManageAuthz_setClientRole_Params) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CapManageAuthz_setClientRole_Params) HasRole() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapManageAuthz_setClientRole_Params) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CapManageAuthz_setClientRole_Params) SetRole(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// CapManageAuthz_setClientRole_Params_List is a list of CapManageAuthz_setClientRole_Params.
type CapManageAuthz_setClientRole_Params_List = capnp.StructList[CapManageAuthz_setClientRole_Params]

// NewCapManageAuthz_setClientRole_Params creates a new list of CapManageAuthz_setClientRole_Params.
func NewCapManageAuthz_setClientRole_Params_List(s *capnp.Segment, sz int32) (CapManageAuthz_setClientRole_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[CapManageAuthz_setClientRole_Params](l), err
}

// CapManageAuthz_setClientRole_Params_Future is a wrapper for a CapManageAuthz_setClientRole_Params promised by a client call.
type CapManageAuthz_setClientRole_Params_Future struct{ *capnp.Future }

func (f CapManageAuthz_setClientRole_Params_Future) Struct() (CapManageAuthz_setClientRole_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageAuthz_setClientRole_Params(p.Struct()), err
}

type CapManageAuthz_setClientRole_Results capnp.Struct

// CapManageAuthz_setClientRole_Results_TypeID is the unique identifier for the type CapManageAuthz_setClientRole_Results.
const CapManageAuthz_setClientRole_Results_TypeID = 0x9f609c5244787777

func NewCapManageAuthz_setClientRole_Results(s *capnp.Segment) (CapManageAuthz_setClientRole_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageAuthz_setClientRole_Results(st), err
}

func NewRootCapManageAuthz_setClientRole_Results(s *capnp.Segment) (CapManageAuthz_setClientRole_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageAuthz_setClientRole_Results(st), err
}

func ReadRootCapManageAuthz_setClientRole_Results(msg *capnp.Message) (CapManageAuthz_setClientRole_Results, error) {
	root, err := msg.Root()
	return CapManageAuthz_setClientRole_Results(root.Struct()), err
}

func (s CapManageAuthz_setClientRole_Results) String() string {
	str, _ := text.Marshal(0x9f609c5244787777, capnp.Struct(s))
	return str
}

func (s CapManageAuthz_setClientRole_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageAuthz_setClientRole_Results) DecodeFromPtr(p capnp.Ptr) CapManageAuthz_setClientRole_Results {
	return CapManageAuthz_setClientRole_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageAuthz_setClientRole_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageAuthz_setClientRole_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageAuthz_setClientRole_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageAuthz_setClientRole_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapManageAuthz_setClientRole_Results_List is a list of CapManageAuthz_setClientRole_Results.
type CapManageAuthz_setClientRole_Results_List = capnp.StructList[CapManageAuthz_setClientRole_Results]

// NewCapManageAuthz_setClientRole_Results creates a new list of CapManageAuthz_setClientRole_Results.
func NewCapManageAuthz_setClientRole_Results_List(s *capnp.Segment, sz int32) (CapManageAuthz_setClientRole_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapManageAuthz_setClientRole_Results](l), err
}

// CapManageAuthz_setClientRole_Results_Future is a wrapper for a CapManageAuthz_setClientRole_Results promised by a client call.
type CapManageAuthz_setClientRole_Results_Future struct{ *capnp.Future }

func (f CapManageAuthz_setClientRole_Results_Future) Struct() (CapManageAuthz_setClientRole_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageAuthz_setClientRole_Results(p.Struct()), err
}

type CapVerifyAuthz capnp.Client

// CapVerifyAuthz_TypeID is the unique identifier for the type CapVerifyAuthz.
const CapVerifyAuthz_TypeID = 0xd908552cc4662bcb

func (c CapVerifyAuthz) GetPermissions(ctx context.Context, params func(CapVerifyAuthz_getPermissions_Params) error) (CapVerifyAuthz_getPermissions_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd908552cc4662bcb,
			MethodID:      0,
			InterfaceName: "hubapi/Authz.capnp:CapVerifyAuthz",
			MethodName:    "getPermissions",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapVerifyAuthz_getPermissions_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapVerifyAuthz_getPermissions_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapVerifyAuthz) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapVerifyAuthz) AddRef() CapVerifyAuthz {
	return CapVerifyAuthz(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapVerifyAuthz) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapVerifyAuthz) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapVerifyAuthz) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapVerifyAuthz) DecodeFromPtr(p capnp.Ptr) CapVerifyAuthz {
	return CapVerifyAuthz(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapVerifyAuthz) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapVerifyAuthz) IsSame(other CapVerifyAuthz) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapVerifyAuthz) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapVerifyAuthz) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapVerifyAuthz_Server is a CapVerifyAuthz with a local implementation.
type CapVerifyAuthz_Server interface {
	GetPermissions(context.Context, CapVerifyAuthz_getPermissions) error
}

// CapVerifyAuthz_NewServer creates a new Server from an implementation of CapVerifyAuthz_Server.
func CapVerifyAuthz_NewServer(s CapVerifyAuthz_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapVerifyAuthz_Methods(nil, s), s, c)
}

// CapVerifyAuthz_ServerToClient creates a new Client from an implementation of CapVerifyAuthz_Server.
// The caller is responsible for calling Release on the returned Client.
func CapVerifyAuthz_ServerToClient(s CapVerifyAuthz_Server) CapVerifyAuthz {
	return CapVerifyAuthz(capnp.NewClient(CapVerifyAuthz_NewServer(s)))
}

// CapVerifyAuthz_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapVerifyAuthz_Methods(methods []server.Method, s CapVerifyAuthz_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd908552cc4662bcb,
			MethodID:      0,
			InterfaceName: "hubapi/Authz.capnp:CapVerifyAuthz",
			MethodName:    "getPermissions",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetPermissions(ctx, CapVerifyAuthz_getPermissions{call})
		},
	})

	return methods
}

// CapVerifyAuthz_getPermissions holds the state for a server call to CapVerifyAuthz.getPermissions.
// See server.Call for documentation.
type CapVerifyAuthz_getPermissions struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapVerifyAuthz_getPermissions) Args() CapVerifyAuthz_getPermissions_Params {
	return CapVerifyAuthz_getPermissions_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapVerifyAuthz_getPermissions) AllocResults() (CapVerifyAuthz_getPermissions_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapVerifyAuthz_getPermissions_Results(r), err
}

// CapVerifyAuthz_List is a list of CapVerifyAuthz.
type CapVerifyAuthz_List = capnp.CapList[CapVerifyAuthz]

// NewCapVerifyAuthz creates a new list of CapVerifyAuthz.
func NewCapVerifyAuthz_List(s *capnp.Segment, sz int32) (CapVerifyAuthz_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapVerifyAuthz](l), err
}

type CapVerifyAuthz_getPermissions_Params capnp.Struct

// CapVerifyAuthz_getPermissions_Params_TypeID is the unique identifier for the type CapVerifyAuthz_getPermissions_Params.
const CapVerifyAuthz_getPermissions_Params_TypeID = 0xb32101cd36b4d785

func NewCapVerifyAuthz_getPermissions_Params(s *capnp.Segment) (CapVerifyAuthz_getPermissions_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapVerifyAuthz_getPermissions_Params(st), err
}

func NewRootCapVerifyAuthz_getPermissions_Params(s *capnp.Segment) (CapVerifyAuthz_getPermissions_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapVerifyAuthz_getPermissions_Params(st), err
}

func ReadRootCapVerifyAuthz_getPermissions_Params(msg *capnp.Message) (CapVerifyAuthz_getPermissions_Params, error) {
	root, err := msg.Root()
	return CapVerifyAuthz_getPermissions_Params(root.Struct()), err
}

func (s CapVerifyAuthz_getPermissions_Params) String() string {
	str, _ := text.Marshal(0xb32101cd36b4d785, capnp.Struct(s))
	return str
}

func (s CapVerifyAuthz_getPermissions_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapVerifyAuthz_getPermissions_Params) DecodeFromPtr(p capnp.Ptr) CapVerifyAuthz_getPermissions_Params {
	return CapVerifyAuthz_getPermissions_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapVerifyAuthz_getPermissions_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapVerifyAuthz_getPermissions_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapVerifyAuthz_getPermissions_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapVerifyAuthz_getPermissions_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapVerifyAuthz_getPermissions_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapVerifyAuthz_getPermissions_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapVerifyAuthz_getPermissions_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapVerifyAuthz_getPermissions_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapVerifyAuthz_getPermissions_Params) ThingAddr() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapVerifyAuthz_getPermissions_Params) HasThingAddr() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapVerifyAuthz_getPermissions_Params) ThingAddrBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapVerifyAuthz_getPermissions_Params) SetThingAddr(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CapVerifyAuthz_getPermissions_Params_List is a list of CapVerifyAuthz_getPermissions_Params.
type CapVerifyAuthz_getPermissions_Params_List = capnp.StructList[CapVerifyAuthz_getPermissions_Params]

// NewCapVerifyAuthz_getPermissions_Params creates a new list of CapVerifyAuthz_getPermissions_Params.
func NewCapVerifyAuthz_getPermissions_Params_List(s *capnp.Segment, sz int32) (CapVerifyAuthz_getPermissions_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapVerifyAuthz_getPermissions_Params](l), err
}

// CapVerifyAuthz_getPermissions_Params_Future is a wrapper for a CapVerifyAuthz_getPermissions_Params promised by a client call.
type CapVerifyAuthz_getPermissions_Params_Future struct{ *capnp.Future }

func (f CapVerifyAuthz_getPermissions_Params_Future) Struct() (CapVerifyAuthz_getPermissions_Params, error) {
	p, err := f.Future.Ptr()
	return CapVerifyAuthz_getPermissions_Params(p.Struct()), err
}

type CapVerifyAuthz_getPermissions_Results capnp.Struct

// CapVerifyAuthz_getPermissions_Results_TypeID is the unique identifier for the type CapVerifyAuthz_getPermissions_Results.
const CapVerifyAuthz_getPermissions_Results_TypeID = 0xec8c33f61af0fe5c

func NewCapVerifyAuthz_getPermissions_Results(s *capnp.Segment) (CapVerifyAuthz_getPermissions_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapVerifyAuthz_getPermissions_Results(st), err
}

func NewRootCapVerifyAuthz_getPermissions_Results(s *capnp.Segment) (CapVerifyAuthz_getPermissions_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapVerifyAuthz_getPermissions_Results(st), err
}

func ReadRootCapVerifyAuthz_getPermissions_Results(msg *capnp.Message) (CapVerifyAuthz_getPermissions_Results, error) {
	root, err := msg.Root()
	return CapVerifyAuthz_getPermissions_Results(root.Struct()), err
}

func (s CapVerifyAuthz_getPermissions_Results) String() string {
	str, _ := text.Marshal(0xec8c33f61af0fe5c, capnp.Struct(s))
	return str
}

func (s CapVerifyAuthz_getPermissions_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapVerifyAuthz_getPermissions_Results) DecodeFromPtr(p capnp.Ptr) CapVerifyAuthz_getPermissions_Results {
	return CapVerifyAuthz_getPermissions_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapVerifyAuthz_getPermissions_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapVerifyAuthz_getPermissions_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapVerifyAuthz_getPermissions_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapVerifyAuthz_getPermissions_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapVerifyAuthz_getPermissions_Results) Permissions() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s CapVerifyAuthz_getPermissions_Results) HasPermissions() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapVerifyAuthz_getPermissions_Results) SetPermissions(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPermissions sets the permissions field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s CapVerifyAuthz_getPermissions_Results) NewPermissions(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapVerifyAuthz_getPermissions_Results_List is a list of CapVerifyAuthz_getPermissions_Results.
type CapVerifyAuthz_getPermissions_Results_List = capnp.StructList[CapVerifyAuthz_getPermissions_Results]

// NewCapVerifyAuthz_getPermissions_Results creates a new list of CapVerifyAuthz_getPermissions_Results.
func NewCapVerifyAuthz_getPermissions_Results_List(s *capnp.Segment, sz int32) (CapVerifyAuthz_getPermissions_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapVerifyAuthz_getPermissions_Results](l), err
}

// CapVerifyAuthz_getPermissions_Results_Future is a wrapper for a CapVerifyAuthz_getPermissions_Results promised by a client call.
type CapVerifyAuthz_getPermissions_Results_Future struct{ *capnp.Future }

func (f CapVerifyAuthz_getPermissions_Results_Future) Struct() (CapVerifyAuthz_getPermissions_Results, error) {
	p, err := f.Future.Ptr()
	return CapVerifyAuthz_getPermissions_Results(p.Struct()), err
}

const schema_ae2da827da0eecef = "x\xda\xb4X{pT\xe5\x15?\xe7\xde]\xae\xfb\xce" +
	"\xddk\x15\xaa\xb2\x92\x89\xad`\xa0\x1a*\xa5\x19\xe9&" +
	"\x92\x14\xa1\x06\xf7\xee&\xa2\x0e\x8c\xbd\xc9^\x92\x1b\xf7" +
	"\xc5\xee\x86\x10GA\xa7\xc3L\xa1b\x95\xda\x89u\xd4" +
	"\x16|[\x95D\xc1\x82\xb53\xc6\x1a\x1f(\x16D\xa7" +
	"\xe8\xd4\xe1\xa1\x0c\x84\x12yFL\xa1\xdc\xce\xf7\xdd\xdc" +
	"\xbbw_\xc9\x82\xf5\xbf\xbd\xfb\x9d\xefw\xde\xe7;\xe7" +
	"\\}b\\\x8d\xe5\x1aW\xb7\x17\x18q\x97u\x9c:" +
	"y_\xe5\xf0\xf5e?\xb9\x07x\xc1\xa2\x1e9\xec\xfe" +
	"\xec\x87\xcfN}\x09\x00\xa7_c\xabB\xa1\xd6\xc6\x01" +
	"\x84\xae\xb3\xb1\x18\xba\xc1\xc6 \x80z\xf9\xfaKn\xef" +
	"\xfe\xcd\xc9{\xf3\xe8km^\x14DJ\x7f#\xa1\xbf" +
	"E\xa3\x9f\x19\xdb\xae\xfcz\\\xcf\xaf\x80/G\x00\x0b" +
	"\x070\xbd\xc1\xf6\x08\x82E\x9d>c\xe7\xcde\xabf" +
	"\xac\x02\xfeR\x04\xb0\"9\x9aE\x8ePh\xb0\xf9\x01" +
	"\xd5-=\x8d\xe3\xef\xde)\xaf6\x13Dmk\x09\xc1" +
	"\xdd\x94\xa0\xbf\"\xfd\xdcW\x93\x1d\xf7\x83X\x8e:\xf8" +
	":\xdbzB\xd0k\xeb\x04T?8\xe1:\x85M\x0d" +
	"\xbf\xd5\x98k\x08.\xfbVB0\xc9\xee\x07<\xfd\xd5" +
	"\xd1[\xfb\x97\x94=\xc0\x0bl\x96.Mv/\x0a\xb2" +
	"\x9d\x03\x10$\xfb\x1ca\x0d\xf9\xa5\xbe\x1e\xbe\xff^\xdb" +
	"#\xdb\x1e0\x83u\xd8\xdf$`+\x09\x98\xea\xdc{" +
	"{m\xe2\x89m\x0f\x9aT}\xca\xfe2Q\xb5l\xd9" +
	"\x92\xb7{\xff>q\xad\xf9\xea\xef\xedT\x93\xa7\xe8\xd5" +
	"\xc0\xf0\xe1\xd4\x82\xcf\xd6\xfe.\xcf\xaa\xef\xd9\xabQ\xf8" +
	"\x94\xf0\x0f}lg1\xb4\xc7N\xadz\xb1\xe7\xe7\xef" +
	"~sU\xe5Cf\xc0O5Y\x06(\xe0\xd0]o" +
	"\xb5\xdb\xaa\xc7w\x03\x7f\x09\xaa\xef\xee\x98\x1b\xbehb" +
	"\xfd\xe3`e\xa8\x05\x1cv\x14.s\x10\xed&8\x88" +
	"\x99\x94\xd8\xdb\xa7V\xd6\xaf\x7f8K3\x07\xf5\xc4J" +
	"\x07A\x9b1p\xf9\x9a\xd8\xae/\x1f\xcd\x15Ox\xca" +
	"qH\xe8%H\xa1\x17\x1c,\x866;\xa8t\x06?" +
	"^\xc0\x0c9\xc5\x15z\x1d\x9f\x09\x7fs\\\x0c \xf4" +
	"S\xe8W\xee\x89U\xac~\xff\xf8\xe3y\x9a\x0f9\xaa" +
	"P\xb0:9\x80\xa0\x93\xc5\x90\xd3I\xa1;;\x97\xd5" +
	"\x05\x1f\xfd\xe5\x1fM6\xb6:\xdf$6\xdeu:v" +
	"\xe2\xe9\xc1\x09O\x8c(A5\x1drP\x1b[\x9dD" +
	"\xcb\x7f\xfck\xd5\xc4\xf0\xea\xc1\x97\xcc\x04\x8a\xf3eB" +
	"\xd0E\x09V\xfes\xe3\x8cm8\xe9\x153\xc1\xe7N" +
	"j\xd4AJ\x90\xb0\xef\x18\xff\x9f\xd9\x0fm\xcc\x93U" +
	"t\x95\xa3 \xb9\x88\x1d\x16\xbaX\x0c\xb5\xb9\x88\xb0g" +
	"\xd9\xca\xfe\xaf\x7f\xf0\xe2FS\xf8.rQ\xabF]" +
	"D\xf5\xc4+\x1b\x9a\x12;Wm\xca\x83[\xe3\x9a\x82" +
	"\xc2c\x14\xeea\x02\xf7$\x85;r\xf0\xb9\x01\xcbk" +
	"\x07\xb7\xe4R\xafsU\xa1\xd0K\xa9_ \xd4\x9b)" +
	"\xb5jco\x9d\xb3\xe1\xf9\x03\x7f5;\xb5\xd7\xf5\x1a" +
	"a\xdfG\xd9\x9fZ&\xfd\xa2\xf3\xc5\x15o\xe4\xb1\xdf" +
	"\xef\xf2\xa20D\x01\x8f\x12\xc03\x1a\xe0\xa9o&(" +
	"}\x0f\xfe\xac/\xdfSD\\\xab\x9bx\xcaM<\xe5" +
	"\xa6\xe4{\xb6W\xde\xd7\xddv\xd7Vs\xf6\xa2\x9b\xaa" +
	"\xcf\xbb\x09\xff;N.{\xb2\xf1\x86\xa9\xdb\xf2+\x8f" +
	"\x9bAa\x16\xc1\x0b\xcd$\x80u\x1a\xe0r\xf1\x993" +
	"C;V\x7fhv\xcf,\xf7\xf3\xb4^\xb8;\x01\xcf" +
	"\xee\x98 _\xb4{\xef\x0e\x13\xbf^7\xf5\x7f\x1f\xe1" +
	"w\xbag\xf9\x9f^]4\xf0Q&p\xf6\xbb\xd7\x93" +
	"\xc0\x11Bu\x9bo\xda}\xfc\xa3<9>q\x97\xa3" +
	"\xb0\x9f\xca\xb1\x87\xc8qX\x93\xe3\xd4\xc4\xbflz'" +
	"\xfa\xfeN\xb3b{5F\xc7\xa8b\xef_\xb5\xf8\xad" +
	"\xca\xa6\x0b>\x85\xdc\xb2\xf2=\x8f\x17\x85+<$\x0d" +
	"&y\xe6\x08\x0d\xe4\x97:\xf1\xed[\xae\xed\xdf\xb7\xfc" +
	"K\xb3\x9f\xae\xf5P;\xd5{\x08\xdc\xc6y\x8f\x0e-" +
	"8\xf3\xec\x81\\8A\xf1\xec\x13:(\xda\x12\xcf;" +
	"\xc2\x10E\xfb\xf3\xb2\xe8\x87\x1f?\xb6\xf9@\x9e2\x9f" +
	"{\xaaP\x18$4\xa1\x83\x1e\x16C'=T\x99\xf6" +
	"\xee\xf0\xb3G\xf6=}0'U\x89q\x85A\xcfV" +
	"a\x98\xe2\x0fyH\xf8o?\xfc\xe4\x17=\x17=|" +
	"(O\xaf\xa62R.\xcb\x88\xe4R\x19\xc7\x08}<" +
	"\x11\xa5\xfa\xd2\x85\xebV\x05_:\x94'\xcas<\x83" +
	"\xc2&B\x13\xea\xe1Y\x0c\xbd\xceSQ\x16\x9e=\xfa" +
	"\xfd\xaf\xa7\xdfw8+`yZ\xac\xfbyb\x88\x15" +
	"\xed\x0b\x9e\x89\x1f?>h\xca\xfda\xfe5\xe2\xc2\xed" +
	"S\xc2\xe9\x9f\xaaC\x83y\xac\x06x/\x0a\xc3\x94\xd5" +
	"I\x9e\xc5\xa0\x97r\xda\xba\xa8}\xe6n\xe1\x9dc#" +
	"\x9cX\x03\x09\x05\x9bw\x03\xa0\xfaE\xf9\xbf[\x03\xc3" +
	"\x1f\x0d\xe5\x8b\xee\xb5\xa3\xb0\xc5K\xf06zY\x0c\xbd" +
	"\xa1\x01\xd6\xb5]Vw\xeb\x83\x1b\xce\xe4\xd5\xc7-\xde" +
	"\xe3B?%\x7f\x83\x90\x7f\xa0\x91_\xb1\xeb\xd5\xf2\xe9" +
	"\xdd\x8b\xffk\xd6\xb4\xdfK#\xf9\x13\xaf\x1f\xa6\xaam" +
	"\x1d\xcdRB\xf9Q-\xdb\x91n\xbbsZ\x8b\x94\x88" +
	"%\xaa[\xa4\xc4|)*7H1\xa9U\xf6\xd5\x92" +
	"\x93\x00\":\x81A'\x00\x8fw\xaa-R\x82\x9e\x82" +
	"_\xa6\xc7\x85a\"\x8a\x1cK\x07\xe3\x11y~<\x86" +
	"r\x16\xc4\x14O,\x1e\x93\x8dkV\xd3\xb5\xd9#\xd8" +
	"\x1a\xf24)\x1cnlSb\xad\x15A9\xd5\x11a" +
	"\xd3\xa9b\x97j\xf5\xcf\xd9\x94/\xfd4.\x89\x16\xd6" +
	"\x02`A\x00\xdeU\x0e ^\xc0\xa2x!\x83\\\x8b" +
	"\x94@^\x7f\x9b\x01\x91\x07\x1c\x13\xfff9\xa9,\xee" +
	"\xd2\xf0\x03RR\x8ab\x16\xfc<\x00\xd1\xc9\xa28\x9e" +
	"AU3\xc1\xdc:\x00\x18\xd1\x1dK\xd19\xa2\xa4\xd2" +
	"s\x92\xf1\x8eD\x8a0\xe0\xa4hJ\xbc\xc0`0\xb9" +
	"\x0a@\xac`Q\xbc\x9aA\x1e\xf1B\xd2\x8f\xf0S\xab" +
	"\x01\xc4+Y\x14\x7f\xcc\xa0/\xa2D\x954Z\x80A" +
	"\x0b\xa0?\xbexqJ6>\x0d\xf6\xe3\xb2\xd9\x9b\x8c" +
	"6\xadUN\x07\xe4dTI\xa5\x94x,\xa5\xd90" +
	"\x9d\x020k\xd9<\xa2\xe5\x95\x0c\xaa\x89\x11b\xe0\xe2" +
	"\xb1\x14\xba\x01\x03\xac\xe6j\xb7\x89\x1f[\x8c\x1f\x92\xe0" +
	"\x12-\xac\xd5\xd4l\xa0\xdeN\xf1\xfc\x9d\xc0\xf06N" +
	"\xd5e\x02\xbf&U\x0d\x06\xb0\xa82f[\xb6\xca\x9a" +
	")I\x1cft1\xabR\x95\x89\x07_\x92PaY" +
	"\xa6\xaf\x00\xc4\xb2\xd2\x9c\x96\x94\xa3\xf1\xa5\xb2\x1e\xab>" +
	"\xca\xa7\x94{\xba\x80\x85b)h\x8a\xa5VB4_" +
	"\x8a\x02\xcay\xb1T8\xed\xe6\xc6\xd3\xfe:y\xa9\xd2" +
	"\x92\x9d{AU\x89\xa7\xc3\xe4\x7f@\xf9<\xe2\x81\xca" +
	"\x99mB\xb3\x9cib\x81\xdap\x1809\xaa\x9cD" +
	"\xc2\x06)1\xad>\x96Nv\x01\x90 0\x05yy" +
	"\xa1 \x9f\x92\x09r\xee\x0e\xb9K\x87\xf7\x10\xaf\x9dK" +
	"~\x19&/T\x1e\xcc\xe1@m\x8ee\x99\xb7+'" +
	"\x1c\x18\x13\x0f\x92\x05\x01OGsc]\x96\xb5\x934" +
	"=\x02\x1d\xcd\x11\xf0)\xa9\xb6\xc6\xba\x82\x97\xa91X" +
	")!Z\xd0\xdcQc\x95\x8f\x9a\xc7,\xdf\xf5#\xf2" +
	"U0\xb8B\x8e\xa5\x93\x8al\xe4\\Y\xe6*`\xd1" +
	"\xec\xcb\x04\xc8M\x09\xd9\x97\x94\xd2\xf1d\x96\xc4\xf3\xd4" +
	"xB\xa6\x7f\x03\x80\x81\xe0,n\xce\x94\x9c\x9em`" +
	"\x1a)\xa6_,\xa1\xb4\xeb\x91o\xf2\x7f0\xe3j\xc3" +
	"\xff\xd7\x90?\xaffQ\xbc\xaeH\x98\x8d\x96\"cf" +
	"\xae\xa6BE\xc0G\xc3\xdb,\xcb\xbc\xb1d)T\xe6" +
	"G\x93%'\xd7L\x0fJ\xb1\\\xfb\xb6\xd2\x94\x9a\x94" +
	"\x99\xd8\xb8Y\x91\xb9N9;2\xaa\xfdK\x15\xb9S" +
	"N\x8e\xf9D\x9a\xac[\xda\x13\x9c\xe9\xf8r\x1ea6" +
	"'\xc3\x16$\x95\xb4\x1cH\xc6\x13\x1e9\x99\xee\xca\x92" +
	"n\xad\xaa\x13 \xa5\x90\x93i\xec\x1a\xad\xc1\xd1\xec^" +
	"\xac\xc1\xa1\xa7\xe0\xef\xcanp\xac\xa5\xbe4~\xcdu" +
	"\xe7\xd3\x19\xe4\xea\\\x1fU\xd2\xb5-i%\x8e\xb1\x1c" +
	"1\xf5S\xf0\xd3\xf3\xd8\x18>m\x90b\x1e\xa95\xc7" +
	"\xa9\xd7\xaf\x88R%\x92\xe7\xd4\xf8\x94\xe6Uc>\x19" +
	"\xc3\xab\x81\x8e\xe6\xfa\xa5r,\x0dY\x92\xb5\xeb\xa5\xb3" +
	"\x1e<\xe4\xf4\\_\xe1\x80\xe4\xc9M\xe5\xef\xba\xac\x14" +
	"\xcc\x80\xef\xa6I\xd44\xad\x8dD\xa8/8s\xb7a" +
	"6\xafD~\x87\xe4$i\x03\xe6sR4\xbb\x17\xa8" +
	"\xf2I\xa3\x85w\xc1\x9e\xfa[\xa8\xc3\x16+|\xe6&" +
	"P_\x8e\xa0>\xa6\x95\xd8\x04\x96d+\"<{~" +
	"i\xc9\xe4\xda\x86\xd3\xea\x86\xe8\xa4b\xeb\xc3:\xea\xdb" +
	"F^$b\xcf\xe5\xd0\xd8\x17\x18k\x9aY\xe4\xe4Z" +
	"\x0e\x19c\xf3\x88\xfa\x12\x83\x9fL\xce&q\xaanu" +
	"\xf0kv\xaf\xc1\xbc\xb1K\xfb+\xabPe\x9b\xa4@" +
	"\xd1\xd3<Y\xac\xe8eq,\xa89-qy\xed\xda" +
	"\x94B\xed\x1a\x99\x11*Y\x14g2\xe8\x89I\xd1L" +
	"\xf2D\xe5h\xb3\x9c\x0c\xc6\x81\x1b\xbd\xdbf\x8byT" +
	"\x0b\x97\xcb\xa9\xdd\xf5m\x1c\xea\xfb_\xfe\xd8<`\xf8" +
	"\x01\x0e\xd1\xd8\x86\xa2\xbew\xe4?'g\x9f\x10\xcb\xeb" +
	"[+\xd4\xb7\xad\xfc{I`\xf8>\x0eYc\xdd\x8b" +
	"\xfa\xfc\xcco\xba\x0d\x18\xfeE\x0e-\xc6\x16\x05{\x96" +
	"\x83\xb6\xe6Y\x17\x04\x86\xff\x03\x87Vc\xf1\x87\xfa\x02" +
	"\x81_\xd3\x0e\x0c\xbf\x92\xc3q\xc6R\x09\xf5\xe5-\xdf" +
	"\xd5\x0c\x0c\xbf\x84C\xceX\x13\xa0\xbet\xe4e\"\xcb" +
	"\"N\xd5{$\x00\xa8AU\x7fbr\xbe|\xf4\xc9" +
	"\xa9AU\x1f\x1c\x81M\x90O=\xec\x01#\xc6\xd7\xec" +
	"\x08xH\x04\x18\x7f4\xb6\x01\xa7\xc4ZkP\xd5\xfb" +
	"8\xf0\xd1\xd7\xa2x(I\x91\xc8\x9c\x91\x9a(g\x97" +
	"\xecrN\x8aD\xce\xa3\xcf\xf9\xff\xcc\x98\xa5\xf6xA" +
	"\xbf\x9c=\x9e\xe5\xbeGAY\x0a\x17\x7fq\xc9i\xde" +
	"\x8bk-\xb5?\xd6\x1b\x03\xa7\xa1h=\xa9@u," +
	"\x8a\x01S\xf64\x90W\xe9F\x16\xc5[\x18\xe4\x19\xe6" +
	"Bd\x00\xf8&\x92g\x01\x16\xc5\x85\xa5w\x9d\x85\xa7" +
	"\xa3B\x1akO0\x14\x18_\xa8\xc6\xbe\xfa\xacG8" +
	"w\xf6\x09\xfad)\x9c3\xfc\xdc\x96\xb9\xcd\x9a&\x9f" +
	"\xd2V\x1fA9\xe5!^2\x87Duf\xf8\xf1S" +
	"]M\xb3\x8fyHs\x03\xfe/\x00\x00\xff\xffHW" +
	"\xc2y"

func init() {
	schemas.Register(schema_ae2da827da0eecef,
		0x80371042f92ce229,
		0x81f48b975f1ba220,
		0x83b0068869d06e38,
		0x8936891056d33633,
		0x8a65d37d1854b0b9,
		0x8e0b29eea97424c5,
		0x8f4d5501f70df3cc,
		0x901071c55900f0ee,
		0x90cd9a09818e64bc,
		0x91cda370415fe10c,
		0x921ec3b1c6717810,
		0x9392da5773ecf950,
		0x942c2bf8c8460f17,
		0x97183a096ac47cf5,
		0x98a24585f7c66e69,
		0x9ce4d86e8d20e936,
		0x9e451e166449d1c8,
		0x9ef2cb8a246e80b3,
		0x9f609c5244787777,
		0xa319eda6f36efbd8,
		0xaeed8a641e89dccf,
		0xb32101cd36b4d785,
		0xb49443fa18d10a70,
		0xb4ad26f6c52c0300,
		0xb589d37055afb370,
		0xb9e8ba0004e9a9e8,
		0xbbe7aaaf47590309,
		0xc07fad774b6178f7,
		0xc13e91c16919f8f7,
		0xca7c68978c2cd0e0,
		0xcd2d4854a478f46b,
		0xce8ad1f5fca7517e,
		0xd1e1df166519d100,
		0xd2e95db6a0007eb0,
		0xd2f2df4fb8445313,
		0xd3cb6dc7b5b71ef7,
		0xd908552cc4662bcb,
		0xe47ee2c53558c61e,
		0xe7a8fc57f59c4ab4,
		0xe7b89dd4ce6d78ab,
		0xe8a6e2efa864976a,
		0xea9816b0e3a4ecd0,
		0xeaae5289a15c1c3a,
		0xec8c33f61af0fe5c,
		0xedf2f26fa7576a7f,
		0xedf5ff3974642ad0,
		0xf1c713df386a5dca,
		0xf5d2f95067eb22e3,
		0xfcaf9159441d6844,
		0xfd66973322b6d825)
}

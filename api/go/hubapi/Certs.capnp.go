// Code generated by capnpc-go. DO NOT EDIT.

package hubapi

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

// Constants defined in Certs.capnp.
const (
	CertServiceName                = "certservice"
	DefaultCaCertFile              = "caCert.pem"
	DefaultCaKeyFile               = "caKey.pem"
	DefaultServiceCertValidityDays = int32(365)
	DefaultUserCertValidityDays    = int32(365)
	DefaultDeviceCertValidityDays  = int32(365)
	CapNameDeviceCerts             = "capDeviceCerts"
	CapNameServiceCerts            = "capServiceCerts"
	CapNameUserCerts               = "capUserCerts"
	CapNameVerifyCerts             = "capVerifyCerts"
)

type CapCerts capnp.Client

// CapCerts_TypeID is the unique identifier for the type CapCerts.
const CapCerts_TypeID = 0xbc4667f0c566ed1b

func (c CapCerts) CapDeviceCerts(ctx context.Context, params func(CapCerts_capDeviceCerts_Params) error) (CapCerts_capDeviceCerts_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbc4667f0c566ed1b,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapCerts",
			MethodName:    "capDeviceCerts",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapCerts_capDeviceCerts_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapCerts_capDeviceCerts_Results_Future{Future: ans.Future()}, release
}
func (c CapCerts) CapServiceCerts(ctx context.Context, params func(CapCerts_capServiceCerts_Params) error) (CapCerts_capServiceCerts_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbc4667f0c566ed1b,
			MethodID:      1,
			InterfaceName: "hubapi/Certs.capnp:CapCerts",
			MethodName:    "capServiceCerts",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapCerts_capServiceCerts_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapCerts_capServiceCerts_Results_Future{Future: ans.Future()}, release
}
func (c CapCerts) CapUserCerts(ctx context.Context, params func(CapCerts_capUserCerts_Params) error) (CapCerts_capUserCerts_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbc4667f0c566ed1b,
			MethodID:      2,
			InterfaceName: "hubapi/Certs.capnp:CapCerts",
			MethodName:    "capUserCerts",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapCerts_capUserCerts_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapCerts_capUserCerts_Results_Future{Future: ans.Future()}, release
}
func (c CapCerts) CapVerifyCerts(ctx context.Context, params func(CapCerts_capVerifyCerts_Params) error) (CapCerts_capVerifyCerts_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbc4667f0c566ed1b,
			MethodID:      3,
			InterfaceName: "hubapi/Certs.capnp:CapCerts",
			MethodName:    "capVerifyCerts",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapCerts_capVerifyCerts_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapCerts_capVerifyCerts_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapCerts) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapCerts) AddRef() CapCerts {
	return CapCerts(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapCerts) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapCerts) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapCerts) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapCerts) DecodeFromPtr(p capnp.Ptr) CapCerts {
	return CapCerts(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapCerts) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapCerts) IsSame(other CapCerts) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapCerts) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapCerts) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapCerts_Server is a CapCerts with a local implementation.
type CapCerts_Server interface {
	CapDeviceCerts(context.Context, CapCerts_capDeviceCerts) error

	CapServiceCerts(context.Context, CapCerts_capServiceCerts) error

	CapUserCerts(context.Context, CapCerts_capUserCerts) error

	CapVerifyCerts(context.Context, CapCerts_capVerifyCerts) error
}

// CapCerts_NewServer creates a new Server from an implementation of CapCerts_Server.
func CapCerts_NewServer(s CapCerts_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapCerts_Methods(nil, s), s, c)
}

// CapCerts_ServerToClient creates a new Client from an implementation of CapCerts_Server.
// The caller is responsible for calling Release on the returned Client.
func CapCerts_ServerToClient(s CapCerts_Server) CapCerts {
	return CapCerts(capnp.NewClient(CapCerts_NewServer(s)))
}

// CapCerts_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapCerts_Methods(methods []server.Method, s CapCerts_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbc4667f0c566ed1b,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapCerts",
			MethodName:    "capDeviceCerts",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapDeviceCerts(ctx, CapCerts_capDeviceCerts{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbc4667f0c566ed1b,
			MethodID:      1,
			InterfaceName: "hubapi/Certs.capnp:CapCerts",
			MethodName:    "capServiceCerts",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapServiceCerts(ctx, CapCerts_capServiceCerts{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbc4667f0c566ed1b,
			MethodID:      2,
			InterfaceName: "hubapi/Certs.capnp:CapCerts",
			MethodName:    "capUserCerts",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapUserCerts(ctx, CapCerts_capUserCerts{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbc4667f0c566ed1b,
			MethodID:      3,
			InterfaceName: "hubapi/Certs.capnp:CapCerts",
			MethodName:    "capVerifyCerts",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapVerifyCerts(ctx, CapCerts_capVerifyCerts{call})
		},
	})

	return methods
}

// CapCerts_capDeviceCerts holds the state for a server call to CapCerts.capDeviceCerts.
// See server.Call for documentation.
type CapCerts_capDeviceCerts struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapCerts_capDeviceCerts) Args() CapCerts_capDeviceCerts_Params {
	return CapCerts_capDeviceCerts_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapCerts_capDeviceCerts) AllocResults() (CapCerts_capDeviceCerts_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capDeviceCerts_Results(r), err
}

// CapCerts_capServiceCerts holds the state for a server call to CapCerts.capServiceCerts.
// See server.Call for documentation.
type CapCerts_capServiceCerts struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapCerts_capServiceCerts) Args() CapCerts_capServiceCerts_Params {
	return CapCerts_capServiceCerts_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapCerts_capServiceCerts) AllocResults() (CapCerts_capServiceCerts_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capServiceCerts_Results(r), err
}

// CapCerts_capUserCerts holds the state for a server call to CapCerts.capUserCerts.
// See server.Call for documentation.
type CapCerts_capUserCerts struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapCerts_capUserCerts) Args() CapCerts_capUserCerts_Params {
	return CapCerts_capUserCerts_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapCerts_capUserCerts) AllocResults() (CapCerts_capUserCerts_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capUserCerts_Results(r), err
}

// CapCerts_capVerifyCerts holds the state for a server call to CapCerts.capVerifyCerts.
// See server.Call for documentation.
type CapCerts_capVerifyCerts struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapCerts_capVerifyCerts) Args() CapCerts_capVerifyCerts_Params {
	return CapCerts_capVerifyCerts_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapCerts_capVerifyCerts) AllocResults() (CapCerts_capVerifyCerts_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capVerifyCerts_Results(r), err
}

// CapCerts_List is a list of CapCerts.
type CapCerts_List = capnp.CapList[CapCerts]

// NewCapCerts creates a new list of CapCerts.
func NewCapCerts_List(s *capnp.Segment, sz int32) (CapCerts_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapCerts](l), err
}

type CapCerts_capDeviceCerts_Params capnp.Struct

// CapCerts_capDeviceCerts_Params_TypeID is the unique identifier for the type CapCerts_capDeviceCerts_Params.
const CapCerts_capDeviceCerts_Params_TypeID = 0x8b17ebc3a878547d

func NewCapCerts_capDeviceCerts_Params(s *capnp.Segment) (CapCerts_capDeviceCerts_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capDeviceCerts_Params(st), err
}

func NewRootCapCerts_capDeviceCerts_Params(s *capnp.Segment) (CapCerts_capDeviceCerts_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capDeviceCerts_Params(st), err
}

func ReadRootCapCerts_capDeviceCerts_Params(msg *capnp.Message) (CapCerts_capDeviceCerts_Params, error) {
	root, err := msg.Root()
	return CapCerts_capDeviceCerts_Params(root.Struct()), err
}

func (s CapCerts_capDeviceCerts_Params) String() string {
	str, _ := text.Marshal(0x8b17ebc3a878547d, capnp.Struct(s))
	return str
}

func (s CapCerts_capDeviceCerts_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapCerts_capDeviceCerts_Params) DecodeFromPtr(p capnp.Ptr) CapCerts_capDeviceCerts_Params {
	return CapCerts_capDeviceCerts_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapCerts_capDeviceCerts_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapCerts_capDeviceCerts_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapCerts_capDeviceCerts_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapCerts_capDeviceCerts_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapCerts_capDeviceCerts_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapCerts_capDeviceCerts_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapCerts_capDeviceCerts_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapCerts_capDeviceCerts_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapCerts_capDeviceCerts_Params_List is a list of CapCerts_capDeviceCerts_Params.
type CapCerts_capDeviceCerts_Params_List = capnp.StructList[CapCerts_capDeviceCerts_Params]

// NewCapCerts_capDeviceCerts_Params creates a new list of CapCerts_capDeviceCerts_Params.
func NewCapCerts_capDeviceCerts_Params_List(s *capnp.Segment, sz int32) (CapCerts_capDeviceCerts_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapCerts_capDeviceCerts_Params](l), err
}

// CapCerts_capDeviceCerts_Params_Future is a wrapper for a CapCerts_capDeviceCerts_Params promised by a client call.
type CapCerts_capDeviceCerts_Params_Future struct{ *capnp.Future }

func (f CapCerts_capDeviceCerts_Params_Future) Struct() (CapCerts_capDeviceCerts_Params, error) {
	p, err := f.Future.Ptr()
	return CapCerts_capDeviceCerts_Params(p.Struct()), err
}

type CapCerts_capDeviceCerts_Results capnp.Struct

// CapCerts_capDeviceCerts_Results_TypeID is the unique identifier for the type CapCerts_capDeviceCerts_Results.
const CapCerts_capDeviceCerts_Results_TypeID = 0xef7af10b7cfa6e86

func NewCapCerts_capDeviceCerts_Results(s *capnp.Segment) (CapCerts_capDeviceCerts_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capDeviceCerts_Results(st), err
}

func NewRootCapCerts_capDeviceCerts_Results(s *capnp.Segment) (CapCerts_capDeviceCerts_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capDeviceCerts_Results(st), err
}

func ReadRootCapCerts_capDeviceCerts_Results(msg *capnp.Message) (CapCerts_capDeviceCerts_Results, error) {
	root, err := msg.Root()
	return CapCerts_capDeviceCerts_Results(root.Struct()), err
}

func (s CapCerts_capDeviceCerts_Results) String() string {
	str, _ := text.Marshal(0xef7af10b7cfa6e86, capnp.Struct(s))
	return str
}

func (s CapCerts_capDeviceCerts_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapCerts_capDeviceCerts_Results) DecodeFromPtr(p capnp.Ptr) CapCerts_capDeviceCerts_Results {
	return CapCerts_capDeviceCerts_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapCerts_capDeviceCerts_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapCerts_capDeviceCerts_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapCerts_capDeviceCerts_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapCerts_capDeviceCerts_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapCerts_capDeviceCerts_Results) Cap() CapDeviceCerts {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapDeviceCerts(p.Interface().Client())
}

func (s CapCerts_capDeviceCerts_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapCerts_capDeviceCerts_Results) SetCap(v CapDeviceCerts) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapCerts_capDeviceCerts_Results_List is a list of CapCerts_capDeviceCerts_Results.
type CapCerts_capDeviceCerts_Results_List = capnp.StructList[CapCerts_capDeviceCerts_Results]

// NewCapCerts_capDeviceCerts_Results creates a new list of CapCerts_capDeviceCerts_Results.
func NewCapCerts_capDeviceCerts_Results_List(s *capnp.Segment, sz int32) (CapCerts_capDeviceCerts_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapCerts_capDeviceCerts_Results](l), err
}

// CapCerts_capDeviceCerts_Results_Future is a wrapper for a CapCerts_capDeviceCerts_Results promised by a client call.
type CapCerts_capDeviceCerts_Results_Future struct{ *capnp.Future }

func (f CapCerts_capDeviceCerts_Results_Future) Struct() (CapCerts_capDeviceCerts_Results, error) {
	p, err := f.Future.Ptr()
	return CapCerts_capDeviceCerts_Results(p.Struct()), err
}
func (p CapCerts_capDeviceCerts_Results_Future) Cap() CapDeviceCerts {
	return CapDeviceCerts(p.Future.Field(0, nil).Client())
}

type CapCerts_capServiceCerts_Params capnp.Struct

// CapCerts_capServiceCerts_Params_TypeID is the unique identifier for the type CapCerts_capServiceCerts_Params.
const CapCerts_capServiceCerts_Params_TypeID = 0x8635df752d5e8709

func NewCapCerts_capServiceCerts_Params(s *capnp.Segment) (CapCerts_capServiceCerts_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capServiceCerts_Params(st), err
}

func NewRootCapCerts_capServiceCerts_Params(s *capnp.Segment) (CapCerts_capServiceCerts_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capServiceCerts_Params(st), err
}

func ReadRootCapCerts_capServiceCerts_Params(msg *capnp.Message) (CapCerts_capServiceCerts_Params, error) {
	root, err := msg.Root()
	return CapCerts_capServiceCerts_Params(root.Struct()), err
}

func (s CapCerts_capServiceCerts_Params) String() string {
	str, _ := text.Marshal(0x8635df752d5e8709, capnp.Struct(s))
	return str
}

func (s CapCerts_capServiceCerts_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapCerts_capServiceCerts_Params) DecodeFromPtr(p capnp.Ptr) CapCerts_capServiceCerts_Params {
	return CapCerts_capServiceCerts_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapCerts_capServiceCerts_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapCerts_capServiceCerts_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapCerts_capServiceCerts_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapCerts_capServiceCerts_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapCerts_capServiceCerts_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapCerts_capServiceCerts_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapCerts_capServiceCerts_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapCerts_capServiceCerts_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapCerts_capServiceCerts_Params_List is a list of CapCerts_capServiceCerts_Params.
type CapCerts_capServiceCerts_Params_List = capnp.StructList[CapCerts_capServiceCerts_Params]

// NewCapCerts_capServiceCerts_Params creates a new list of CapCerts_capServiceCerts_Params.
func NewCapCerts_capServiceCerts_Params_List(s *capnp.Segment, sz int32) (CapCerts_capServiceCerts_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapCerts_capServiceCerts_Params](l), err
}

// CapCerts_capServiceCerts_Params_Future is a wrapper for a CapCerts_capServiceCerts_Params promised by a client call.
type CapCerts_capServiceCerts_Params_Future struct{ *capnp.Future }

func (f CapCerts_capServiceCerts_Params_Future) Struct() (CapCerts_capServiceCerts_Params, error) {
	p, err := f.Future.Ptr()
	return CapCerts_capServiceCerts_Params(p.Struct()), err
}

type CapCerts_capServiceCerts_Results capnp.Struct

// CapCerts_capServiceCerts_Results_TypeID is the unique identifier for the type CapCerts_capServiceCerts_Results.
const CapCerts_capServiceCerts_Results_TypeID = 0xc24dcb44431416fd

func NewCapCerts_capServiceCerts_Results(s *capnp.Segment) (CapCerts_capServiceCerts_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capServiceCerts_Results(st), err
}

func NewRootCapCerts_capServiceCerts_Results(s *capnp.Segment) (CapCerts_capServiceCerts_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capServiceCerts_Results(st), err
}

func ReadRootCapCerts_capServiceCerts_Results(msg *capnp.Message) (CapCerts_capServiceCerts_Results, error) {
	root, err := msg.Root()
	return CapCerts_capServiceCerts_Results(root.Struct()), err
}

func (s CapCerts_capServiceCerts_Results) String() string {
	str, _ := text.Marshal(0xc24dcb44431416fd, capnp.Struct(s))
	return str
}

func (s CapCerts_capServiceCerts_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapCerts_capServiceCerts_Results) DecodeFromPtr(p capnp.Ptr) CapCerts_capServiceCerts_Results {
	return CapCerts_capServiceCerts_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapCerts_capServiceCerts_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapCerts_capServiceCerts_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapCerts_capServiceCerts_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapCerts_capServiceCerts_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapCerts_capServiceCerts_Results) Cap() CapServiceCerts {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapServiceCerts(p.Interface().Client())
}

func (s CapCerts_capServiceCerts_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapCerts_capServiceCerts_Results) SetCap(v CapServiceCerts) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapCerts_capServiceCerts_Results_List is a list of CapCerts_capServiceCerts_Results.
type CapCerts_capServiceCerts_Results_List = capnp.StructList[CapCerts_capServiceCerts_Results]

// NewCapCerts_capServiceCerts_Results creates a new list of CapCerts_capServiceCerts_Results.
func NewCapCerts_capServiceCerts_Results_List(s *capnp.Segment, sz int32) (CapCerts_capServiceCerts_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapCerts_capServiceCerts_Results](l), err
}

// CapCerts_capServiceCerts_Results_Future is a wrapper for a CapCerts_capServiceCerts_Results promised by a client call.
type CapCerts_capServiceCerts_Results_Future struct{ *capnp.Future }

func (f CapCerts_capServiceCerts_Results_Future) Struct() (CapCerts_capServiceCerts_Results, error) {
	p, err := f.Future.Ptr()
	return CapCerts_capServiceCerts_Results(p.Struct()), err
}
func (p CapCerts_capServiceCerts_Results_Future) Cap() CapServiceCerts {
	return CapServiceCerts(p.Future.Field(0, nil).Client())
}

type CapCerts_capUserCerts_Params capnp.Struct

// CapCerts_capUserCerts_Params_TypeID is the unique identifier for the type CapCerts_capUserCerts_Params.
const CapCerts_capUserCerts_Params_TypeID = 0xfa0c6b017caeafc9

func NewCapCerts_capUserCerts_Params(s *capnp.Segment) (CapCerts_capUserCerts_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capUserCerts_Params(st), err
}

func NewRootCapCerts_capUserCerts_Params(s *capnp.Segment) (CapCerts_capUserCerts_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capUserCerts_Params(st), err
}

func ReadRootCapCerts_capUserCerts_Params(msg *capnp.Message) (CapCerts_capUserCerts_Params, error) {
	root, err := msg.Root()
	return CapCerts_capUserCerts_Params(root.Struct()), err
}

func (s CapCerts_capUserCerts_Params) String() string {
	str, _ := text.Marshal(0xfa0c6b017caeafc9, capnp.Struct(s))
	return str
}

func (s CapCerts_capUserCerts_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapCerts_capUserCerts_Params) DecodeFromPtr(p capnp.Ptr) CapCerts_capUserCerts_Params {
	return CapCerts_capUserCerts_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapCerts_capUserCerts_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapCerts_capUserCerts_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapCerts_capUserCerts_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapCerts_capUserCerts_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapCerts_capUserCerts_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapCerts_capUserCerts_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapCerts_capUserCerts_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapCerts_capUserCerts_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapCerts_capUserCerts_Params_List is a list of CapCerts_capUserCerts_Params.
type CapCerts_capUserCerts_Params_List = capnp.StructList[CapCerts_capUserCerts_Params]

// NewCapCerts_capUserCerts_Params creates a new list of CapCerts_capUserCerts_Params.
func NewCapCerts_capUserCerts_Params_List(s *capnp.Segment, sz int32) (CapCerts_capUserCerts_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapCerts_capUserCerts_Params](l), err
}

// CapCerts_capUserCerts_Params_Future is a wrapper for a CapCerts_capUserCerts_Params promised by a client call.
type CapCerts_capUserCerts_Params_Future struct{ *capnp.Future }

func (f CapCerts_capUserCerts_Params_Future) Struct() (CapCerts_capUserCerts_Params, error) {
	p, err := f.Future.Ptr()
	return CapCerts_capUserCerts_Params(p.Struct()), err
}

type CapCerts_capUserCerts_Results capnp.Struct

// CapCerts_capUserCerts_Results_TypeID is the unique identifier for the type CapCerts_capUserCerts_Results.
const CapCerts_capUserCerts_Results_TypeID = 0x944af56ed9250476

func NewCapCerts_capUserCerts_Results(s *capnp.Segment) (CapCerts_capUserCerts_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capUserCerts_Results(st), err
}

func NewRootCapCerts_capUserCerts_Results(s *capnp.Segment) (CapCerts_capUserCerts_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capUserCerts_Results(st), err
}

func ReadRootCapCerts_capUserCerts_Results(msg *capnp.Message) (CapCerts_capUserCerts_Results, error) {
	root, err := msg.Root()
	return CapCerts_capUserCerts_Results(root.Struct()), err
}

func (s CapCerts_capUserCerts_Results) String() string {
	str, _ := text.Marshal(0x944af56ed9250476, capnp.Struct(s))
	return str
}

func (s CapCerts_capUserCerts_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapCerts_capUserCerts_Results) DecodeFromPtr(p capnp.Ptr) CapCerts_capUserCerts_Results {
	return CapCerts_capUserCerts_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapCerts_capUserCerts_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapCerts_capUserCerts_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapCerts_capUserCerts_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapCerts_capUserCerts_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapCerts_capUserCerts_Results) Cap() CapUserCerts {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapUserCerts(p.Interface().Client())
}

func (s CapCerts_capUserCerts_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapCerts_capUserCerts_Results) SetCap(v CapUserCerts) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapCerts_capUserCerts_Results_List is a list of CapCerts_capUserCerts_Results.
type CapCerts_capUserCerts_Results_List = capnp.StructList[CapCerts_capUserCerts_Results]

// NewCapCerts_capUserCerts_Results creates a new list of CapCerts_capUserCerts_Results.
func NewCapCerts_capUserCerts_Results_List(s *capnp.Segment, sz int32) (CapCerts_capUserCerts_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapCerts_capUserCerts_Results](l), err
}

// CapCerts_capUserCerts_Results_Future is a wrapper for a CapCerts_capUserCerts_Results promised by a client call.
type CapCerts_capUserCerts_Results_Future struct{ *capnp.Future }

func (f CapCerts_capUserCerts_Results_Future) Struct() (CapCerts_capUserCerts_Results, error) {
	p, err := f.Future.Ptr()
	return CapCerts_capUserCerts_Results(p.Struct()), err
}
func (p CapCerts_capUserCerts_Results_Future) Cap() CapUserCerts {
	return CapUserCerts(p.Future.Field(0, nil).Client())
}

type CapCerts_capVerifyCerts_Params capnp.Struct

// CapCerts_capVerifyCerts_Params_TypeID is the unique identifier for the type CapCerts_capVerifyCerts_Params.
const CapCerts_capVerifyCerts_Params_TypeID = 0xbd8e7935ff05370a

func NewCapCerts_capVerifyCerts_Params(s *capnp.Segment) (CapCerts_capVerifyCerts_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capVerifyCerts_Params(st), err
}

func NewRootCapCerts_capVerifyCerts_Params(s *capnp.Segment) (CapCerts_capVerifyCerts_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capVerifyCerts_Params(st), err
}

func ReadRootCapCerts_capVerifyCerts_Params(msg *capnp.Message) (CapCerts_capVerifyCerts_Params, error) {
	root, err := msg.Root()
	return CapCerts_capVerifyCerts_Params(root.Struct()), err
}

func (s CapCerts_capVerifyCerts_Params) String() string {
	str, _ := text.Marshal(0xbd8e7935ff05370a, capnp.Struct(s))
	return str
}

func (s CapCerts_capVerifyCerts_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapCerts_capVerifyCerts_Params) DecodeFromPtr(p capnp.Ptr) CapCerts_capVerifyCerts_Params {
	return CapCerts_capVerifyCerts_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapCerts_capVerifyCerts_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapCerts_capVerifyCerts_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapCerts_capVerifyCerts_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapCerts_capVerifyCerts_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapCerts_capVerifyCerts_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapCerts_capVerifyCerts_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapCerts_capVerifyCerts_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapCerts_capVerifyCerts_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapCerts_capVerifyCerts_Params_List is a list of CapCerts_capVerifyCerts_Params.
type CapCerts_capVerifyCerts_Params_List = capnp.StructList[CapCerts_capVerifyCerts_Params]

// NewCapCerts_capVerifyCerts_Params creates a new list of CapCerts_capVerifyCerts_Params.
func NewCapCerts_capVerifyCerts_Params_List(s *capnp.Segment, sz int32) (CapCerts_capVerifyCerts_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapCerts_capVerifyCerts_Params](l), err
}

// CapCerts_capVerifyCerts_Params_Future is a wrapper for a CapCerts_capVerifyCerts_Params promised by a client call.
type CapCerts_capVerifyCerts_Params_Future struct{ *capnp.Future }

func (f CapCerts_capVerifyCerts_Params_Future) Struct() (CapCerts_capVerifyCerts_Params, error) {
	p, err := f.Future.Ptr()
	return CapCerts_capVerifyCerts_Params(p.Struct()), err
}

type CapCerts_capVerifyCerts_Results capnp.Struct

// CapCerts_capVerifyCerts_Results_TypeID is the unique identifier for the type CapCerts_capVerifyCerts_Results.
const CapCerts_capVerifyCerts_Results_TypeID = 0x8738a1e15f03a2c6

func NewCapCerts_capVerifyCerts_Results(s *capnp.Segment) (CapCerts_capVerifyCerts_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capVerifyCerts_Results(st), err
}

func NewRootCapCerts_capVerifyCerts_Results(s *capnp.Segment) (CapCerts_capVerifyCerts_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capVerifyCerts_Results(st), err
}

func ReadRootCapCerts_capVerifyCerts_Results(msg *capnp.Message) (CapCerts_capVerifyCerts_Results, error) {
	root, err := msg.Root()
	return CapCerts_capVerifyCerts_Results(root.Struct()), err
}

func (s CapCerts_capVerifyCerts_Results) String() string {
	str, _ := text.Marshal(0x8738a1e15f03a2c6, capnp.Struct(s))
	return str
}

func (s CapCerts_capVerifyCerts_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapCerts_capVerifyCerts_Results) DecodeFromPtr(p capnp.Ptr) CapCerts_capVerifyCerts_Results {
	return CapCerts_capVerifyCerts_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapCerts_capVerifyCerts_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapCerts_capVerifyCerts_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapCerts_capVerifyCerts_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapCerts_capVerifyCerts_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapCerts_capVerifyCerts_Results) Cap() CapVerifyCerts {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapVerifyCerts(p.Interface().Client())
}

func (s CapCerts_capVerifyCerts_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapCerts_capVerifyCerts_Results) SetCap(v CapVerifyCerts) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapCerts_capVerifyCerts_Results_List is a list of CapCerts_capVerifyCerts_Results.
type CapCerts_capVerifyCerts_Results_List = capnp.StructList[CapCerts_capVerifyCerts_Results]

// NewCapCerts_capVerifyCerts_Results creates a new list of CapCerts_capVerifyCerts_Results.
func NewCapCerts_capVerifyCerts_Results_List(s *capnp.Segment, sz int32) (CapCerts_capVerifyCerts_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapCerts_capVerifyCerts_Results](l), err
}

// CapCerts_capVerifyCerts_Results_Future is a wrapper for a CapCerts_capVerifyCerts_Results promised by a client call.
type CapCerts_capVerifyCerts_Results_Future struct{ *capnp.Future }

func (f CapCerts_capVerifyCerts_Results_Future) Struct() (CapCerts_capVerifyCerts_Results, error) {
	p, err := f.Future.Ptr()
	return CapCerts_capVerifyCerts_Results(p.Struct()), err
}
func (p CapCerts_capVerifyCerts_Results_Future) Cap() CapVerifyCerts {
	return CapVerifyCerts(p.Future.Field(0, nil).Client())
}

type CapDeviceCerts capnp.Client

// CapDeviceCerts_TypeID is the unique identifier for the type CapDeviceCerts.
const CapDeviceCerts_TypeID = 0xd619b9809a56774e

func (c CapDeviceCerts) CreateDeviceCert(ctx context.Context, params func(CapDeviceCerts_createDeviceCert_Params) error) (CapDeviceCerts_createDeviceCert_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd619b9809a56774e,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapDeviceCerts",
			MethodName:    "createDeviceCert",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDeviceCerts_createDeviceCert_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDeviceCerts_createDeviceCert_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapDeviceCerts) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapDeviceCerts) AddRef() CapDeviceCerts {
	return CapDeviceCerts(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapDeviceCerts) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapDeviceCerts) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapDeviceCerts) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapDeviceCerts) DecodeFromPtr(p capnp.Ptr) CapDeviceCerts {
	return CapDeviceCerts(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapDeviceCerts) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapDeviceCerts) IsSame(other CapDeviceCerts) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapDeviceCerts) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapDeviceCerts) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapDeviceCerts_Server is a CapDeviceCerts with a local implementation.
type CapDeviceCerts_Server interface {
	CreateDeviceCert(context.Context, CapDeviceCerts_createDeviceCert) error
}

// CapDeviceCerts_NewServer creates a new Server from an implementation of CapDeviceCerts_Server.
func CapDeviceCerts_NewServer(s CapDeviceCerts_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapDeviceCerts_Methods(nil, s), s, c)
}

// CapDeviceCerts_ServerToClient creates a new Client from an implementation of CapDeviceCerts_Server.
// The caller is responsible for calling Release on the returned Client.
func CapDeviceCerts_ServerToClient(s CapDeviceCerts_Server) CapDeviceCerts {
	return CapDeviceCerts(capnp.NewClient(CapDeviceCerts_NewServer(s)))
}

// CapDeviceCerts_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapDeviceCerts_Methods(methods []server.Method, s CapDeviceCerts_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd619b9809a56774e,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapDeviceCerts",
			MethodName:    "createDeviceCert",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CreateDeviceCert(ctx, CapDeviceCerts_createDeviceCert{call})
		},
	})

	return methods
}

// CapDeviceCerts_createDeviceCert holds the state for a server call to CapDeviceCerts.createDeviceCert.
// See server.Call for documentation.
type CapDeviceCerts_createDeviceCert struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapDeviceCerts_createDeviceCert) Args() CapDeviceCerts_createDeviceCert_Params {
	return CapDeviceCerts_createDeviceCert_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapDeviceCerts_createDeviceCert) AllocResults() (CapDeviceCerts_createDeviceCert_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapDeviceCerts_createDeviceCert_Results(r), err
}

// CapDeviceCerts_List is a list of CapDeviceCerts.
type CapDeviceCerts_List = capnp.CapList[CapDeviceCerts]

// NewCapDeviceCerts creates a new list of CapDeviceCerts.
func NewCapDeviceCerts_List(s *capnp.Segment, sz int32) (CapDeviceCerts_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapDeviceCerts](l), err
}

type CapDeviceCerts_createDeviceCert_Params capnp.Struct

// CapDeviceCerts_createDeviceCert_Params_TypeID is the unique identifier for the type CapDeviceCerts_createDeviceCert_Params.
const CapDeviceCerts_createDeviceCert_Params_TypeID = 0xa07734b165754dfe

func NewCapDeviceCerts_createDeviceCert_Params(s *capnp.Segment) (CapDeviceCerts_createDeviceCert_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapDeviceCerts_createDeviceCert_Params(st), err
}

func NewRootCapDeviceCerts_createDeviceCert_Params(s *capnp.Segment) (CapDeviceCerts_createDeviceCert_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapDeviceCerts_createDeviceCert_Params(st), err
}

func ReadRootCapDeviceCerts_createDeviceCert_Params(msg *capnp.Message) (CapDeviceCerts_createDeviceCert_Params, error) {
	root, err := msg.Root()
	return CapDeviceCerts_createDeviceCert_Params(root.Struct()), err
}

func (s CapDeviceCerts_createDeviceCert_Params) String() string {
	str, _ := text.Marshal(0xa07734b165754dfe, capnp.Struct(s))
	return str
}

func (s CapDeviceCerts_createDeviceCert_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDeviceCerts_createDeviceCert_Params) DecodeFromPtr(p capnp.Ptr) CapDeviceCerts_createDeviceCert_Params {
	return CapDeviceCerts_createDeviceCert_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDeviceCerts_createDeviceCert_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDeviceCerts_createDeviceCert_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDeviceCerts_createDeviceCert_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDeviceCerts_createDeviceCert_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDeviceCerts_createDeviceCert_Params) DeviceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapDeviceCerts_createDeviceCert_Params) HasDeviceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDeviceCerts_createDeviceCert_Params) DeviceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapDeviceCerts_createDeviceCert_Params) SetDeviceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapDeviceCerts_createDeviceCert_Params) PubKeyPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapDeviceCerts_createDeviceCert_Params) HasPubKeyPEM() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapDeviceCerts_createDeviceCert_Params) PubKeyPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapDeviceCerts_createDeviceCert_Params) SetPubKeyPEM(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapDeviceCerts_createDeviceCert_Params) ValidityDays() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CapDeviceCerts_createDeviceCert_Params) SetValidityDays(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// CapDeviceCerts_createDeviceCert_Params_List is a list of CapDeviceCerts_createDeviceCert_Params.
type CapDeviceCerts_createDeviceCert_Params_List = capnp.StructList[CapDeviceCerts_createDeviceCert_Params]

// NewCapDeviceCerts_createDeviceCert_Params creates a new list of CapDeviceCerts_createDeviceCert_Params.
func NewCapDeviceCerts_createDeviceCert_Params_List(s *capnp.Segment, sz int32) (CapDeviceCerts_createDeviceCert_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[CapDeviceCerts_createDeviceCert_Params](l), err
}

// CapDeviceCerts_createDeviceCert_Params_Future is a wrapper for a CapDeviceCerts_createDeviceCert_Params promised by a client call.
type CapDeviceCerts_createDeviceCert_Params_Future struct{ *capnp.Future }

func (f CapDeviceCerts_createDeviceCert_Params_Future) Struct() (CapDeviceCerts_createDeviceCert_Params, error) {
	p, err := f.Future.Ptr()
	return CapDeviceCerts_createDeviceCert_Params(p.Struct()), err
}

type CapDeviceCerts_createDeviceCert_Results capnp.Struct

// CapDeviceCerts_createDeviceCert_Results_TypeID is the unique identifier for the type CapDeviceCerts_createDeviceCert_Results.
const CapDeviceCerts_createDeviceCert_Results_TypeID = 0xfed3083ae3a62664

func NewCapDeviceCerts_createDeviceCert_Results(s *capnp.Segment) (CapDeviceCerts_createDeviceCert_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapDeviceCerts_createDeviceCert_Results(st), err
}

func NewRootCapDeviceCerts_createDeviceCert_Results(s *capnp.Segment) (CapDeviceCerts_createDeviceCert_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapDeviceCerts_createDeviceCert_Results(st), err
}

func ReadRootCapDeviceCerts_createDeviceCert_Results(msg *capnp.Message) (CapDeviceCerts_createDeviceCert_Results, error) {
	root, err := msg.Root()
	return CapDeviceCerts_createDeviceCert_Results(root.Struct()), err
}

func (s CapDeviceCerts_createDeviceCert_Results) String() string {
	str, _ := text.Marshal(0xfed3083ae3a62664, capnp.Struct(s))
	return str
}

func (s CapDeviceCerts_createDeviceCert_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDeviceCerts_createDeviceCert_Results) DecodeFromPtr(p capnp.Ptr) CapDeviceCerts_createDeviceCert_Results {
	return CapDeviceCerts_createDeviceCert_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDeviceCerts_createDeviceCert_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDeviceCerts_createDeviceCert_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDeviceCerts_createDeviceCert_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDeviceCerts_createDeviceCert_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDeviceCerts_createDeviceCert_Results) CertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapDeviceCerts_createDeviceCert_Results) HasCertPEM() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDeviceCerts_createDeviceCert_Results) CertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapDeviceCerts_createDeviceCert_Results) SetCertPEM(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapDeviceCerts_createDeviceCert_Results) CaCertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapDeviceCerts_createDeviceCert_Results) HasCaCertPEM() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapDeviceCerts_createDeviceCert_Results) CaCertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapDeviceCerts_createDeviceCert_Results) SetCaCertPEM(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CapDeviceCerts_createDeviceCert_Results_List is a list of CapDeviceCerts_createDeviceCert_Results.
type CapDeviceCerts_createDeviceCert_Results_List = capnp.StructList[CapDeviceCerts_createDeviceCert_Results]

// NewCapDeviceCerts_createDeviceCert_Results creates a new list of CapDeviceCerts_createDeviceCert_Results.
func NewCapDeviceCerts_createDeviceCert_Results_List(s *capnp.Segment, sz int32) (CapDeviceCerts_createDeviceCert_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapDeviceCerts_createDeviceCert_Results](l), err
}

// CapDeviceCerts_createDeviceCert_Results_Future is a wrapper for a CapDeviceCerts_createDeviceCert_Results promised by a client call.
type CapDeviceCerts_createDeviceCert_Results_Future struct{ *capnp.Future }

func (f CapDeviceCerts_createDeviceCert_Results_Future) Struct() (CapDeviceCerts_createDeviceCert_Results, error) {
	p, err := f.Future.Ptr()
	return CapDeviceCerts_createDeviceCert_Results(p.Struct()), err
}

type CapServiceCerts capnp.Client

// CapServiceCerts_TypeID is the unique identifier for the type CapServiceCerts.
const CapServiceCerts_TypeID = 0xfb03fbde72bfd77b

func (c CapServiceCerts) CreateServiceCert(ctx context.Context, params func(CapServiceCerts_createServiceCert_Params) error) (CapServiceCerts_createServiceCert_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfb03fbde72bfd77b,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapServiceCerts",
			MethodName:    "createServiceCert",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapServiceCerts_createServiceCert_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapServiceCerts_createServiceCert_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapServiceCerts) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapServiceCerts) AddRef() CapServiceCerts {
	return CapServiceCerts(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapServiceCerts) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapServiceCerts) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapServiceCerts) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapServiceCerts) DecodeFromPtr(p capnp.Ptr) CapServiceCerts {
	return CapServiceCerts(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapServiceCerts) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapServiceCerts) IsSame(other CapServiceCerts) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapServiceCerts) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapServiceCerts) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapServiceCerts_Server is a CapServiceCerts with a local implementation.
type CapServiceCerts_Server interface {
	CreateServiceCert(context.Context, CapServiceCerts_createServiceCert) error
}

// CapServiceCerts_NewServer creates a new Server from an implementation of CapServiceCerts_Server.
func CapServiceCerts_NewServer(s CapServiceCerts_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapServiceCerts_Methods(nil, s), s, c)
}

// CapServiceCerts_ServerToClient creates a new Client from an implementation of CapServiceCerts_Server.
// The caller is responsible for calling Release on the returned Client.
func CapServiceCerts_ServerToClient(s CapServiceCerts_Server) CapServiceCerts {
	return CapServiceCerts(capnp.NewClient(CapServiceCerts_NewServer(s)))
}

// CapServiceCerts_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapServiceCerts_Methods(methods []server.Method, s CapServiceCerts_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfb03fbde72bfd77b,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapServiceCerts",
			MethodName:    "createServiceCert",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CreateServiceCert(ctx, CapServiceCerts_createServiceCert{call})
		},
	})

	return methods
}

// CapServiceCerts_createServiceCert holds the state for a server call to CapServiceCerts.createServiceCert.
// See server.Call for documentation.
type CapServiceCerts_createServiceCert struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapServiceCerts_createServiceCert) Args() CapServiceCerts_createServiceCert_Params {
	return CapServiceCerts_createServiceCert_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapServiceCerts_createServiceCert) AllocResults() (CapServiceCerts_createServiceCert_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapServiceCerts_createServiceCert_Results(r), err
}

// CapServiceCerts_List is a list of CapServiceCerts.
type CapServiceCerts_List = capnp.CapList[CapServiceCerts]

// NewCapServiceCerts creates a new list of CapServiceCerts.
func NewCapServiceCerts_List(s *capnp.Segment, sz int32) (CapServiceCerts_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapServiceCerts](l), err
}

type CapServiceCerts_createServiceCert_Params capnp.Struct

// CapServiceCerts_createServiceCert_Params_TypeID is the unique identifier for the type CapServiceCerts_createServiceCert_Params.
const CapServiceCerts_createServiceCert_Params_TypeID = 0x9034b47b50ec3828

func NewCapServiceCerts_createServiceCert_Params(s *capnp.Segment) (CapServiceCerts_createServiceCert_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return CapServiceCerts_createServiceCert_Params(st), err
}

func NewRootCapServiceCerts_createServiceCert_Params(s *capnp.Segment) (CapServiceCerts_createServiceCert_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return CapServiceCerts_createServiceCert_Params(st), err
}

func ReadRootCapServiceCerts_createServiceCert_Params(msg *capnp.Message) (CapServiceCerts_createServiceCert_Params, error) {
	root, err := msg.Root()
	return CapServiceCerts_createServiceCert_Params(root.Struct()), err
}

func (s CapServiceCerts_createServiceCert_Params) String() string {
	str, _ := text.Marshal(0x9034b47b50ec3828, capnp.Struct(s))
	return str
}

func (s CapServiceCerts_createServiceCert_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapServiceCerts_createServiceCert_Params) DecodeFromPtr(p capnp.Ptr) CapServiceCerts_createServiceCert_Params {
	return CapServiceCerts_createServiceCert_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapServiceCerts_createServiceCert_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapServiceCerts_createServiceCert_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapServiceCerts_createServiceCert_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapServiceCerts_createServiceCert_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapServiceCerts_createServiceCert_Params) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapServiceCerts_createServiceCert_Params) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapServiceCerts_createServiceCert_Params) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapServiceCerts_createServiceCert_Params) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapServiceCerts_createServiceCert_Params) PubKeyPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapServiceCerts_createServiceCert_Params) HasPubKeyPEM() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapServiceCerts_createServiceCert_Params) PubKeyPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapServiceCerts_createServiceCert_Params) SetPubKeyPEM(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapServiceCerts_createServiceCert_Params) ValidityDays() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CapServiceCerts_createServiceCert_Params) SetValidityDays(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CapServiceCerts_createServiceCert_Params) Names() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s CapServiceCerts_createServiceCert_Params) HasNames() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapServiceCerts_createServiceCert_Params) SetNames(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewNames sets the names field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s CapServiceCerts_createServiceCert_Params) NewNames(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// CapServiceCerts_createServiceCert_Params_List is a list of CapServiceCerts_createServiceCert_Params.
type CapServiceCerts_createServiceCert_Params_List = capnp.StructList[CapServiceCerts_createServiceCert_Params]

// NewCapServiceCerts_createServiceCert_Params creates a new list of CapServiceCerts_createServiceCert_Params.
func NewCapServiceCerts_createServiceCert_Params_List(s *capnp.Segment, sz int32) (CapServiceCerts_createServiceCert_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[CapServiceCerts_createServiceCert_Params](l), err
}

// CapServiceCerts_createServiceCert_Params_Future is a wrapper for a CapServiceCerts_createServiceCert_Params promised by a client call.
type CapServiceCerts_createServiceCert_Params_Future struct{ *capnp.Future }

func (f CapServiceCerts_createServiceCert_Params_Future) Struct() (CapServiceCerts_createServiceCert_Params, error) {
	p, err := f.Future.Ptr()
	return CapServiceCerts_createServiceCert_Params(p.Struct()), err
}

type CapServiceCerts_createServiceCert_Results capnp.Struct

// CapServiceCerts_createServiceCert_Results_TypeID is the unique identifier for the type CapServiceCerts_createServiceCert_Results.
const CapServiceCerts_createServiceCert_Results_TypeID = 0xfadea51c36b495d7

func NewCapServiceCerts_createServiceCert_Results(s *capnp.Segment) (CapServiceCerts_createServiceCert_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapServiceCerts_createServiceCert_Results(st), err
}

func NewRootCapServiceCerts_createServiceCert_Results(s *capnp.Segment) (CapServiceCerts_createServiceCert_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapServiceCerts_createServiceCert_Results(st), err
}

func ReadRootCapServiceCerts_createServiceCert_Results(msg *capnp.Message) (CapServiceCerts_createServiceCert_Results, error) {
	root, err := msg.Root()
	return CapServiceCerts_createServiceCert_Results(root.Struct()), err
}

func (s CapServiceCerts_createServiceCert_Results) String() string {
	str, _ := text.Marshal(0xfadea51c36b495d7, capnp.Struct(s))
	return str
}

func (s CapServiceCerts_createServiceCert_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapServiceCerts_createServiceCert_Results) DecodeFromPtr(p capnp.Ptr) CapServiceCerts_createServiceCert_Results {
	return CapServiceCerts_createServiceCert_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapServiceCerts_createServiceCert_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapServiceCerts_createServiceCert_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapServiceCerts_createServiceCert_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapServiceCerts_createServiceCert_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapServiceCerts_createServiceCert_Results) CertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapServiceCerts_createServiceCert_Results) HasCertPEM() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapServiceCerts_createServiceCert_Results) CertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapServiceCerts_createServiceCert_Results) SetCertPEM(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapServiceCerts_createServiceCert_Results) CaCertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapServiceCerts_createServiceCert_Results) HasCaCertPEM() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapServiceCerts_createServiceCert_Results) CaCertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapServiceCerts_createServiceCert_Results) SetCaCertPEM(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CapServiceCerts_createServiceCert_Results_List is a list of CapServiceCerts_createServiceCert_Results.
type CapServiceCerts_createServiceCert_Results_List = capnp.StructList[CapServiceCerts_createServiceCert_Results]

// NewCapServiceCerts_createServiceCert_Results creates a new list of CapServiceCerts_createServiceCert_Results.
func NewCapServiceCerts_createServiceCert_Results_List(s *capnp.Segment, sz int32) (CapServiceCerts_createServiceCert_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapServiceCerts_createServiceCert_Results](l), err
}

// CapServiceCerts_createServiceCert_Results_Future is a wrapper for a CapServiceCerts_createServiceCert_Results promised by a client call.
type CapServiceCerts_createServiceCert_Results_Future struct{ *capnp.Future }

func (f CapServiceCerts_createServiceCert_Results_Future) Struct() (CapServiceCerts_createServiceCert_Results, error) {
	p, err := f.Future.Ptr()
	return CapServiceCerts_createServiceCert_Results(p.Struct()), err
}

type CapUserCerts capnp.Client

// CapUserCerts_TypeID is the unique identifier for the type CapUserCerts.
const CapUserCerts_TypeID = 0xbf895d6d45760872

func (c CapUserCerts) CreateUserCert(ctx context.Context, params func(CapUserCerts_createUserCert_Params) error) (CapUserCerts_createUserCert_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf895d6d45760872,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapUserCerts",
			MethodName:    "createUserCert",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapUserCerts_createUserCert_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapUserCerts_createUserCert_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapUserCerts) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapUserCerts) AddRef() CapUserCerts {
	return CapUserCerts(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapUserCerts) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapUserCerts) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapUserCerts) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapUserCerts) DecodeFromPtr(p capnp.Ptr) CapUserCerts {
	return CapUserCerts(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapUserCerts) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapUserCerts) IsSame(other CapUserCerts) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapUserCerts) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapUserCerts) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapUserCerts_Server is a CapUserCerts with a local implementation.
type CapUserCerts_Server interface {
	CreateUserCert(context.Context, CapUserCerts_createUserCert) error
}

// CapUserCerts_NewServer creates a new Server from an implementation of CapUserCerts_Server.
func CapUserCerts_NewServer(s CapUserCerts_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapUserCerts_Methods(nil, s), s, c)
}

// CapUserCerts_ServerToClient creates a new Client from an implementation of CapUserCerts_Server.
// The caller is responsible for calling Release on the returned Client.
func CapUserCerts_ServerToClient(s CapUserCerts_Server) CapUserCerts {
	return CapUserCerts(capnp.NewClient(CapUserCerts_NewServer(s)))
}

// CapUserCerts_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapUserCerts_Methods(methods []server.Method, s CapUserCerts_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf895d6d45760872,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapUserCerts",
			MethodName:    "createUserCert",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CreateUserCert(ctx, CapUserCerts_createUserCert{call})
		},
	})

	return methods
}

// CapUserCerts_createUserCert holds the state for a server call to CapUserCerts.createUserCert.
// See server.Call for documentation.
type CapUserCerts_createUserCert struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapUserCerts_createUserCert) Args() CapUserCerts_createUserCert_Params {
	return CapUserCerts_createUserCert_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapUserCerts_createUserCert) AllocResults() (CapUserCerts_createUserCert_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapUserCerts_createUserCert_Results(r), err
}

// CapUserCerts_List is a list of CapUserCerts.
type CapUserCerts_List = capnp.CapList[CapUserCerts]

// NewCapUserCerts creates a new list of CapUserCerts.
func NewCapUserCerts_List(s *capnp.Segment, sz int32) (CapUserCerts_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapUserCerts](l), err
}

type CapUserCerts_createUserCert_Params capnp.Struct

// CapUserCerts_createUserCert_Params_TypeID is the unique identifier for the type CapUserCerts_createUserCert_Params.
const CapUserCerts_createUserCert_Params_TypeID = 0x80ba300a9babc95b

func NewCapUserCerts_createUserCert_Params(s *capnp.Segment) (CapUserCerts_createUserCert_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapUserCerts_createUserCert_Params(st), err
}

func NewRootCapUserCerts_createUserCert_Params(s *capnp.Segment) (CapUserCerts_createUserCert_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapUserCerts_createUserCert_Params(st), err
}

func ReadRootCapUserCerts_createUserCert_Params(msg *capnp.Message) (CapUserCerts_createUserCert_Params, error) {
	root, err := msg.Root()
	return CapUserCerts_createUserCert_Params(root.Struct()), err
}

func (s CapUserCerts_createUserCert_Params) String() string {
	str, _ := text.Marshal(0x80ba300a9babc95b, capnp.Struct(s))
	return str
}

func (s CapUserCerts_createUserCert_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUserCerts_createUserCert_Params) DecodeFromPtr(p capnp.Ptr) CapUserCerts_createUserCert_Params {
	return CapUserCerts_createUserCert_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUserCerts_createUserCert_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUserCerts_createUserCert_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUserCerts_createUserCert_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUserCerts_createUserCert_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapUserCerts_createUserCert_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapUserCerts_createUserCert_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapUserCerts_createUserCert_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapUserCerts_createUserCert_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapUserCerts_createUserCert_Params) PubKeyPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapUserCerts_createUserCert_Params) HasPubKeyPEM() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapUserCerts_createUserCert_Params) PubKeyPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapUserCerts_createUserCert_Params) SetPubKeyPEM(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapUserCerts_createUserCert_Params) ValidityDays() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CapUserCerts_createUserCert_Params) SetValidityDays(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// CapUserCerts_createUserCert_Params_List is a list of CapUserCerts_createUserCert_Params.
type CapUserCerts_createUserCert_Params_List = capnp.StructList[CapUserCerts_createUserCert_Params]

// NewCapUserCerts_createUserCert_Params creates a new list of CapUserCerts_createUserCert_Params.
func NewCapUserCerts_createUserCert_Params_List(s *capnp.Segment, sz int32) (CapUserCerts_createUserCert_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[CapUserCerts_createUserCert_Params](l), err
}

// CapUserCerts_createUserCert_Params_Future is a wrapper for a CapUserCerts_createUserCert_Params promised by a client call.
type CapUserCerts_createUserCert_Params_Future struct{ *capnp.Future }

func (f CapUserCerts_createUserCert_Params_Future) Struct() (CapUserCerts_createUserCert_Params, error) {
	p, err := f.Future.Ptr()
	return CapUserCerts_createUserCert_Params(p.Struct()), err
}

type CapUserCerts_createUserCert_Results capnp.Struct

// CapUserCerts_createUserCert_Results_TypeID is the unique identifier for the type CapUserCerts_createUserCert_Results.
const CapUserCerts_createUserCert_Results_TypeID = 0xaea61579d1d72744

func NewCapUserCerts_createUserCert_Results(s *capnp.Segment) (CapUserCerts_createUserCert_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapUserCerts_createUserCert_Results(st), err
}

func NewRootCapUserCerts_createUserCert_Results(s *capnp.Segment) (CapUserCerts_createUserCert_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapUserCerts_createUserCert_Results(st), err
}

func ReadRootCapUserCerts_createUserCert_Results(msg *capnp.Message) (CapUserCerts_createUserCert_Results, error) {
	root, err := msg.Root()
	return CapUserCerts_createUserCert_Results(root.Struct()), err
}

func (s CapUserCerts_createUserCert_Results) String() string {
	str, _ := text.Marshal(0xaea61579d1d72744, capnp.Struct(s))
	return str
}

func (s CapUserCerts_createUserCert_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUserCerts_createUserCert_Results) DecodeFromPtr(p capnp.Ptr) CapUserCerts_createUserCert_Results {
	return CapUserCerts_createUserCert_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUserCerts_createUserCert_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUserCerts_createUserCert_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUserCerts_createUserCert_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUserCerts_createUserCert_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapUserCerts_createUserCert_Results) CertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapUserCerts_createUserCert_Results) HasCertPEM() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapUserCerts_createUserCert_Results) CertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapUserCerts_createUserCert_Results) SetCertPEM(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapUserCerts_createUserCert_Results) CaCertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapUserCerts_createUserCert_Results) HasCaCertPEM() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapUserCerts_createUserCert_Results) CaCertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapUserCerts_createUserCert_Results) SetCaCertPEM(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CapUserCerts_createUserCert_Results_List is a list of CapUserCerts_createUserCert_Results.
type CapUserCerts_createUserCert_Results_List = capnp.StructList[CapUserCerts_createUserCert_Results]

// NewCapUserCerts_createUserCert_Results creates a new list of CapUserCerts_createUserCert_Results.
func NewCapUserCerts_createUserCert_Results_List(s *capnp.Segment, sz int32) (CapUserCerts_createUserCert_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapUserCerts_createUserCert_Results](l), err
}

// CapUserCerts_createUserCert_Results_Future is a wrapper for a CapUserCerts_createUserCert_Results promised by a client call.
type CapUserCerts_createUserCert_Results_Future struct{ *capnp.Future }

func (f CapUserCerts_createUserCert_Results_Future) Struct() (CapUserCerts_createUserCert_Results, error) {
	p, err := f.Future.Ptr()
	return CapUserCerts_createUserCert_Results(p.Struct()), err
}

type CapVerifyCerts capnp.Client

// CapVerifyCerts_TypeID is the unique identifier for the type CapVerifyCerts.
const CapVerifyCerts_TypeID = 0xa184693083b66c59

func (c CapVerifyCerts) VerifyCert(ctx context.Context, params func(CapVerifyCerts_verifyCert_Params) error) (CapVerifyCerts_verifyCert_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa184693083b66c59,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapVerifyCerts",
			MethodName:    "verifyCert",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapVerifyCerts_verifyCert_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapVerifyCerts_verifyCert_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapVerifyCerts) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapVerifyCerts) AddRef() CapVerifyCerts {
	return CapVerifyCerts(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapVerifyCerts) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapVerifyCerts) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapVerifyCerts) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapVerifyCerts) DecodeFromPtr(p capnp.Ptr) CapVerifyCerts {
	return CapVerifyCerts(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapVerifyCerts) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapVerifyCerts) IsSame(other CapVerifyCerts) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapVerifyCerts) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapVerifyCerts) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapVerifyCerts_Server is a CapVerifyCerts with a local implementation.
type CapVerifyCerts_Server interface {
	VerifyCert(context.Context, CapVerifyCerts_verifyCert) error
}

// CapVerifyCerts_NewServer creates a new Server from an implementation of CapVerifyCerts_Server.
func CapVerifyCerts_NewServer(s CapVerifyCerts_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapVerifyCerts_Methods(nil, s), s, c)
}

// CapVerifyCerts_ServerToClient creates a new Client from an implementation of CapVerifyCerts_Server.
// The caller is responsible for calling Release on the returned Client.
func CapVerifyCerts_ServerToClient(s CapVerifyCerts_Server) CapVerifyCerts {
	return CapVerifyCerts(capnp.NewClient(CapVerifyCerts_NewServer(s)))
}

// CapVerifyCerts_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapVerifyCerts_Methods(methods []server.Method, s CapVerifyCerts_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa184693083b66c59,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapVerifyCerts",
			MethodName:    "verifyCert",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.VerifyCert(ctx, CapVerifyCerts_verifyCert{call})
		},
	})

	return methods
}

// CapVerifyCerts_verifyCert holds the state for a server call to CapVerifyCerts.verifyCert.
// See server.Call for documentation.
type CapVerifyCerts_verifyCert struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapVerifyCerts_verifyCert) Args() CapVerifyCerts_verifyCert_Params {
	return CapVerifyCerts_verifyCert_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapVerifyCerts_verifyCert) AllocResults() (CapVerifyCerts_verifyCert_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapVerifyCerts_verifyCert_Results(r), err
}

// CapVerifyCerts_List is a list of CapVerifyCerts.
type CapVerifyCerts_List = capnp.CapList[CapVerifyCerts]

// NewCapVerifyCerts creates a new list of CapVerifyCerts.
func NewCapVerifyCerts_List(s *capnp.Segment, sz int32) (CapVerifyCerts_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapVerifyCerts](l), err
}

type CapVerifyCerts_verifyCert_Params capnp.Struct

// CapVerifyCerts_verifyCert_Params_TypeID is the unique identifier for the type CapVerifyCerts_verifyCert_Params.
const CapVerifyCerts_verifyCert_Params_TypeID = 0x9a854004bdf77cec

func NewCapVerifyCerts_verifyCert_Params(s *capnp.Segment) (CapVerifyCerts_verifyCert_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapVerifyCerts_verifyCert_Params(st), err
}

func NewRootCapVerifyCerts_verifyCert_Params(s *capnp.Segment) (CapVerifyCerts_verifyCert_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapVerifyCerts_verifyCert_Params(st), err
}

func ReadRootCapVerifyCerts_verifyCert_Params(msg *capnp.Message) (CapVerifyCerts_verifyCert_Params, error) {
	root, err := msg.Root()
	return CapVerifyCerts_verifyCert_Params(root.Struct()), err
}

func (s CapVerifyCerts_verifyCert_Params) String() string {
	str, _ := text.Marshal(0x9a854004bdf77cec, capnp.Struct(s))
	return str
}

func (s CapVerifyCerts_verifyCert_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapVerifyCerts_verifyCert_Params) DecodeFromPtr(p capnp.Ptr) CapVerifyCerts_verifyCert_Params {
	return CapVerifyCerts_verifyCert_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapVerifyCerts_verifyCert_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapVerifyCerts_verifyCert_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapVerifyCerts_verifyCert_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapVerifyCerts_verifyCert_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapVerifyCerts_verifyCert_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapVerifyCerts_verifyCert_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapVerifyCerts_verifyCert_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapVerifyCerts_verifyCert_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapVerifyCerts_verifyCert_Params) CertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapVerifyCerts_verifyCert_Params) HasCertPEM() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapVerifyCerts_verifyCert_Params) CertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapVerifyCerts_verifyCert_Params) SetCertPEM(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CapVerifyCerts_verifyCert_Params_List is a list of CapVerifyCerts_verifyCert_Params.
type CapVerifyCerts_verifyCert_Params_List = capnp.StructList[CapVerifyCerts_verifyCert_Params]

// NewCapVerifyCerts_verifyCert_Params creates a new list of CapVerifyCerts_verifyCert_Params.
func NewCapVerifyCerts_verifyCert_Params_List(s *capnp.Segment, sz int32) (CapVerifyCerts_verifyCert_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapVerifyCerts_verifyCert_Params](l), err
}

// CapVerifyCerts_verifyCert_Params_Future is a wrapper for a CapVerifyCerts_verifyCert_Params promised by a client call.
type CapVerifyCerts_verifyCert_Params_Future struct{ *capnp.Future }

func (f CapVerifyCerts_verifyCert_Params_Future) Struct() (CapVerifyCerts_verifyCert_Params, error) {
	p, err := f.Future.Ptr()
	return CapVerifyCerts_verifyCert_Params(p.Struct()), err
}

type CapVerifyCerts_verifyCert_Results capnp.Struct

// CapVerifyCerts_verifyCert_Results_TypeID is the unique identifier for the type CapVerifyCerts_verifyCert_Results.
const CapVerifyCerts_verifyCert_Results_TypeID = 0x94c029bc0d5d837d

func NewCapVerifyCerts_verifyCert_Results(s *capnp.Segment) (CapVerifyCerts_verifyCert_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapVerifyCerts_verifyCert_Results(st), err
}

func NewRootCapVerifyCerts_verifyCert_Results(s *capnp.Segment) (CapVerifyCerts_verifyCert_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapVerifyCerts_verifyCert_Results(st), err
}

func ReadRootCapVerifyCerts_verifyCert_Results(msg *capnp.Message) (CapVerifyCerts_verifyCert_Results, error) {
	root, err := msg.Root()
	return CapVerifyCerts_verifyCert_Results(root.Struct()), err
}

func (s CapVerifyCerts_verifyCert_Results) String() string {
	str, _ := text.Marshal(0x94c029bc0d5d837d, capnp.Struct(s))
	return str
}

func (s CapVerifyCerts_verifyCert_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapVerifyCerts_verifyCert_Results) DecodeFromPtr(p capnp.Ptr) CapVerifyCerts_verifyCert_Results {
	return CapVerifyCerts_verifyCert_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapVerifyCerts_verifyCert_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapVerifyCerts_verifyCert_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapVerifyCerts_verifyCert_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapVerifyCerts_verifyCert_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapVerifyCerts_verifyCert_Results_List is a list of CapVerifyCerts_verifyCert_Results.
type CapVerifyCerts_verifyCert_Results_List = capnp.StructList[CapVerifyCerts_verifyCert_Results]

// NewCapVerifyCerts_verifyCert_Results creates a new list of CapVerifyCerts_verifyCert_Results.
func NewCapVerifyCerts_verifyCert_Results_List(s *capnp.Segment, sz int32) (CapVerifyCerts_verifyCert_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapVerifyCerts_verifyCert_Results](l), err
}

// CapVerifyCerts_verifyCert_Results_Future is a wrapper for a CapVerifyCerts_verifyCert_Results promised by a client call.
type CapVerifyCerts_verifyCert_Results_Future struct{ *capnp.Future }

func (f CapVerifyCerts_verifyCert_Results_Future) Struct() (CapVerifyCerts_verifyCert_Results, error) {
	p, err := f.Future.Ptr()
	return CapVerifyCerts_verifyCert_Results(p.Struct()), err
}

const schema_cd6ed2180540008c = "x\xda\xbcX}l\x14i\x19\x7f\x9eyg;\xb3\x1f" +
	"\xbd\xde\xeb\xf4\xf4\xee\xbc\xa4\xd8\xe3\x943\xb6\xb4G{" +
	"V\xe2\xa5\xad\xdd\xb6\xc2]\xc9N\xb7%x^=\x86" +
	"\xed \x8b\xbb\xeb\xb2\xbbm\xddR#\x14\x85P\x1b\x03" +
	"\x04\x12RL\xb4\x04\x1a\xc4\xf0Q\x82&\x10\x08\x8aA" +
	"C\x04#\x98\xf2\x15A\xc5 *m\x04#1\xe1k" +
	"\xcc;\xb33;;\xdd\x96\x16\xd4\xff\xba\xef\xfc\xde\xdf" +
	"\xfb<\xcf\xef7\xcf\xfbL+\x8e\xf1u|ea\x91" +
	"\x0f8y\xd0U\xa0}\xf9\xec\x8fwy*\x8e\xaf\x03" +
	"y\x0e\"\x80\x8b\x13\x00\x16L\xb8\x8e \xa0\xf4\xd8u" +
	"\x08Pso\xfaJY\xd7\x1f\xaa7\x02}\x8d\x01\x90" +
	"\x01\x86\x0b\x86\x18`\xb4\xa0\x16P\xfb\xe5n\xf2\xe1\x9f" +
	"\x86k6\xd9\x01c\x06\xe0\x96\x0e\xf8f\xdb7\xf6\xfd" +
	"\xe2\xce\xc7\xbek\x07\xb8\x84m\x0c\xf0\x92\xc0\x00\xf3j" +
	"\xc6\x03k\x8fVm\x01\xf9u=\x08\xc2\x10\x9f\x13n" +
	"2D\x8bp\x1bP\xeb\xe6\xdf\xb8\x1a\xbb\xbfx\xbb\x9d" +
	"\xe2\x1dq@\x07\x88\xfa\x19\x1b:\x0aO\xbc\xf9\xb3\xed" +
	"@K\x11\x80g\xcf\xa3\xe2~\x04^\x1b\xef\xfb\xf7I" +
	"\xbe\xee;C\xc6\x13#\xc1\x0eq7\xdb\x1a\x15{\x00" +
	"5\xdf\xf2+\xdc\x9e\xb6\x81!\xa0\x12\xffx\xb0\xce\xf5" +
	"\xf2\xc5\xd8y\xc0\x05\xe7\xc5\x01\x94n\x89\x02@\xf0\x8f" +
	"\"\xc1\xe0\xb8\xc8!\x80\xf6\xa4\xa5K\x1d\xad\xea\xf9!" +
	"\xc8\xa5\xd9\x82]\x17/2\xbe{\"+X\xf1\x9c\x9d" +
	"?(\xb9\xb6~\xd8\xc1\xb7\xc3\xdd\x8b\xd2\x8f\xdc\x8co" +
	"\x8f\x9b`\xf0\xb0[\xe7\xfbR\xe4\xa7\x1b*\xc2\xdff" +
	"hbC\x0f\xbb?\x82\xd2(CK\x07\xdc\xcd\xd2U" +
	"\xf6\x97\xe6\xff\xd4\xe5\x0b\xe9\x97F\x0e\x02\x9dc\x1d\xfd" +
	"s\xf7qv\xf4\x057Ke`\xd7\xfe\xa6\x91GU" +
	"\xa3\x8e\xa3+=\xaf\xa2T\xefaG\x7f\xdeC0\xf8" +
	"E\x8f~\xf4\xda\xd8\xdb\xf3\x92{?<\xe2@\xd7{" +
	">\x8d\x92\xac\xa3\xdfc\xe8e\x06z\xe8\xf6\xce\xc2\xf9" +
	"[F~\xe2@\xcb\x9e\x85():\xfa\x03\x86^e" +
	"\xa0?>\xb1\xf2\xcc\xdd\xaf6\x9d\xc8MKR<7" +
	"\xa5(\x03/\x08{\x04\x94^\xf1\xb2\xb4<\x9fui" +
	"\xd5\xe9\xef\x9d\xb4\x8b\x8b^\xdd\x1f\xd4\xcb\xc4M\x88\xdd" +
	"\x8d\xd1\x8e\xcd\xa7\x1c5\xaa\xf6r(\xd53\x0a\xe9\x1d" +
	"o\xb3\x14\xd6\xc9\x1e\x7f\xb4\xb8\xc1\xff\xeb\x96\xd3v2" +
	"\xd9\xab\xcb\xad\xe8d\x95\xad-\x03[\xfb\x7fu\xda\x91" +
	"\xc7z\xef[(me\x14\xc1A/\xc1\xe0N\xaf\x9e" +
	"\xc7\xb9S\xb1e\xd7\x07\x0e\x9es\xa0\xb7zKQ\x1a" +
	"\xd6\xd1\xdfg\xe8}\x06zI\xcf\xd2\xa1u\xc7^\xb9" +
	"\xe4\x14\xd3\xcb\xc4\xd4\x03=\xe0m\x96\xae\xeb\x81\xee\xf9" +
	"z\xd7\xfc\xb6}\x7f\xb9\xe4`>\xc3\xe2\x18\xd3\x99\x7f" +
	"\xcb\x98\x7fo0\x0fn\xdc\xfc\x9b\xc5\xff\xfc\xc4\xdf\x1c" +
	"\xe81\xef6\x94&t\xf4_\x19\xfa_\x06\xfa\x83\x87" +
	"W\xc6k\xc4\xc3w\x1c\xe8[,\xea\xfb:\xfa.C" +
	"?2\xd0\x1bc\x0f\xfa\xbc\xf7z\xffa/\xd9}\xaf" +
	"\xfe\x02\xbb|\xacdg\x0f\x1d\xec\xc3\xaf\xf9\x1e\xd8\x01" +
	"o\xf8\xfa\x19\xa0R\x07\\\xdeq\xf4\xed\xd7\xf6\xdex" +
	"\x00\xf4u\xcb\x98\xed\xbe\xbf3@\xd8\xc7\x8c\xb9\xf6\xf2" +
	"\xa9\xc4\x8d\x87\xe4\xa1\xa30g}\xaf\xa2t\xd5\xc7\x0a" +
	"3\xe6k\x96\\\x85\xac0\x9d\x9f\x1c\xf9\xf3B\xf1w" +
	"O\xec/\xec\x84\xef\x1a#\xc3\xc2\x1e(\xd3Vu\xad" +
	"P\xe2\xe1\xf9\x0d.5\x91J\x96\x87\x94x,\xbe\xb0" +
	"A\x89\xb7'\xd5D\x83\xb1\x94P\x95\x94j\xfe\x9e\x1b" +
	"(Q\x12J4)\xfb\x08\x0f\xc0#\x00m\\\x0c " +
	"\xfb\x09\xca\x01\x0e)b1{\x93iK+\x80\xfc\x1e" +
	"Ay\x19\x87\xc8\x15#\x87H\xdbW\x03\xc8m\x04\xe5" +
	"\xe5\x1cj\xa1HX\x8d\xa5\x16\xf9\x01\x00}\xc0\xa1\x0f" +
	"P\x8bw\xadxWM\x07\x1a\x01[\xac\xb5n%\x12" +
	"\xee\x0c\xa7\xd2P\xe4W\xd2I\xe4\x81C\x1ep\xaa\xb0" +
	"\x1b\xcc\x9fA5\xd1\x1d\x0e\xa9\xfa\xef\xb9\x01%\xa1\x90" +
	"hR\xe6\xad\x98\x0bY\xcc>\x82\xf2\xcbS\x84\xf24" +
	"\xfe\xa5j\"\xbc2m\xd0\xb7\xaa\xc9\xae\x08I\xe5\xf0" +
	"\x97\x02\xc8\"A\xb9\x98C!\xa4\xc4\x91f{\x13 " +
	"\xd2\x19\x9c\xe0Ws\x13\x88\xe23%P\x90Ko\xaf" +
	"KFZ\xdb\x12;H`\xea\xbeh\x1d\xa40!\x97" +
	"\x13\x94#6u\xc3lq\x15A9\x95Uw\x0dS" +
	"7NP\xee\xe3\x90\x12\xae\x18\x09\x00M\xbf\x05 \xa7" +
	"\x08\xca[8\xd4\x92\xc6A\x8b\x00\xfd\xcf yIL" +
	"\x89\xaaI|\x010@P\xc7\xbe0\x83*Z>6" +
	"TJ%\x01\xa6\x97\xc9j\x8f\xd3\xcbd\xd3\xbf\xbc\xdb" +
	"\xfa\x9b\x1dR\xc4N\x99\xe56\xb3\xec\xa2\x15\xd9\x9bL" +
	"\xdfy\x04\xe5*[\xd9+\xbf\x00 \x7f\x86\xa0\\\x93" +
	"_\xf4o\x85\xd4D*\xd0\xd82\xad\x8b;\xd5\x95J" +
	"W$\x95\xb5\xd7\xd2L\xb9Y\xb1\x01\x02\x88\xac\xe2\x95" +
	"|\x14\xa7v\x91\xcd\x9b\x19\x13eW,\xb3>o\x87" +
	"\xe8\xd4)\x9f\xbbC\xf0\x93s7Mad^k\xa4" +
	"\x9e?q2\x95~\xc86\xc8<q\x01XS\x11\x9a" +
	"\x83\x13\xa5\xef\x03G\xdd\x82fj\x0c$\x91\xaa\xc3\x00" +
	"\xe2\xac\xfbmk\xad\xe1[\xbb7\x98\x0d\xe6\x12\x94+" +
	"l\xe5,k\xcdzc\x92\x0fBJ\x83\xbeb/[" +
	"\xbe\x0c\xd9\xbeL;X\xa2\x90\xa8\xcajb\xe0\x81\xe2" +
	"\x0a\x8d=f/1\x08\xe1\x90\x9a\x97 S\xe0\x06\xfd" +
	"\xbc\xa2\xa6p$\x97\xe2\xfdL$\xe5q j4\x7f" +
	"\x08J|\x89\x12\xcd4\xa5Z\xc3c9\x1c\xfd\x9a\xd9" +
	"\xde\xf9\x8c\x05\xc1\xe4q\xf6\x00\xc1\xd8+\xbf\xa8\xabd" +
	"N\xceh^\xd1tM/p4,`v.Gs" +
	"\xe2\xa1\x1d\xfd\xc0\xd1v\x019\xeb\xc2Fsn\xa6\x8b" +
	"V\x03G\xeb\x05$\xd6\xb4\x85\xe6\xdcN\xab\x19g\x99" +
	"\xa0\x99\x1d\x1c29\xd4\xa1\x157\x9aq\x1bk\xba\xd4" +
	"P\x94\x05\xe9&\x83\xdatf\xdf4\xae\xc9{\x1d=" +
	"\xc7eA\xa60%d\xbdn~\xe3\xa09?S\xda" +
	"kx\xdd4.\xd4\x1a\xbbf\x16y\xceE\xcdz\xb4" +
	"\x10y\xdaMj\xcd?\x8e\x16\x9d\xc7FF[*\x99" +
	"\xec\xa2\xdeI\x02M\xef\xe7w\xd5t\x93\xe0\xb4s\xab" +
	"\x16b\x0f\xca\xe3*`t\xaa\"f;\xa3\xbde\x98" +
	"_>h\x0eh\x94\x0e\x00G\x0b\xcd2\xfaU4\xb7" +
	"\x01\xe4V2O\x9a\x86\xfcS\xa5\x99\xe3\xa7\xe9\xee\x04" +
	"\x9b\x16\xb6K\x01g\xd0\x1a3q\x18\x86\x11\x9cQ\xac" +
	"v\xd8|V\xb3\xcf\xcc\xa6+\xebca\x86\xd3Uv" +
	".\xd0_\x97$\xfc\xefg+s6\xf8\xbft\xf2\x9c" +
	"pH\xca\xe6<\xf3\xff\x03h~gP\xba\xcd\xee\xbc" +
	"\xa0\x8a\xe6>t\xbc\xc3\xb3\x99\x02,\xd9\xfe\xcb\xd9\xfe" +
	"'\x00\x00\xff\xff[\x90\xdcp"

func init() {
	schemas.Register(schema_cd6ed2180540008c,
		0x80ba300a9babc95b,
		0x8635df752d5e8709,
		0x8738a1e15f03a2c6,
		0x8b17ebc3a878547d,
		0x9034b47b50ec3828,
		0x944af56ed9250476,
		0x94c029bc0d5d837d,
		0x9a854004bdf77cec,
		0x9a8a54a402d8600c,
		0xa07734b165754dfe,
		0xa181da1f9f982014,
		0xa184693083b66c59,
		0xaea61579d1d72744,
		0xb134fca646aa9b8a,
		0xb25fa57328366e7b,
		0xb5a6902f0d98e79a,
		0xbc4667f0c566ed1b,
		0xbd8e7935ff05370a,
		0xbf895d6d45760872,
		0xc24dcb44431416fd,
		0xc2c782918a4d5231,
		0xccae8add586ebfcc,
		0xd619b9809a56774e,
		0xd6e6a8542f756fa4,
		0xe921f24ace89868c,
		0xebb00838ecd8fb5c,
		0xef7af10b7cfa6e86,
		0xfa0c6b017caeafc9,
		0xfadea51c36b495d7,
		0xfb03fbde72bfd77b,
		0xfed3083ae3a62664)
}

// Code generated by capnpc-go. DO NOT EDIT.

package hubapi

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

// Constants defined in Certs.capnp.
const (
	CertServiceName                = "certservice"
	DefaultCaCertFile              = "caCert.pem"
	DefaultCaKeyFile               = "caKey.pem"
	DefaultServiceCertValidityDays = int32(30)
	DefaultUserCertValidityDays    = int32(30)
	DefaultDeviceCertValidityDays  = int32(30)
	CapNameDeviceCerts             = "capDeviceCerts"
	CapNameServiceCerts            = "capServiceCerts"
	CapNameUserCerts               = "capUserCerts"
	CapNameVerifyCerts             = "capVerifyCerts"
)

type CapCerts capnp.Client

// CapCerts_TypeID is the unique identifier for the type CapCerts.
const CapCerts_TypeID = 0xbc4667f0c566ed1b

func (c CapCerts) CapDeviceCerts(ctx context.Context, params func(CapCerts_capDeviceCerts_Params) error) (CapCerts_capDeviceCerts_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbc4667f0c566ed1b,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapCerts",
			MethodName:    "capDeviceCerts",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapCerts_capDeviceCerts_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapCerts_capDeviceCerts_Results_Future{Future: ans.Future()}, release
}
func (c CapCerts) CapServiceCerts(ctx context.Context, params func(CapCerts_capServiceCerts_Params) error) (CapCerts_capServiceCerts_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbc4667f0c566ed1b,
			MethodID:      1,
			InterfaceName: "hubapi/Certs.capnp:CapCerts",
			MethodName:    "capServiceCerts",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapCerts_capServiceCerts_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapCerts_capServiceCerts_Results_Future{Future: ans.Future()}, release
}
func (c CapCerts) CapUserCerts(ctx context.Context, params func(CapCerts_capUserCerts_Params) error) (CapCerts_capUserCerts_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbc4667f0c566ed1b,
			MethodID:      2,
			InterfaceName: "hubapi/Certs.capnp:CapCerts",
			MethodName:    "capUserCerts",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapCerts_capUserCerts_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapCerts_capUserCerts_Results_Future{Future: ans.Future()}, release
}
func (c CapCerts) CapVerifyCerts(ctx context.Context, params func(CapCerts_capVerifyCerts_Params) error) (CapCerts_capVerifyCerts_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbc4667f0c566ed1b,
			MethodID:      3,
			InterfaceName: "hubapi/Certs.capnp:CapCerts",
			MethodName:    "capVerifyCerts",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapCerts_capVerifyCerts_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapCerts_capVerifyCerts_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapCerts) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapCerts) AddRef() CapCerts {
	return CapCerts(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapCerts) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapCerts) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapCerts) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapCerts) DecodeFromPtr(p capnp.Ptr) CapCerts {
	return CapCerts(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapCerts) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapCerts) IsSame(other CapCerts) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapCerts) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapCerts) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapCerts_Server is a CapCerts with a local implementation.
type CapCerts_Server interface {
	CapDeviceCerts(context.Context, CapCerts_capDeviceCerts) error

	CapServiceCerts(context.Context, CapCerts_capServiceCerts) error

	CapUserCerts(context.Context, CapCerts_capUserCerts) error

	CapVerifyCerts(context.Context, CapCerts_capVerifyCerts) error
}

// CapCerts_NewServer creates a new Server from an implementation of CapCerts_Server.
func CapCerts_NewServer(s CapCerts_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapCerts_Methods(nil, s), s, c)
}

// CapCerts_ServerToClient creates a new Client from an implementation of CapCerts_Server.
// The caller is responsible for calling Release on the returned Client.
func CapCerts_ServerToClient(s CapCerts_Server) CapCerts {
	return CapCerts(capnp.NewClient(CapCerts_NewServer(s)))
}

// CapCerts_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapCerts_Methods(methods []server.Method, s CapCerts_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbc4667f0c566ed1b,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapCerts",
			MethodName:    "capDeviceCerts",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapDeviceCerts(ctx, CapCerts_capDeviceCerts{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbc4667f0c566ed1b,
			MethodID:      1,
			InterfaceName: "hubapi/Certs.capnp:CapCerts",
			MethodName:    "capServiceCerts",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapServiceCerts(ctx, CapCerts_capServiceCerts{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbc4667f0c566ed1b,
			MethodID:      2,
			InterfaceName: "hubapi/Certs.capnp:CapCerts",
			MethodName:    "capUserCerts",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapUserCerts(ctx, CapCerts_capUserCerts{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbc4667f0c566ed1b,
			MethodID:      3,
			InterfaceName: "hubapi/Certs.capnp:CapCerts",
			MethodName:    "capVerifyCerts",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapVerifyCerts(ctx, CapCerts_capVerifyCerts{call})
		},
	})

	return methods
}

// CapCerts_capDeviceCerts holds the state for a server call to CapCerts.capDeviceCerts.
// See server.Call for documentation.
type CapCerts_capDeviceCerts struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapCerts_capDeviceCerts) Args() CapCerts_capDeviceCerts_Params {
	return CapCerts_capDeviceCerts_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapCerts_capDeviceCerts) AllocResults() (CapCerts_capDeviceCerts_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capDeviceCerts_Results(r), err
}

// CapCerts_capServiceCerts holds the state for a server call to CapCerts.capServiceCerts.
// See server.Call for documentation.
type CapCerts_capServiceCerts struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapCerts_capServiceCerts) Args() CapCerts_capServiceCerts_Params {
	return CapCerts_capServiceCerts_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapCerts_capServiceCerts) AllocResults() (CapCerts_capServiceCerts_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capServiceCerts_Results(r), err
}

// CapCerts_capUserCerts holds the state for a server call to CapCerts.capUserCerts.
// See server.Call for documentation.
type CapCerts_capUserCerts struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapCerts_capUserCerts) Args() CapCerts_capUserCerts_Params {
	return CapCerts_capUserCerts_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapCerts_capUserCerts) AllocResults() (CapCerts_capUserCerts_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capUserCerts_Results(r), err
}

// CapCerts_capVerifyCerts holds the state for a server call to CapCerts.capVerifyCerts.
// See server.Call for documentation.
type CapCerts_capVerifyCerts struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapCerts_capVerifyCerts) Args() CapCerts_capVerifyCerts_Params {
	return CapCerts_capVerifyCerts_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapCerts_capVerifyCerts) AllocResults() (CapCerts_capVerifyCerts_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capVerifyCerts_Results(r), err
}

// CapCerts_List is a list of CapCerts.
type CapCerts_List = capnp.CapList[CapCerts]

// NewCapCerts creates a new list of CapCerts.
func NewCapCerts_List(s *capnp.Segment, sz int32) (CapCerts_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapCerts](l), err
}

type CapCerts_capDeviceCerts_Params capnp.Struct

// CapCerts_capDeviceCerts_Params_TypeID is the unique identifier for the type CapCerts_capDeviceCerts_Params.
const CapCerts_capDeviceCerts_Params_TypeID = 0x8b17ebc3a878547d

func NewCapCerts_capDeviceCerts_Params(s *capnp.Segment) (CapCerts_capDeviceCerts_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capDeviceCerts_Params(st), err
}

func NewRootCapCerts_capDeviceCerts_Params(s *capnp.Segment) (CapCerts_capDeviceCerts_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capDeviceCerts_Params(st), err
}

func ReadRootCapCerts_capDeviceCerts_Params(msg *capnp.Message) (CapCerts_capDeviceCerts_Params, error) {
	root, err := msg.Root()
	return CapCerts_capDeviceCerts_Params(root.Struct()), err
}

func (s CapCerts_capDeviceCerts_Params) String() string {
	str, _ := text.Marshal(0x8b17ebc3a878547d, capnp.Struct(s))
	return str
}

func (s CapCerts_capDeviceCerts_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapCerts_capDeviceCerts_Params) DecodeFromPtr(p capnp.Ptr) CapCerts_capDeviceCerts_Params {
	return CapCerts_capDeviceCerts_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapCerts_capDeviceCerts_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapCerts_capDeviceCerts_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapCerts_capDeviceCerts_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapCerts_capDeviceCerts_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapCerts_capDeviceCerts_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapCerts_capDeviceCerts_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapCerts_capDeviceCerts_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapCerts_capDeviceCerts_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapCerts_capDeviceCerts_Params_List is a list of CapCerts_capDeviceCerts_Params.
type CapCerts_capDeviceCerts_Params_List = capnp.StructList[CapCerts_capDeviceCerts_Params]

// NewCapCerts_capDeviceCerts_Params creates a new list of CapCerts_capDeviceCerts_Params.
func NewCapCerts_capDeviceCerts_Params_List(s *capnp.Segment, sz int32) (CapCerts_capDeviceCerts_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapCerts_capDeviceCerts_Params](l), err
}

// CapCerts_capDeviceCerts_Params_Future is a wrapper for a CapCerts_capDeviceCerts_Params promised by a client call.
type CapCerts_capDeviceCerts_Params_Future struct{ *capnp.Future }

func (f CapCerts_capDeviceCerts_Params_Future) Struct() (CapCerts_capDeviceCerts_Params, error) {
	p, err := f.Future.Ptr()
	return CapCerts_capDeviceCerts_Params(p.Struct()), err
}

type CapCerts_capDeviceCerts_Results capnp.Struct

// CapCerts_capDeviceCerts_Results_TypeID is the unique identifier for the type CapCerts_capDeviceCerts_Results.
const CapCerts_capDeviceCerts_Results_TypeID = 0xef7af10b7cfa6e86

func NewCapCerts_capDeviceCerts_Results(s *capnp.Segment) (CapCerts_capDeviceCerts_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capDeviceCerts_Results(st), err
}

func NewRootCapCerts_capDeviceCerts_Results(s *capnp.Segment) (CapCerts_capDeviceCerts_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capDeviceCerts_Results(st), err
}

func ReadRootCapCerts_capDeviceCerts_Results(msg *capnp.Message) (CapCerts_capDeviceCerts_Results, error) {
	root, err := msg.Root()
	return CapCerts_capDeviceCerts_Results(root.Struct()), err
}

func (s CapCerts_capDeviceCerts_Results) String() string {
	str, _ := text.Marshal(0xef7af10b7cfa6e86, capnp.Struct(s))
	return str
}

func (s CapCerts_capDeviceCerts_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapCerts_capDeviceCerts_Results) DecodeFromPtr(p capnp.Ptr) CapCerts_capDeviceCerts_Results {
	return CapCerts_capDeviceCerts_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapCerts_capDeviceCerts_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapCerts_capDeviceCerts_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapCerts_capDeviceCerts_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapCerts_capDeviceCerts_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapCerts_capDeviceCerts_Results) Cap() CapDeviceCerts {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapDeviceCerts(p.Interface().Client())
}

func (s CapCerts_capDeviceCerts_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapCerts_capDeviceCerts_Results) SetCap(v CapDeviceCerts) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapCerts_capDeviceCerts_Results_List is a list of CapCerts_capDeviceCerts_Results.
type CapCerts_capDeviceCerts_Results_List = capnp.StructList[CapCerts_capDeviceCerts_Results]

// NewCapCerts_capDeviceCerts_Results creates a new list of CapCerts_capDeviceCerts_Results.
func NewCapCerts_capDeviceCerts_Results_List(s *capnp.Segment, sz int32) (CapCerts_capDeviceCerts_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapCerts_capDeviceCerts_Results](l), err
}

// CapCerts_capDeviceCerts_Results_Future is a wrapper for a CapCerts_capDeviceCerts_Results promised by a client call.
type CapCerts_capDeviceCerts_Results_Future struct{ *capnp.Future }

func (f CapCerts_capDeviceCerts_Results_Future) Struct() (CapCerts_capDeviceCerts_Results, error) {
	p, err := f.Future.Ptr()
	return CapCerts_capDeviceCerts_Results(p.Struct()), err
}
func (p CapCerts_capDeviceCerts_Results_Future) Cap() CapDeviceCerts {
	return CapDeviceCerts(p.Future.Field(0, nil).Client())
}

type CapCerts_capServiceCerts_Params capnp.Struct

// CapCerts_capServiceCerts_Params_TypeID is the unique identifier for the type CapCerts_capServiceCerts_Params.
const CapCerts_capServiceCerts_Params_TypeID = 0x8635df752d5e8709

func NewCapCerts_capServiceCerts_Params(s *capnp.Segment) (CapCerts_capServiceCerts_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capServiceCerts_Params(st), err
}

func NewRootCapCerts_capServiceCerts_Params(s *capnp.Segment) (CapCerts_capServiceCerts_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capServiceCerts_Params(st), err
}

func ReadRootCapCerts_capServiceCerts_Params(msg *capnp.Message) (CapCerts_capServiceCerts_Params, error) {
	root, err := msg.Root()
	return CapCerts_capServiceCerts_Params(root.Struct()), err
}

func (s CapCerts_capServiceCerts_Params) String() string {
	str, _ := text.Marshal(0x8635df752d5e8709, capnp.Struct(s))
	return str
}

func (s CapCerts_capServiceCerts_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapCerts_capServiceCerts_Params) DecodeFromPtr(p capnp.Ptr) CapCerts_capServiceCerts_Params {
	return CapCerts_capServiceCerts_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapCerts_capServiceCerts_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapCerts_capServiceCerts_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapCerts_capServiceCerts_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapCerts_capServiceCerts_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapCerts_capServiceCerts_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapCerts_capServiceCerts_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapCerts_capServiceCerts_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapCerts_capServiceCerts_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapCerts_capServiceCerts_Params_List is a list of CapCerts_capServiceCerts_Params.
type CapCerts_capServiceCerts_Params_List = capnp.StructList[CapCerts_capServiceCerts_Params]

// NewCapCerts_capServiceCerts_Params creates a new list of CapCerts_capServiceCerts_Params.
func NewCapCerts_capServiceCerts_Params_List(s *capnp.Segment, sz int32) (CapCerts_capServiceCerts_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapCerts_capServiceCerts_Params](l), err
}

// CapCerts_capServiceCerts_Params_Future is a wrapper for a CapCerts_capServiceCerts_Params promised by a client call.
type CapCerts_capServiceCerts_Params_Future struct{ *capnp.Future }

func (f CapCerts_capServiceCerts_Params_Future) Struct() (CapCerts_capServiceCerts_Params, error) {
	p, err := f.Future.Ptr()
	return CapCerts_capServiceCerts_Params(p.Struct()), err
}

type CapCerts_capServiceCerts_Results capnp.Struct

// CapCerts_capServiceCerts_Results_TypeID is the unique identifier for the type CapCerts_capServiceCerts_Results.
const CapCerts_capServiceCerts_Results_TypeID = 0xc24dcb44431416fd

func NewCapCerts_capServiceCerts_Results(s *capnp.Segment) (CapCerts_capServiceCerts_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capServiceCerts_Results(st), err
}

func NewRootCapCerts_capServiceCerts_Results(s *capnp.Segment) (CapCerts_capServiceCerts_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capServiceCerts_Results(st), err
}

func ReadRootCapCerts_capServiceCerts_Results(msg *capnp.Message) (CapCerts_capServiceCerts_Results, error) {
	root, err := msg.Root()
	return CapCerts_capServiceCerts_Results(root.Struct()), err
}

func (s CapCerts_capServiceCerts_Results) String() string {
	str, _ := text.Marshal(0xc24dcb44431416fd, capnp.Struct(s))
	return str
}

func (s CapCerts_capServiceCerts_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapCerts_capServiceCerts_Results) DecodeFromPtr(p capnp.Ptr) CapCerts_capServiceCerts_Results {
	return CapCerts_capServiceCerts_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapCerts_capServiceCerts_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapCerts_capServiceCerts_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapCerts_capServiceCerts_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapCerts_capServiceCerts_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapCerts_capServiceCerts_Results) Cap() CapServiceCerts {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapServiceCerts(p.Interface().Client())
}

func (s CapCerts_capServiceCerts_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapCerts_capServiceCerts_Results) SetCap(v CapServiceCerts) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapCerts_capServiceCerts_Results_List is a list of CapCerts_capServiceCerts_Results.
type CapCerts_capServiceCerts_Results_List = capnp.StructList[CapCerts_capServiceCerts_Results]

// NewCapCerts_capServiceCerts_Results creates a new list of CapCerts_capServiceCerts_Results.
func NewCapCerts_capServiceCerts_Results_List(s *capnp.Segment, sz int32) (CapCerts_capServiceCerts_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapCerts_capServiceCerts_Results](l), err
}

// CapCerts_capServiceCerts_Results_Future is a wrapper for a CapCerts_capServiceCerts_Results promised by a client call.
type CapCerts_capServiceCerts_Results_Future struct{ *capnp.Future }

func (f CapCerts_capServiceCerts_Results_Future) Struct() (CapCerts_capServiceCerts_Results, error) {
	p, err := f.Future.Ptr()
	return CapCerts_capServiceCerts_Results(p.Struct()), err
}
func (p CapCerts_capServiceCerts_Results_Future) Cap() CapServiceCerts {
	return CapServiceCerts(p.Future.Field(0, nil).Client())
}

type CapCerts_capUserCerts_Params capnp.Struct

// CapCerts_capUserCerts_Params_TypeID is the unique identifier for the type CapCerts_capUserCerts_Params.
const CapCerts_capUserCerts_Params_TypeID = 0xfa0c6b017caeafc9

func NewCapCerts_capUserCerts_Params(s *capnp.Segment) (CapCerts_capUserCerts_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capUserCerts_Params(st), err
}

func NewRootCapCerts_capUserCerts_Params(s *capnp.Segment) (CapCerts_capUserCerts_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capUserCerts_Params(st), err
}

func ReadRootCapCerts_capUserCerts_Params(msg *capnp.Message) (CapCerts_capUserCerts_Params, error) {
	root, err := msg.Root()
	return CapCerts_capUserCerts_Params(root.Struct()), err
}

func (s CapCerts_capUserCerts_Params) String() string {
	str, _ := text.Marshal(0xfa0c6b017caeafc9, capnp.Struct(s))
	return str
}

func (s CapCerts_capUserCerts_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapCerts_capUserCerts_Params) DecodeFromPtr(p capnp.Ptr) CapCerts_capUserCerts_Params {
	return CapCerts_capUserCerts_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapCerts_capUserCerts_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapCerts_capUserCerts_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapCerts_capUserCerts_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapCerts_capUserCerts_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapCerts_capUserCerts_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapCerts_capUserCerts_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapCerts_capUserCerts_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapCerts_capUserCerts_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapCerts_capUserCerts_Params_List is a list of CapCerts_capUserCerts_Params.
type CapCerts_capUserCerts_Params_List = capnp.StructList[CapCerts_capUserCerts_Params]

// NewCapCerts_capUserCerts_Params creates a new list of CapCerts_capUserCerts_Params.
func NewCapCerts_capUserCerts_Params_List(s *capnp.Segment, sz int32) (CapCerts_capUserCerts_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapCerts_capUserCerts_Params](l), err
}

// CapCerts_capUserCerts_Params_Future is a wrapper for a CapCerts_capUserCerts_Params promised by a client call.
type CapCerts_capUserCerts_Params_Future struct{ *capnp.Future }

func (f CapCerts_capUserCerts_Params_Future) Struct() (CapCerts_capUserCerts_Params, error) {
	p, err := f.Future.Ptr()
	return CapCerts_capUserCerts_Params(p.Struct()), err
}

type CapCerts_capUserCerts_Results capnp.Struct

// CapCerts_capUserCerts_Results_TypeID is the unique identifier for the type CapCerts_capUserCerts_Results.
const CapCerts_capUserCerts_Results_TypeID = 0x944af56ed9250476

func NewCapCerts_capUserCerts_Results(s *capnp.Segment) (CapCerts_capUserCerts_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capUserCerts_Results(st), err
}

func NewRootCapCerts_capUserCerts_Results(s *capnp.Segment) (CapCerts_capUserCerts_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capUserCerts_Results(st), err
}

func ReadRootCapCerts_capUserCerts_Results(msg *capnp.Message) (CapCerts_capUserCerts_Results, error) {
	root, err := msg.Root()
	return CapCerts_capUserCerts_Results(root.Struct()), err
}

func (s CapCerts_capUserCerts_Results) String() string {
	str, _ := text.Marshal(0x944af56ed9250476, capnp.Struct(s))
	return str
}

func (s CapCerts_capUserCerts_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapCerts_capUserCerts_Results) DecodeFromPtr(p capnp.Ptr) CapCerts_capUserCerts_Results {
	return CapCerts_capUserCerts_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapCerts_capUserCerts_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapCerts_capUserCerts_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapCerts_capUserCerts_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapCerts_capUserCerts_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapCerts_capUserCerts_Results) Cap() CapUserCerts {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapUserCerts(p.Interface().Client())
}

func (s CapCerts_capUserCerts_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapCerts_capUserCerts_Results) SetCap(v CapUserCerts) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapCerts_capUserCerts_Results_List is a list of CapCerts_capUserCerts_Results.
type CapCerts_capUserCerts_Results_List = capnp.StructList[CapCerts_capUserCerts_Results]

// NewCapCerts_capUserCerts_Results creates a new list of CapCerts_capUserCerts_Results.
func NewCapCerts_capUserCerts_Results_List(s *capnp.Segment, sz int32) (CapCerts_capUserCerts_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapCerts_capUserCerts_Results](l), err
}

// CapCerts_capUserCerts_Results_Future is a wrapper for a CapCerts_capUserCerts_Results promised by a client call.
type CapCerts_capUserCerts_Results_Future struct{ *capnp.Future }

func (f CapCerts_capUserCerts_Results_Future) Struct() (CapCerts_capUserCerts_Results, error) {
	p, err := f.Future.Ptr()
	return CapCerts_capUserCerts_Results(p.Struct()), err
}
func (p CapCerts_capUserCerts_Results_Future) Cap() CapUserCerts {
	return CapUserCerts(p.Future.Field(0, nil).Client())
}

type CapCerts_capVerifyCerts_Params capnp.Struct

// CapCerts_capVerifyCerts_Params_TypeID is the unique identifier for the type CapCerts_capVerifyCerts_Params.
const CapCerts_capVerifyCerts_Params_TypeID = 0xbd8e7935ff05370a

func NewCapCerts_capVerifyCerts_Params(s *capnp.Segment) (CapCerts_capVerifyCerts_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capVerifyCerts_Params(st), err
}

func NewRootCapCerts_capVerifyCerts_Params(s *capnp.Segment) (CapCerts_capVerifyCerts_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capVerifyCerts_Params(st), err
}

func ReadRootCapCerts_capVerifyCerts_Params(msg *capnp.Message) (CapCerts_capVerifyCerts_Params, error) {
	root, err := msg.Root()
	return CapCerts_capVerifyCerts_Params(root.Struct()), err
}

func (s CapCerts_capVerifyCerts_Params) String() string {
	str, _ := text.Marshal(0xbd8e7935ff05370a, capnp.Struct(s))
	return str
}

func (s CapCerts_capVerifyCerts_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapCerts_capVerifyCerts_Params) DecodeFromPtr(p capnp.Ptr) CapCerts_capVerifyCerts_Params {
	return CapCerts_capVerifyCerts_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapCerts_capVerifyCerts_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapCerts_capVerifyCerts_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapCerts_capVerifyCerts_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapCerts_capVerifyCerts_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapCerts_capVerifyCerts_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapCerts_capVerifyCerts_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapCerts_capVerifyCerts_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapCerts_capVerifyCerts_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapCerts_capVerifyCerts_Params_List is a list of CapCerts_capVerifyCerts_Params.
type CapCerts_capVerifyCerts_Params_List = capnp.StructList[CapCerts_capVerifyCerts_Params]

// NewCapCerts_capVerifyCerts_Params creates a new list of CapCerts_capVerifyCerts_Params.
func NewCapCerts_capVerifyCerts_Params_List(s *capnp.Segment, sz int32) (CapCerts_capVerifyCerts_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapCerts_capVerifyCerts_Params](l), err
}

// CapCerts_capVerifyCerts_Params_Future is a wrapper for a CapCerts_capVerifyCerts_Params promised by a client call.
type CapCerts_capVerifyCerts_Params_Future struct{ *capnp.Future }

func (f CapCerts_capVerifyCerts_Params_Future) Struct() (CapCerts_capVerifyCerts_Params, error) {
	p, err := f.Future.Ptr()
	return CapCerts_capVerifyCerts_Params(p.Struct()), err
}

type CapCerts_capVerifyCerts_Results capnp.Struct

// CapCerts_capVerifyCerts_Results_TypeID is the unique identifier for the type CapCerts_capVerifyCerts_Results.
const CapCerts_capVerifyCerts_Results_TypeID = 0x8738a1e15f03a2c6

func NewCapCerts_capVerifyCerts_Results(s *capnp.Segment) (CapCerts_capVerifyCerts_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capVerifyCerts_Results(st), err
}

func NewRootCapCerts_capVerifyCerts_Results(s *capnp.Segment) (CapCerts_capVerifyCerts_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapCerts_capVerifyCerts_Results(st), err
}

func ReadRootCapCerts_capVerifyCerts_Results(msg *capnp.Message) (CapCerts_capVerifyCerts_Results, error) {
	root, err := msg.Root()
	return CapCerts_capVerifyCerts_Results(root.Struct()), err
}

func (s CapCerts_capVerifyCerts_Results) String() string {
	str, _ := text.Marshal(0x8738a1e15f03a2c6, capnp.Struct(s))
	return str
}

func (s CapCerts_capVerifyCerts_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapCerts_capVerifyCerts_Results) DecodeFromPtr(p capnp.Ptr) CapCerts_capVerifyCerts_Results {
	return CapCerts_capVerifyCerts_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapCerts_capVerifyCerts_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapCerts_capVerifyCerts_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapCerts_capVerifyCerts_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapCerts_capVerifyCerts_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapCerts_capVerifyCerts_Results) Cap() CapVerifyCerts {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapVerifyCerts(p.Interface().Client())
}

func (s CapCerts_capVerifyCerts_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapCerts_capVerifyCerts_Results) SetCap(v CapVerifyCerts) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapCerts_capVerifyCerts_Results_List is a list of CapCerts_capVerifyCerts_Results.
type CapCerts_capVerifyCerts_Results_List = capnp.StructList[CapCerts_capVerifyCerts_Results]

// NewCapCerts_capVerifyCerts_Results creates a new list of CapCerts_capVerifyCerts_Results.
func NewCapCerts_capVerifyCerts_Results_List(s *capnp.Segment, sz int32) (CapCerts_capVerifyCerts_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapCerts_capVerifyCerts_Results](l), err
}

// CapCerts_capVerifyCerts_Results_Future is a wrapper for a CapCerts_capVerifyCerts_Results promised by a client call.
type CapCerts_capVerifyCerts_Results_Future struct{ *capnp.Future }

func (f CapCerts_capVerifyCerts_Results_Future) Struct() (CapCerts_capVerifyCerts_Results, error) {
	p, err := f.Future.Ptr()
	return CapCerts_capVerifyCerts_Results(p.Struct()), err
}
func (p CapCerts_capVerifyCerts_Results_Future) Cap() CapVerifyCerts {
	return CapVerifyCerts(p.Future.Field(0, nil).Client())
}

type CapDeviceCerts capnp.Client

// CapDeviceCerts_TypeID is the unique identifier for the type CapDeviceCerts.
const CapDeviceCerts_TypeID = 0xd619b9809a56774e

func (c CapDeviceCerts) CreateDeviceCert(ctx context.Context, params func(CapDeviceCerts_createDeviceCert_Params) error) (CapDeviceCerts_createDeviceCert_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd619b9809a56774e,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapDeviceCerts",
			MethodName:    "createDeviceCert",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDeviceCerts_createDeviceCert_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDeviceCerts_createDeviceCert_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapDeviceCerts) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapDeviceCerts) AddRef() CapDeviceCerts {
	return CapDeviceCerts(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapDeviceCerts) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapDeviceCerts) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapDeviceCerts) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapDeviceCerts) DecodeFromPtr(p capnp.Ptr) CapDeviceCerts {
	return CapDeviceCerts(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapDeviceCerts) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapDeviceCerts) IsSame(other CapDeviceCerts) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapDeviceCerts) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapDeviceCerts) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapDeviceCerts_Server is a CapDeviceCerts with a local implementation.
type CapDeviceCerts_Server interface {
	CreateDeviceCert(context.Context, CapDeviceCerts_createDeviceCert) error
}

// CapDeviceCerts_NewServer creates a new Server from an implementation of CapDeviceCerts_Server.
func CapDeviceCerts_NewServer(s CapDeviceCerts_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapDeviceCerts_Methods(nil, s), s, c)
}

// CapDeviceCerts_ServerToClient creates a new Client from an implementation of CapDeviceCerts_Server.
// The caller is responsible for calling Release on the returned Client.
func CapDeviceCerts_ServerToClient(s CapDeviceCerts_Server) CapDeviceCerts {
	return CapDeviceCerts(capnp.NewClient(CapDeviceCerts_NewServer(s)))
}

// CapDeviceCerts_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapDeviceCerts_Methods(methods []server.Method, s CapDeviceCerts_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd619b9809a56774e,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapDeviceCerts",
			MethodName:    "createDeviceCert",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CreateDeviceCert(ctx, CapDeviceCerts_createDeviceCert{call})
		},
	})

	return methods
}

// CapDeviceCerts_createDeviceCert holds the state for a server call to CapDeviceCerts.createDeviceCert.
// See server.Call for documentation.
type CapDeviceCerts_createDeviceCert struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapDeviceCerts_createDeviceCert) Args() CapDeviceCerts_createDeviceCert_Params {
	return CapDeviceCerts_createDeviceCert_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapDeviceCerts_createDeviceCert) AllocResults() (CapDeviceCerts_createDeviceCert_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapDeviceCerts_createDeviceCert_Results(r), err
}

// CapDeviceCerts_List is a list of CapDeviceCerts.
type CapDeviceCerts_List = capnp.CapList[CapDeviceCerts]

// NewCapDeviceCerts creates a new list of CapDeviceCerts.
func NewCapDeviceCerts_List(s *capnp.Segment, sz int32) (CapDeviceCerts_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapDeviceCerts](l), err
}

type CapDeviceCerts_createDeviceCert_Params capnp.Struct

// CapDeviceCerts_createDeviceCert_Params_TypeID is the unique identifier for the type CapDeviceCerts_createDeviceCert_Params.
const CapDeviceCerts_createDeviceCert_Params_TypeID = 0xa07734b165754dfe

func NewCapDeviceCerts_createDeviceCert_Params(s *capnp.Segment) (CapDeviceCerts_createDeviceCert_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapDeviceCerts_createDeviceCert_Params(st), err
}

func NewRootCapDeviceCerts_createDeviceCert_Params(s *capnp.Segment) (CapDeviceCerts_createDeviceCert_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapDeviceCerts_createDeviceCert_Params(st), err
}

func ReadRootCapDeviceCerts_createDeviceCert_Params(msg *capnp.Message) (CapDeviceCerts_createDeviceCert_Params, error) {
	root, err := msg.Root()
	return CapDeviceCerts_createDeviceCert_Params(root.Struct()), err
}

func (s CapDeviceCerts_createDeviceCert_Params) String() string {
	str, _ := text.Marshal(0xa07734b165754dfe, capnp.Struct(s))
	return str
}

func (s CapDeviceCerts_createDeviceCert_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDeviceCerts_createDeviceCert_Params) DecodeFromPtr(p capnp.Ptr) CapDeviceCerts_createDeviceCert_Params {
	return CapDeviceCerts_createDeviceCert_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDeviceCerts_createDeviceCert_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDeviceCerts_createDeviceCert_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDeviceCerts_createDeviceCert_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDeviceCerts_createDeviceCert_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDeviceCerts_createDeviceCert_Params) DeviceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapDeviceCerts_createDeviceCert_Params) HasDeviceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDeviceCerts_createDeviceCert_Params) DeviceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapDeviceCerts_createDeviceCert_Params) SetDeviceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapDeviceCerts_createDeviceCert_Params) PubKeyPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapDeviceCerts_createDeviceCert_Params) HasPubKeyPEM() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapDeviceCerts_createDeviceCert_Params) PubKeyPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapDeviceCerts_createDeviceCert_Params) SetPubKeyPEM(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapDeviceCerts_createDeviceCert_Params) ValidityDays() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CapDeviceCerts_createDeviceCert_Params) SetValidityDays(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// CapDeviceCerts_createDeviceCert_Params_List is a list of CapDeviceCerts_createDeviceCert_Params.
type CapDeviceCerts_createDeviceCert_Params_List = capnp.StructList[CapDeviceCerts_createDeviceCert_Params]

// NewCapDeviceCerts_createDeviceCert_Params creates a new list of CapDeviceCerts_createDeviceCert_Params.
func NewCapDeviceCerts_createDeviceCert_Params_List(s *capnp.Segment, sz int32) (CapDeviceCerts_createDeviceCert_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[CapDeviceCerts_createDeviceCert_Params](l), err
}

// CapDeviceCerts_createDeviceCert_Params_Future is a wrapper for a CapDeviceCerts_createDeviceCert_Params promised by a client call.
type CapDeviceCerts_createDeviceCert_Params_Future struct{ *capnp.Future }

func (f CapDeviceCerts_createDeviceCert_Params_Future) Struct() (CapDeviceCerts_createDeviceCert_Params, error) {
	p, err := f.Future.Ptr()
	return CapDeviceCerts_createDeviceCert_Params(p.Struct()), err
}

type CapDeviceCerts_createDeviceCert_Results capnp.Struct

// CapDeviceCerts_createDeviceCert_Results_TypeID is the unique identifier for the type CapDeviceCerts_createDeviceCert_Results.
const CapDeviceCerts_createDeviceCert_Results_TypeID = 0xfed3083ae3a62664

func NewCapDeviceCerts_createDeviceCert_Results(s *capnp.Segment) (CapDeviceCerts_createDeviceCert_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapDeviceCerts_createDeviceCert_Results(st), err
}

func NewRootCapDeviceCerts_createDeviceCert_Results(s *capnp.Segment) (CapDeviceCerts_createDeviceCert_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapDeviceCerts_createDeviceCert_Results(st), err
}

func ReadRootCapDeviceCerts_createDeviceCert_Results(msg *capnp.Message) (CapDeviceCerts_createDeviceCert_Results, error) {
	root, err := msg.Root()
	return CapDeviceCerts_createDeviceCert_Results(root.Struct()), err
}

func (s CapDeviceCerts_createDeviceCert_Results) String() string {
	str, _ := text.Marshal(0xfed3083ae3a62664, capnp.Struct(s))
	return str
}

func (s CapDeviceCerts_createDeviceCert_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDeviceCerts_createDeviceCert_Results) DecodeFromPtr(p capnp.Ptr) CapDeviceCerts_createDeviceCert_Results {
	return CapDeviceCerts_createDeviceCert_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDeviceCerts_createDeviceCert_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDeviceCerts_createDeviceCert_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDeviceCerts_createDeviceCert_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDeviceCerts_createDeviceCert_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDeviceCerts_createDeviceCert_Results) CertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapDeviceCerts_createDeviceCert_Results) HasCertPEM() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDeviceCerts_createDeviceCert_Results) CertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapDeviceCerts_createDeviceCert_Results) SetCertPEM(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapDeviceCerts_createDeviceCert_Results) CaCertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapDeviceCerts_createDeviceCert_Results) HasCaCertPEM() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapDeviceCerts_createDeviceCert_Results) CaCertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapDeviceCerts_createDeviceCert_Results) SetCaCertPEM(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CapDeviceCerts_createDeviceCert_Results_List is a list of CapDeviceCerts_createDeviceCert_Results.
type CapDeviceCerts_createDeviceCert_Results_List = capnp.StructList[CapDeviceCerts_createDeviceCert_Results]

// NewCapDeviceCerts_createDeviceCert_Results creates a new list of CapDeviceCerts_createDeviceCert_Results.
func NewCapDeviceCerts_createDeviceCert_Results_List(s *capnp.Segment, sz int32) (CapDeviceCerts_createDeviceCert_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapDeviceCerts_createDeviceCert_Results](l), err
}

// CapDeviceCerts_createDeviceCert_Results_Future is a wrapper for a CapDeviceCerts_createDeviceCert_Results promised by a client call.
type CapDeviceCerts_createDeviceCert_Results_Future struct{ *capnp.Future }

func (f CapDeviceCerts_createDeviceCert_Results_Future) Struct() (CapDeviceCerts_createDeviceCert_Results, error) {
	p, err := f.Future.Ptr()
	return CapDeviceCerts_createDeviceCert_Results(p.Struct()), err
}

type CapServiceCerts capnp.Client

// CapServiceCerts_TypeID is the unique identifier for the type CapServiceCerts.
const CapServiceCerts_TypeID = 0xfb03fbde72bfd77b

func (c CapServiceCerts) CreateServiceCert(ctx context.Context, params func(CapServiceCerts_createServiceCert_Params) error) (CapServiceCerts_createServiceCert_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfb03fbde72bfd77b,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapServiceCerts",
			MethodName:    "createServiceCert",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapServiceCerts_createServiceCert_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapServiceCerts_createServiceCert_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapServiceCerts) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapServiceCerts) AddRef() CapServiceCerts {
	return CapServiceCerts(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapServiceCerts) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapServiceCerts) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapServiceCerts) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapServiceCerts) DecodeFromPtr(p capnp.Ptr) CapServiceCerts {
	return CapServiceCerts(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapServiceCerts) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapServiceCerts) IsSame(other CapServiceCerts) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapServiceCerts) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapServiceCerts) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapServiceCerts_Server is a CapServiceCerts with a local implementation.
type CapServiceCerts_Server interface {
	CreateServiceCert(context.Context, CapServiceCerts_createServiceCert) error
}

// CapServiceCerts_NewServer creates a new Server from an implementation of CapServiceCerts_Server.
func CapServiceCerts_NewServer(s CapServiceCerts_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapServiceCerts_Methods(nil, s), s, c)
}

// CapServiceCerts_ServerToClient creates a new Client from an implementation of CapServiceCerts_Server.
// The caller is responsible for calling Release on the returned Client.
func CapServiceCerts_ServerToClient(s CapServiceCerts_Server) CapServiceCerts {
	return CapServiceCerts(capnp.NewClient(CapServiceCerts_NewServer(s)))
}

// CapServiceCerts_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapServiceCerts_Methods(methods []server.Method, s CapServiceCerts_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfb03fbde72bfd77b,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapServiceCerts",
			MethodName:    "createServiceCert",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CreateServiceCert(ctx, CapServiceCerts_createServiceCert{call})
		},
	})

	return methods
}

// CapServiceCerts_createServiceCert holds the state for a server call to CapServiceCerts.createServiceCert.
// See server.Call for documentation.
type CapServiceCerts_createServiceCert struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapServiceCerts_createServiceCert) Args() CapServiceCerts_createServiceCert_Params {
	return CapServiceCerts_createServiceCert_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapServiceCerts_createServiceCert) AllocResults() (CapServiceCerts_createServiceCert_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapServiceCerts_createServiceCert_Results(r), err
}

// CapServiceCerts_List is a list of CapServiceCerts.
type CapServiceCerts_List = capnp.CapList[CapServiceCerts]

// NewCapServiceCerts creates a new list of CapServiceCerts.
func NewCapServiceCerts_List(s *capnp.Segment, sz int32) (CapServiceCerts_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapServiceCerts](l), err
}

type CapServiceCerts_createServiceCert_Params capnp.Struct

// CapServiceCerts_createServiceCert_Params_TypeID is the unique identifier for the type CapServiceCerts_createServiceCert_Params.
const CapServiceCerts_createServiceCert_Params_TypeID = 0x9034b47b50ec3828

func NewCapServiceCerts_createServiceCert_Params(s *capnp.Segment) (CapServiceCerts_createServiceCert_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return CapServiceCerts_createServiceCert_Params(st), err
}

func NewRootCapServiceCerts_createServiceCert_Params(s *capnp.Segment) (CapServiceCerts_createServiceCert_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return CapServiceCerts_createServiceCert_Params(st), err
}

func ReadRootCapServiceCerts_createServiceCert_Params(msg *capnp.Message) (CapServiceCerts_createServiceCert_Params, error) {
	root, err := msg.Root()
	return CapServiceCerts_createServiceCert_Params(root.Struct()), err
}

func (s CapServiceCerts_createServiceCert_Params) String() string {
	str, _ := text.Marshal(0x9034b47b50ec3828, capnp.Struct(s))
	return str
}

func (s CapServiceCerts_createServiceCert_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapServiceCerts_createServiceCert_Params) DecodeFromPtr(p capnp.Ptr) CapServiceCerts_createServiceCert_Params {
	return CapServiceCerts_createServiceCert_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapServiceCerts_createServiceCert_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapServiceCerts_createServiceCert_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapServiceCerts_createServiceCert_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapServiceCerts_createServiceCert_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapServiceCerts_createServiceCert_Params) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapServiceCerts_createServiceCert_Params) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapServiceCerts_createServiceCert_Params) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapServiceCerts_createServiceCert_Params) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapServiceCerts_createServiceCert_Params) PubKeyPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapServiceCerts_createServiceCert_Params) HasPubKeyPEM() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapServiceCerts_createServiceCert_Params) PubKeyPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapServiceCerts_createServiceCert_Params) SetPubKeyPEM(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapServiceCerts_createServiceCert_Params) ValidityDays() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CapServiceCerts_createServiceCert_Params) SetValidityDays(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CapServiceCerts_createServiceCert_Params) Names() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s CapServiceCerts_createServiceCert_Params) HasNames() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapServiceCerts_createServiceCert_Params) SetNames(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewNames sets the names field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s CapServiceCerts_createServiceCert_Params) NewNames(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// CapServiceCerts_createServiceCert_Params_List is a list of CapServiceCerts_createServiceCert_Params.
type CapServiceCerts_createServiceCert_Params_List = capnp.StructList[CapServiceCerts_createServiceCert_Params]

// NewCapServiceCerts_createServiceCert_Params creates a new list of CapServiceCerts_createServiceCert_Params.
func NewCapServiceCerts_createServiceCert_Params_List(s *capnp.Segment, sz int32) (CapServiceCerts_createServiceCert_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[CapServiceCerts_createServiceCert_Params](l), err
}

// CapServiceCerts_createServiceCert_Params_Future is a wrapper for a CapServiceCerts_createServiceCert_Params promised by a client call.
type CapServiceCerts_createServiceCert_Params_Future struct{ *capnp.Future }

func (f CapServiceCerts_createServiceCert_Params_Future) Struct() (CapServiceCerts_createServiceCert_Params, error) {
	p, err := f.Future.Ptr()
	return CapServiceCerts_createServiceCert_Params(p.Struct()), err
}

type CapServiceCerts_createServiceCert_Results capnp.Struct

// CapServiceCerts_createServiceCert_Results_TypeID is the unique identifier for the type CapServiceCerts_createServiceCert_Results.
const CapServiceCerts_createServiceCert_Results_TypeID = 0xfadea51c36b495d7

func NewCapServiceCerts_createServiceCert_Results(s *capnp.Segment) (CapServiceCerts_createServiceCert_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapServiceCerts_createServiceCert_Results(st), err
}

func NewRootCapServiceCerts_createServiceCert_Results(s *capnp.Segment) (CapServiceCerts_createServiceCert_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapServiceCerts_createServiceCert_Results(st), err
}

func ReadRootCapServiceCerts_createServiceCert_Results(msg *capnp.Message) (CapServiceCerts_createServiceCert_Results, error) {
	root, err := msg.Root()
	return CapServiceCerts_createServiceCert_Results(root.Struct()), err
}

func (s CapServiceCerts_createServiceCert_Results) String() string {
	str, _ := text.Marshal(0xfadea51c36b495d7, capnp.Struct(s))
	return str
}

func (s CapServiceCerts_createServiceCert_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapServiceCerts_createServiceCert_Results) DecodeFromPtr(p capnp.Ptr) CapServiceCerts_createServiceCert_Results {
	return CapServiceCerts_createServiceCert_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapServiceCerts_createServiceCert_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapServiceCerts_createServiceCert_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapServiceCerts_createServiceCert_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapServiceCerts_createServiceCert_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapServiceCerts_createServiceCert_Results) CertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapServiceCerts_createServiceCert_Results) HasCertPEM() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapServiceCerts_createServiceCert_Results) CertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapServiceCerts_createServiceCert_Results) SetCertPEM(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapServiceCerts_createServiceCert_Results) CaCertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapServiceCerts_createServiceCert_Results) HasCaCertPEM() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapServiceCerts_createServiceCert_Results) CaCertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapServiceCerts_createServiceCert_Results) SetCaCertPEM(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CapServiceCerts_createServiceCert_Results_List is a list of CapServiceCerts_createServiceCert_Results.
type CapServiceCerts_createServiceCert_Results_List = capnp.StructList[CapServiceCerts_createServiceCert_Results]

// NewCapServiceCerts_createServiceCert_Results creates a new list of CapServiceCerts_createServiceCert_Results.
func NewCapServiceCerts_createServiceCert_Results_List(s *capnp.Segment, sz int32) (CapServiceCerts_createServiceCert_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapServiceCerts_createServiceCert_Results](l), err
}

// CapServiceCerts_createServiceCert_Results_Future is a wrapper for a CapServiceCerts_createServiceCert_Results promised by a client call.
type CapServiceCerts_createServiceCert_Results_Future struct{ *capnp.Future }

func (f CapServiceCerts_createServiceCert_Results_Future) Struct() (CapServiceCerts_createServiceCert_Results, error) {
	p, err := f.Future.Ptr()
	return CapServiceCerts_createServiceCert_Results(p.Struct()), err
}

type CapUserCerts capnp.Client

// CapUserCerts_TypeID is the unique identifier for the type CapUserCerts.
const CapUserCerts_TypeID = 0xbf895d6d45760872

func (c CapUserCerts) CreateUserCert(ctx context.Context, params func(CapUserCerts_createUserCert_Params) error) (CapUserCerts_createUserCert_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf895d6d45760872,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapUserCerts",
			MethodName:    "createUserCert",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapUserCerts_createUserCert_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapUserCerts_createUserCert_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapUserCerts) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapUserCerts) AddRef() CapUserCerts {
	return CapUserCerts(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapUserCerts) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapUserCerts) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapUserCerts) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapUserCerts) DecodeFromPtr(p capnp.Ptr) CapUserCerts {
	return CapUserCerts(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapUserCerts) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapUserCerts) IsSame(other CapUserCerts) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapUserCerts) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapUserCerts) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapUserCerts_Server is a CapUserCerts with a local implementation.
type CapUserCerts_Server interface {
	CreateUserCert(context.Context, CapUserCerts_createUserCert) error
}

// CapUserCerts_NewServer creates a new Server from an implementation of CapUserCerts_Server.
func CapUserCerts_NewServer(s CapUserCerts_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapUserCerts_Methods(nil, s), s, c)
}

// CapUserCerts_ServerToClient creates a new Client from an implementation of CapUserCerts_Server.
// The caller is responsible for calling Release on the returned Client.
func CapUserCerts_ServerToClient(s CapUserCerts_Server) CapUserCerts {
	return CapUserCerts(capnp.NewClient(CapUserCerts_NewServer(s)))
}

// CapUserCerts_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapUserCerts_Methods(methods []server.Method, s CapUserCerts_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf895d6d45760872,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapUserCerts",
			MethodName:    "createUserCert",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CreateUserCert(ctx, CapUserCerts_createUserCert{call})
		},
	})

	return methods
}

// CapUserCerts_createUserCert holds the state for a server call to CapUserCerts.createUserCert.
// See server.Call for documentation.
type CapUserCerts_createUserCert struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapUserCerts_createUserCert) Args() CapUserCerts_createUserCert_Params {
	return CapUserCerts_createUserCert_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapUserCerts_createUserCert) AllocResults() (CapUserCerts_createUserCert_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapUserCerts_createUserCert_Results(r), err
}

// CapUserCerts_List is a list of CapUserCerts.
type CapUserCerts_List = capnp.CapList[CapUserCerts]

// NewCapUserCerts creates a new list of CapUserCerts.
func NewCapUserCerts_List(s *capnp.Segment, sz int32) (CapUserCerts_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapUserCerts](l), err
}

type CapUserCerts_createUserCert_Params capnp.Struct

// CapUserCerts_createUserCert_Params_TypeID is the unique identifier for the type CapUserCerts_createUserCert_Params.
const CapUserCerts_createUserCert_Params_TypeID = 0x80ba300a9babc95b

func NewCapUserCerts_createUserCert_Params(s *capnp.Segment) (CapUserCerts_createUserCert_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapUserCerts_createUserCert_Params(st), err
}

func NewRootCapUserCerts_createUserCert_Params(s *capnp.Segment) (CapUserCerts_createUserCert_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapUserCerts_createUserCert_Params(st), err
}

func ReadRootCapUserCerts_createUserCert_Params(msg *capnp.Message) (CapUserCerts_createUserCert_Params, error) {
	root, err := msg.Root()
	return CapUserCerts_createUserCert_Params(root.Struct()), err
}

func (s CapUserCerts_createUserCert_Params) String() string {
	str, _ := text.Marshal(0x80ba300a9babc95b, capnp.Struct(s))
	return str
}

func (s CapUserCerts_createUserCert_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUserCerts_createUserCert_Params) DecodeFromPtr(p capnp.Ptr) CapUserCerts_createUserCert_Params {
	return CapUserCerts_createUserCert_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUserCerts_createUserCert_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUserCerts_createUserCert_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUserCerts_createUserCert_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUserCerts_createUserCert_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapUserCerts_createUserCert_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapUserCerts_createUserCert_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapUserCerts_createUserCert_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapUserCerts_createUserCert_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapUserCerts_createUserCert_Params) PubKeyPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapUserCerts_createUserCert_Params) HasPubKeyPEM() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapUserCerts_createUserCert_Params) PubKeyPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapUserCerts_createUserCert_Params) SetPubKeyPEM(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapUserCerts_createUserCert_Params) ValidityDays() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CapUserCerts_createUserCert_Params) SetValidityDays(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// CapUserCerts_createUserCert_Params_List is a list of CapUserCerts_createUserCert_Params.
type CapUserCerts_createUserCert_Params_List = capnp.StructList[CapUserCerts_createUserCert_Params]

// NewCapUserCerts_createUserCert_Params creates a new list of CapUserCerts_createUserCert_Params.
func NewCapUserCerts_createUserCert_Params_List(s *capnp.Segment, sz int32) (CapUserCerts_createUserCert_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[CapUserCerts_createUserCert_Params](l), err
}

// CapUserCerts_createUserCert_Params_Future is a wrapper for a CapUserCerts_createUserCert_Params promised by a client call.
type CapUserCerts_createUserCert_Params_Future struct{ *capnp.Future }

func (f CapUserCerts_createUserCert_Params_Future) Struct() (CapUserCerts_createUserCert_Params, error) {
	p, err := f.Future.Ptr()
	return CapUserCerts_createUserCert_Params(p.Struct()), err
}

type CapUserCerts_createUserCert_Results capnp.Struct

// CapUserCerts_createUserCert_Results_TypeID is the unique identifier for the type CapUserCerts_createUserCert_Results.
const CapUserCerts_createUserCert_Results_TypeID = 0xaea61579d1d72744

func NewCapUserCerts_createUserCert_Results(s *capnp.Segment) (CapUserCerts_createUserCert_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapUserCerts_createUserCert_Results(st), err
}

func NewRootCapUserCerts_createUserCert_Results(s *capnp.Segment) (CapUserCerts_createUserCert_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapUserCerts_createUserCert_Results(st), err
}

func ReadRootCapUserCerts_createUserCert_Results(msg *capnp.Message) (CapUserCerts_createUserCert_Results, error) {
	root, err := msg.Root()
	return CapUserCerts_createUserCert_Results(root.Struct()), err
}

func (s CapUserCerts_createUserCert_Results) String() string {
	str, _ := text.Marshal(0xaea61579d1d72744, capnp.Struct(s))
	return str
}

func (s CapUserCerts_createUserCert_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUserCerts_createUserCert_Results) DecodeFromPtr(p capnp.Ptr) CapUserCerts_createUserCert_Results {
	return CapUserCerts_createUserCert_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUserCerts_createUserCert_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUserCerts_createUserCert_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUserCerts_createUserCert_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUserCerts_createUserCert_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapUserCerts_createUserCert_Results) CertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapUserCerts_createUserCert_Results) HasCertPEM() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapUserCerts_createUserCert_Results) CertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapUserCerts_createUserCert_Results) SetCertPEM(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapUserCerts_createUserCert_Results) CaCertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapUserCerts_createUserCert_Results) HasCaCertPEM() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapUserCerts_createUserCert_Results) CaCertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapUserCerts_createUserCert_Results) SetCaCertPEM(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CapUserCerts_createUserCert_Results_List is a list of CapUserCerts_createUserCert_Results.
type CapUserCerts_createUserCert_Results_List = capnp.StructList[CapUserCerts_createUserCert_Results]

// NewCapUserCerts_createUserCert_Results creates a new list of CapUserCerts_createUserCert_Results.
func NewCapUserCerts_createUserCert_Results_List(s *capnp.Segment, sz int32) (CapUserCerts_createUserCert_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapUserCerts_createUserCert_Results](l), err
}

// CapUserCerts_createUserCert_Results_Future is a wrapper for a CapUserCerts_createUserCert_Results promised by a client call.
type CapUserCerts_createUserCert_Results_Future struct{ *capnp.Future }

func (f CapUserCerts_createUserCert_Results_Future) Struct() (CapUserCerts_createUserCert_Results, error) {
	p, err := f.Future.Ptr()
	return CapUserCerts_createUserCert_Results(p.Struct()), err
}

type CapVerifyCerts capnp.Client

// CapVerifyCerts_TypeID is the unique identifier for the type CapVerifyCerts.
const CapVerifyCerts_TypeID = 0xa184693083b66c59

func (c CapVerifyCerts) VerifyCert(ctx context.Context, params func(CapVerifyCerts_verifyCert_Params) error) (CapVerifyCerts_verifyCert_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa184693083b66c59,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapVerifyCerts",
			MethodName:    "verifyCert",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapVerifyCerts_verifyCert_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapVerifyCerts_verifyCert_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapVerifyCerts) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapVerifyCerts) AddRef() CapVerifyCerts {
	return CapVerifyCerts(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapVerifyCerts) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapVerifyCerts) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapVerifyCerts) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapVerifyCerts) DecodeFromPtr(p capnp.Ptr) CapVerifyCerts {
	return CapVerifyCerts(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapVerifyCerts) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapVerifyCerts) IsSame(other CapVerifyCerts) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapVerifyCerts) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapVerifyCerts) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapVerifyCerts_Server is a CapVerifyCerts with a local implementation.
type CapVerifyCerts_Server interface {
	VerifyCert(context.Context, CapVerifyCerts_verifyCert) error
}

// CapVerifyCerts_NewServer creates a new Server from an implementation of CapVerifyCerts_Server.
func CapVerifyCerts_NewServer(s CapVerifyCerts_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapVerifyCerts_Methods(nil, s), s, c)
}

// CapVerifyCerts_ServerToClient creates a new Client from an implementation of CapVerifyCerts_Server.
// The caller is responsible for calling Release on the returned Client.
func CapVerifyCerts_ServerToClient(s CapVerifyCerts_Server) CapVerifyCerts {
	return CapVerifyCerts(capnp.NewClient(CapVerifyCerts_NewServer(s)))
}

// CapVerifyCerts_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapVerifyCerts_Methods(methods []server.Method, s CapVerifyCerts_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa184693083b66c59,
			MethodID:      0,
			InterfaceName: "hubapi/Certs.capnp:CapVerifyCerts",
			MethodName:    "verifyCert",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.VerifyCert(ctx, CapVerifyCerts_verifyCert{call})
		},
	})

	return methods
}

// CapVerifyCerts_verifyCert holds the state for a server call to CapVerifyCerts.verifyCert.
// See server.Call for documentation.
type CapVerifyCerts_verifyCert struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapVerifyCerts_verifyCert) Args() CapVerifyCerts_verifyCert_Params {
	return CapVerifyCerts_verifyCert_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapVerifyCerts_verifyCert) AllocResults() (CapVerifyCerts_verifyCert_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapVerifyCerts_verifyCert_Results(r), err
}

// CapVerifyCerts_List is a list of CapVerifyCerts.
type CapVerifyCerts_List = capnp.CapList[CapVerifyCerts]

// NewCapVerifyCerts creates a new list of CapVerifyCerts.
func NewCapVerifyCerts_List(s *capnp.Segment, sz int32) (CapVerifyCerts_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapVerifyCerts](l), err
}

type CapVerifyCerts_verifyCert_Params capnp.Struct

// CapVerifyCerts_verifyCert_Params_TypeID is the unique identifier for the type CapVerifyCerts_verifyCert_Params.
const CapVerifyCerts_verifyCert_Params_TypeID = 0x9a854004bdf77cec

func NewCapVerifyCerts_verifyCert_Params(s *capnp.Segment) (CapVerifyCerts_verifyCert_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapVerifyCerts_verifyCert_Params(st), err
}

func NewRootCapVerifyCerts_verifyCert_Params(s *capnp.Segment) (CapVerifyCerts_verifyCert_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapVerifyCerts_verifyCert_Params(st), err
}

func ReadRootCapVerifyCerts_verifyCert_Params(msg *capnp.Message) (CapVerifyCerts_verifyCert_Params, error) {
	root, err := msg.Root()
	return CapVerifyCerts_verifyCert_Params(root.Struct()), err
}

func (s CapVerifyCerts_verifyCert_Params) String() string {
	str, _ := text.Marshal(0x9a854004bdf77cec, capnp.Struct(s))
	return str
}

func (s CapVerifyCerts_verifyCert_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapVerifyCerts_verifyCert_Params) DecodeFromPtr(p capnp.Ptr) CapVerifyCerts_verifyCert_Params {
	return CapVerifyCerts_verifyCert_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapVerifyCerts_verifyCert_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapVerifyCerts_verifyCert_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapVerifyCerts_verifyCert_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapVerifyCerts_verifyCert_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapVerifyCerts_verifyCert_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapVerifyCerts_verifyCert_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapVerifyCerts_verifyCert_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapVerifyCerts_verifyCert_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapVerifyCerts_verifyCert_Params) CertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapVerifyCerts_verifyCert_Params) HasCertPEM() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapVerifyCerts_verifyCert_Params) CertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapVerifyCerts_verifyCert_Params) SetCertPEM(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CapVerifyCerts_verifyCert_Params_List is a list of CapVerifyCerts_verifyCert_Params.
type CapVerifyCerts_verifyCert_Params_List = capnp.StructList[CapVerifyCerts_verifyCert_Params]

// NewCapVerifyCerts_verifyCert_Params creates a new list of CapVerifyCerts_verifyCert_Params.
func NewCapVerifyCerts_verifyCert_Params_List(s *capnp.Segment, sz int32) (CapVerifyCerts_verifyCert_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapVerifyCerts_verifyCert_Params](l), err
}

// CapVerifyCerts_verifyCert_Params_Future is a wrapper for a CapVerifyCerts_verifyCert_Params promised by a client call.
type CapVerifyCerts_verifyCert_Params_Future struct{ *capnp.Future }

func (f CapVerifyCerts_verifyCert_Params_Future) Struct() (CapVerifyCerts_verifyCert_Params, error) {
	p, err := f.Future.Ptr()
	return CapVerifyCerts_verifyCert_Params(p.Struct()), err
}

type CapVerifyCerts_verifyCert_Results capnp.Struct

// CapVerifyCerts_verifyCert_Results_TypeID is the unique identifier for the type CapVerifyCerts_verifyCert_Results.
const CapVerifyCerts_verifyCert_Results_TypeID = 0x94c029bc0d5d837d

func NewCapVerifyCerts_verifyCert_Results(s *capnp.Segment) (CapVerifyCerts_verifyCert_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapVerifyCerts_verifyCert_Results(st), err
}

func NewRootCapVerifyCerts_verifyCert_Results(s *capnp.Segment) (CapVerifyCerts_verifyCert_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapVerifyCerts_verifyCert_Results(st), err
}

func ReadRootCapVerifyCerts_verifyCert_Results(msg *capnp.Message) (CapVerifyCerts_verifyCert_Results, error) {
	root, err := msg.Root()
	return CapVerifyCerts_verifyCert_Results(root.Struct()), err
}

func (s CapVerifyCerts_verifyCert_Results) String() string {
	str, _ := text.Marshal(0x94c029bc0d5d837d, capnp.Struct(s))
	return str
}

func (s CapVerifyCerts_verifyCert_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapVerifyCerts_verifyCert_Results) DecodeFromPtr(p capnp.Ptr) CapVerifyCerts_verifyCert_Results {
	return CapVerifyCerts_verifyCert_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapVerifyCerts_verifyCert_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapVerifyCerts_verifyCert_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapVerifyCerts_verifyCert_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapVerifyCerts_verifyCert_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapVerifyCerts_verifyCert_Results_List is a list of CapVerifyCerts_verifyCert_Results.
type CapVerifyCerts_verifyCert_Results_List = capnp.StructList[CapVerifyCerts_verifyCert_Results]

// NewCapVerifyCerts_verifyCert_Results creates a new list of CapVerifyCerts_verifyCert_Results.
func NewCapVerifyCerts_verifyCert_Results_List(s *capnp.Segment, sz int32) (CapVerifyCerts_verifyCert_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapVerifyCerts_verifyCert_Results](l), err
}

// CapVerifyCerts_verifyCert_Results_Future is a wrapper for a CapVerifyCerts_verifyCert_Results promised by a client call.
type CapVerifyCerts_verifyCert_Results_Future struct{ *capnp.Future }

func (f CapVerifyCerts_verifyCert_Results_Future) Struct() (CapVerifyCerts_verifyCert_Results, error) {
	p, err := f.Future.Ptr()
	return CapVerifyCerts_verifyCert_Results(p.Struct()), err
}

const schema_cd6ed2180540008c = "x\xda\xbcX}l\x14i\x19\x7f\x9eyg;\xb3\x1f" +
	"\xbd\xde\xeb\xf4\xf4\xee\xbcX\xecq\xca\x19[\xda\xa3=" +
	"+\xf1\xd2\xd6n[\xe1\xaed\xa7\xdb\x12<\xaf\x1e\xc3" +
	"v\x90\xc5\xdduow\xdb\xba\xa5F(\x0a\xa16\x06" +
	"\x08$\xa4\x98h\x094\x88\xe1\xa3\x04M \x10\x14\x83" +
	"\x86\x08F0\xe5+\x82\x8aAT\xda\x08Fb\xc2\xd7" +
	"\x98wfgvv\xba--\xe8\xfd\xd7}\xe7\xf7\xfe" +
	"\xde\xe7y~\xbfy\xdegZq\x94\xaf\xe3+\x0b\x8b" +
	"|\xc0\xc9\x83\xae\x02\xed+g~\xb2\xd3Sql-" +
	"\xc8s\x10\x01\\\x9c\x00\xb0`\xc2u\x18\x01\xa5G\xae" +
	"\x83\x80\x9a{\xe3W\xcb\xba\xfeX\xbd\x01\xe8+\x0c\x80" +
	"\x0c0\\0\xc4\x00\xa3\x05\xb5\x80\xda\xafv\x91\xf7\xff" +
	"<\\\xb3\xd1\x0e\x183\x007u\xc0\xb7\xda\xbe\xb9\xf7" +
	"\x97\xb7?\xf6=;\xc0%le\x80\x17\x04\x06\x98W" +
	"3\x1eXs\xa4j3\xc8\xaf\xeaA\x10\x86\xf8\xbcp" +
	"\x83!Z\x84[\x80Z7\xff\xda\x95\xd8\xbd\xc5\xdb\xec" +
	"\x14o\x89\x03:@\xd4\xcfX\xdfQx\xfc\xf5\x9fo" +
	"\x03Z\x8a\x00<{\x1e\x15\xf7!\xf0\xdax\xdf\x7fN" +
	"\xf0u\xdf\x1d2\x9e\x18\x09v\x88\xbb\xd8\xd6\xa8\xd8\x03" +
	"\xa8\xf9\x96_\xe6v\xb7\x0d\x0c\x01\x95\xf8G\x83u\xae" +
	"\x17/\xc4\xce\x01.8'\x0e\xa0tS\x14\x00\x82\x7f" +
	"\x12\x09\x06\xc7E\x0e\x01\xb4\xc7-]\xeahU\xcf\x8f" +
	"@.\xcd\x16\xec\x9ax\x81\xf1\xdd\x15Y\xc1\x8a\xe7\xec" +
	"\xf8a\xc9\xd5u\xc3\x0e\xbe\xed\xee^\x94~\xecf|" +
	"\xbb\xdd\x04\x83\x87\xdc:\xdf\x97#?[_\x11\xfe\x0e" +
	"C\x13\x1bz\xd8\xfd\x11\x94F\x19Z\xda\xefn\x96\xae" +
	"\xb0\xbf4\xff\xa7/\x9dO\xbf0r\x00\xe8\x1c\xeb\xe8" +
	"_\xb8\x8f\xb1\xa3\xcf\xbbY*\x03;\xf75\x8d<\xac" +
	"\x1au\x1c]\xe9y\x19\xa5z\x0f;\xfa\x0b\x1e\x82\xc1" +
	"/y\xf4\xa3\xd7\xc4\xde\x9c\x97\xdc\xf3\xfea\x07\xba\xde" +
	"\xf3\x19\x94d\x1d\xfd\x0eC/3\xd0C\xb7v\x14\xce" +
	"\xdf<\xf2S\x07Z\xf6,DI\xd1\xd1\xef1\xf4*" +
	"\x03\xfd\xf1\x89\x95\xa7\xef|\xad\xe9xnZ\x92\xe2\xb9" +
	"!E\x19xA\xd8#\xa0\xf4\x92\x97\xa5\xe5\xf9\x9cK" +
	"\xabN\x7f\xff\x84]\\\xf4\xea\xfe\xa0^&nB\xec" +
	"n\x8cvl:\xe9\xa8Q\xb5\x97C\xa9\x9eQHo" +
	"y\x9b\xa5\xb0N\xf6\xe8\xa3\xc5\x0d\xfe\xdf\xb4\x9c\xb2\x93" +
	"\xc9^]nE'\xablm\x19\xd8\xd2\xff\xebS\x8e" +
	"<\xd6y\xdf@i\x0b\xa3\x08\x0ez\x09\x06wx\xf5" +
	"<\xce\x9e\x8c-\xbb6p\xe0\xac\x03\xbd\xc5[\x8a\xd2" +
	"\xb0\x8e\xfe\x01C\xef5\xd0Kz\x96\x0e\xad=\xfa\xd2" +
	"E\xa7\x98^&\xa6\x1e\xe8~o\xb3tM\x0ft\xf7" +
	"7\xba\xe6\xb7\xed\xfd\xebE\x07\xf3i\x16\xc7\x98\xce\xfc" +
	";\xc6\xfc\x07\x83yp\xc3\xa6\xdf.\xfe\xd7'\xff\xee" +
	"@\x8fy\xb7\xa24\xa1\xa3\xff\xc6\xd0\xff6\xd0\xef=" +
	"\xb8<^#\x1e\xba\xed@\xdfdQ\xdf\xd3\xd1w\x18" +
	"\xfa\xa1\x81\xde\x10\xbb\xdf\xe7\xbd\xdb\xfbO{\xc9\xeey" +
	"\xf5\x17\xd8\xe5c%;s\xf0@\x1f~\xddw\xdf\x0e" +
	"x\xcd\xd7\xcf\x00\x95:\xe0\xd2\xf6#o\xbe\xb2\xe7\xfa" +
	"}\xa0\xafZ\xc6l\xf7\xfd\x83\x01\xc2>f\xcc5\x97" +
	"N&\xae? \x0f\x1c\x859\xe3{\x19\xa5+>V" +
	"\x981_\xb3\xe4*d\x85\xe9\xfc\xd4\xc8_\x16\x8a\xbf" +
	"\x7fl\x7fa'|W\x19\x19\x16\xf6@\x99\xb6\xaak" +
	"\x85\x12\x0f\xcfop\xa9\x89T\xb2<\xa4\xc4c\xf1\x85" +
	"\x0dJ\xbc=\xa9&\x1a\x8c\xa5\x84\xaa\xa4T\xf3\xf7\xdc" +
	"@\x89\x92P\xa2I\xd9Gx\x00\x1e\x01h\xe3b\x00" +
	"\xd9OP\x0epH\x11\x8b\xd9\x9bL[Z\x01\xe4w" +
	"\x08\xca\xcb8D\xae\x189D\xda\xbe\x1a@n#(" +
	"/\xe7P\x0bE\xc2j,\xb5\xc8\x0f\x00\xe8\x03\x0e}" +
	"\x80Z\xbck\xc5\xdbj:\xd0\x08\xd8b\xadu+\x91" +
	"pg8\x95\x86\"\xbf\x92N\"\x0f\x1c\xf2\x80S\x85" +
	"\xdd`\xfe\x0c\xaa\x89\xeepH\xd5\x7f\xcf\x0d(\x09\x85" +
	"D\x932o\xc5\\\xc8b\xf6\x11\x94_\x9c\"\x94'" +
	"\xf1/U\x13\xe1\x95i\x83\xbeUMvEH*\x87" +
	"\xbf\x14@\x16\x09\xca\xc5\x1c\x0a!%\x8e4\xdb\x9b\x00" +
	"\x91\xce\xe0\x04\xbf\x9a\x9b@\x14\x9f*\x81\x82\\z{" +
	"]2\xd2\xda\x96\xd8A\x02S\xf7y\xeb \x85\x09\xb9" +
	"\x9c\xa0\x1c\xb1\xa9\x1bf\x8b\xab\x08\xca\xa9\xac\xba\x1f0" +
	"u\xe3\x04\xe5>\x0e)\xe1\x8a\x91\x00\xd0\xf4\x1b\x00r" +
	"\x8a\xa0\xbc\x99C-i\x1c\xb4\x08\xd0\xff\x14\x92\x97\xc4" +
	"\x94\xa8\x9a\xc4\xe7\x00\x03\x04u\xecs3\xa8\xa2\xe5c" +
	"C\xa5T\x12`z\x99\xac\xf68\xbdL6\xfd\xcb\xbb" +
	"\xad\xbf\xd9!E\xec\x94Yn3\xcb.Z\x91\xbd\xce" +
	"\xf4\x9dGP\xae\xb2\x95\xbd\xf2\x8b\x00\xf2g\x09\xca5" +
	"\xf9E\xffvHM\xa4\x02\x8d-\xd3\xba\xb8S]\xa9" +
	"tERY{-\xcd\x94\x9b\x15\x1b \x80\xc8*N" +
	"\xf9OLm\"\x9b53\x1e\xca\xaeX^}\xd6\x06" +
	"\xd1\xa9S>s\x83\xe0'\xa7nz\xc2H\xbc\xd6\xc8" +
	"<o\xded*\xf5\x90\xe1e\x9e\xb8\x00\xac\x99\x08\xcd" +
	"\xb1\x89\xd2w\x81\xa3nA3\x15\x06\x92H\xd5a\x00" +
	"q\xd6\xdd\xb6\xb5\xd6p\xad\xdd\x19\xcc\x04s\x09\xca\x15" +
	"\xb6j\x96\xb5f\x9d1\xc9\x05!\xa5A_\xb1W-" +
	"_\x86l_\xa6\x19,QHTe%1\xf0@q" +
	"\x85\xc6\x1e\xb3W\x18\x84pH\xcdK\x90\xa9o\x83~" +
	"^QS8\x92K\xf1n&\x92\xf28\x105\x9a?" +
	"\x04%\xbeD\x89fZR\xada\xb1\x1c\x8e~\xcdl" +
	"\xee|\xc6\x81`\xf28;\x80`\xec\x95\x9f\xd7U2" +
	"\xe7f4/h\xfaA/p4,`v*Gs" +
	"\xde\xa1\x1d\xfd\xc0\xd1v\x019\xeb\xbaFsj\xa6\x8b" +
	"V\x03G\xeb\x05$\xd6\xac\x85\xe6\xd4N\xab\x19g\x99" +
	"\xa0\x99\xfd\x1b29\xd4\xa1\x157\x9aq\x1bk\xba\xd4" +
	"P\x94\x05\xe9&\x83\xdatf\xdf4\xae\xc9{\x19=" +
	"\xc3UA\xa60%d\xbdn~\xe1\xa09=S\xda" +
	"kx\xdd4.\xd4\x1a\xbbf\x16y\xce5\xcd:\xb4" +
	"\x10y\xd2=jM?\x8e\x06\x9d\xc7FFW*\x99" +
	"\xec\xa2\xdeI\x02M\xef\xe7\xb7\xd5t\x93\xe0\xb4s\xab" +
	"\x16b\x0f\xca\xe3*`t\xaa\"f\x1b\xa3\xbde\x98" +
	"\xdf=h\x8eg\x94\x0e\x00G\x0b\xcd2\xfaU4\xb7" +
	"\x01\xe4V2O\x9a\x86\xfcS\xa5\x99\xe3\xa7\xe9n\x04" +
	"\x9b\x16\xb6+\x01\x9f\xdc\x193a\x18~\x11\x9cA\xac" +
	"v\xb8|V\x83\xcf\xccF+\xebKa\x86\xa3Uv" +
	"(\xd0\xdf\x96$\xfc\xff\x07+s0\xf8P\x1ayN" +
	"8$e3\x9e\xf9\xcf\x014?2(\xddj7^" +
	"PEs\x1f:^\xe1\xd9\xcc\x00\x96l\xff\xe3l\xff" +
	"\x1b\x00\x00\xff\xff \xca\xdb "

func init() {
	schemas.Register(schema_cd6ed2180540008c,
		0x80ba300a9babc95b,
		0x8635df752d5e8709,
		0x8738a1e15f03a2c6,
		0x8b17ebc3a878547d,
		0x9034b47b50ec3828,
		0x944af56ed9250476,
		0x94c029bc0d5d837d,
		0x9a854004bdf77cec,
		0x9a8a54a402d8600c,
		0xa07734b165754dfe,
		0xa181da1f9f982014,
		0xa184693083b66c59,
		0xaea61579d1d72744,
		0xb134fca646aa9b8a,
		0xb25fa57328366e7b,
		0xb5a6902f0d98e79a,
		0xbc4667f0c566ed1b,
		0xbd8e7935ff05370a,
		0xbf895d6d45760872,
		0xc24dcb44431416fd,
		0xc2c782918a4d5231,
		0xccae8add586ebfcc,
		0xd619b9809a56774e,
		0xd6e6a8542f756fa4,
		0xe921f24ace89868c,
		0xebb00838ecd8fb5c,
		0xef7af10b7cfa6e86,
		0xfa0c6b017caeafc9,
		0xfadea51c36b495d7,
		0xfb03fbde72bfd77b,
		0xfed3083ae3a62664)
}

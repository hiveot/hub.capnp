// Code generated by capnpc-go. DO NOT EDIT.

package hubapi

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

type KeyValueMap capnp.Struct

// KeyValueMap_TypeID is the unique identifier for the type KeyValueMap.
const KeyValueMap_TypeID = 0xf5b8f559366e8d7d

func NewKeyValueMap(s *capnp.Segment) (KeyValueMap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return KeyValueMap(st), err
}

func NewRootKeyValueMap(s *capnp.Segment) (KeyValueMap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return KeyValueMap(st), err
}

func ReadRootKeyValueMap(msg *capnp.Message) (KeyValueMap, error) {
	root, err := msg.Root()
	return KeyValueMap(root.Struct()), err
}

func (s KeyValueMap) String() string {
	str, _ := text.Marshal(0xf5b8f559366e8d7d, capnp.Struct(s))
	return str
}

func (s KeyValueMap) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (KeyValueMap) DecodeFromPtr(p capnp.Ptr) KeyValueMap {
	return KeyValueMap(capnp.Struct{}.DecodeFromPtr(p))
}

func (s KeyValueMap) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s KeyValueMap) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s KeyValueMap) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s KeyValueMap) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s KeyValueMap) Entries() (KeyValueMap_Entry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return KeyValueMap_Entry_List(p.List()), err
}

func (s KeyValueMap) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s KeyValueMap) SetEntries(v KeyValueMap_Entry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated KeyValueMap_Entry_List, preferring placement in s's segment.
func (s KeyValueMap) NewEntries(n int32) (KeyValueMap_Entry_List, error) {
	l, err := NewKeyValueMap_Entry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return KeyValueMap_Entry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// KeyValueMap_List is a list of KeyValueMap.
type KeyValueMap_List = capnp.StructList[KeyValueMap]

// NewKeyValueMap creates a new list of KeyValueMap.
func NewKeyValueMap_List(s *capnp.Segment, sz int32) (KeyValueMap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[KeyValueMap](l), err
}

// KeyValueMap_Future is a wrapper for a KeyValueMap promised by a client call.
type KeyValueMap_Future struct{ *capnp.Future }

func (f KeyValueMap_Future) Struct() (KeyValueMap, error) {
	p, err := f.Future.Ptr()
	return KeyValueMap(p.Struct()), err
}

type KeyValueMap_Entry capnp.Struct

// KeyValueMap_Entry_TypeID is the unique identifier for the type KeyValueMap_Entry.
const KeyValueMap_Entry_TypeID = 0xd929beeebbbcb3a1

func NewKeyValueMap_Entry(s *capnp.Segment) (KeyValueMap_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return KeyValueMap_Entry(st), err
}

func NewRootKeyValueMap_Entry(s *capnp.Segment) (KeyValueMap_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return KeyValueMap_Entry(st), err
}

func ReadRootKeyValueMap_Entry(msg *capnp.Message) (KeyValueMap_Entry, error) {
	root, err := msg.Root()
	return KeyValueMap_Entry(root.Struct()), err
}

func (s KeyValueMap_Entry) String() string {
	str, _ := text.Marshal(0xd929beeebbbcb3a1, capnp.Struct(s))
	return str
}

func (s KeyValueMap_Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (KeyValueMap_Entry) DecodeFromPtr(p capnp.Ptr) KeyValueMap_Entry {
	return KeyValueMap_Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s KeyValueMap_Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s KeyValueMap_Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s KeyValueMap_Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s KeyValueMap_Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s KeyValueMap_Entry) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s KeyValueMap_Entry) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s KeyValueMap_Entry) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s KeyValueMap_Entry) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s KeyValueMap_Entry) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s KeyValueMap_Entry) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s KeyValueMap_Entry) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// KeyValueMap_Entry_List is a list of KeyValueMap_Entry.
type KeyValueMap_Entry_List = capnp.StructList[KeyValueMap_Entry]

// NewKeyValueMap_Entry creates a new list of KeyValueMap_Entry.
func NewKeyValueMap_Entry_List(s *capnp.Segment, sz int32) (KeyValueMap_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[KeyValueMap_Entry](l), err
}

// KeyValueMap_Entry_Future is a wrapper for a KeyValueMap_Entry promised by a client call.
type KeyValueMap_Entry_Future struct{ *capnp.Future }

func (f KeyValueMap_Entry_Future) Struct() (KeyValueMap_Entry, error) {
	p, err := f.Future.Ptr()
	return KeyValueMap_Entry(p.Struct()), err
}

type BucketStoreInfo capnp.Struct

// BucketStoreInfo_TypeID is the unique identifier for the type BucketStoreInfo.
const BucketStoreInfo_TypeID = 0x8c845f36ae42d93d

func NewBucketStoreInfo(s *capnp.Segment) (BucketStoreInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return BucketStoreInfo(st), err
}

func NewRootBucketStoreInfo(s *capnp.Segment) (BucketStoreInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return BucketStoreInfo(st), err
}

func ReadRootBucketStoreInfo(msg *capnp.Message) (BucketStoreInfo, error) {
	root, err := msg.Root()
	return BucketStoreInfo(root.Struct()), err
}

func (s BucketStoreInfo) String() string {
	str, _ := text.Marshal(0x8c845f36ae42d93d, capnp.Struct(s))
	return str
}

func (s BucketStoreInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BucketStoreInfo) DecodeFromPtr(p capnp.Ptr) BucketStoreInfo {
	return BucketStoreInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BucketStoreInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BucketStoreInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BucketStoreInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BucketStoreInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BucketStoreInfo) DataSize() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s BucketStoreInfo) SetDataSize(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s BucketStoreInfo) Engine() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BucketStoreInfo) HasEngine() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BucketStoreInfo) EngineBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BucketStoreInfo) SetEngine(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s BucketStoreInfo) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s BucketStoreInfo) HasId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s BucketStoreInfo) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s BucketStoreInfo) SetId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s BucketStoreInfo) NrRecords() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s BucketStoreInfo) SetNrRecords(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// BucketStoreInfo_List is a list of BucketStoreInfo.
type BucketStoreInfo_List = capnp.StructList[BucketStoreInfo]

// NewBucketStoreInfo creates a new list of BucketStoreInfo.
func NewBucketStoreInfo_List(s *capnp.Segment, sz int32) (BucketStoreInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[BucketStoreInfo](l), err
}

// BucketStoreInfo_Future is a wrapper for a BucketStoreInfo promised by a client call.
type BucketStoreInfo_Future struct{ *capnp.Future }

func (f BucketStoreInfo_Future) Struct() (BucketStoreInfo, error) {
	p, err := f.Future.Ptr()
	return BucketStoreInfo(p.Struct()), err
}

type CapBucketCursor capnp.Client

// CapBucketCursor_TypeID is the unique identifier for the type CapBucketCursor.
const CapBucketCursor_TypeID = 0xa11bc07e0c80620f

func (c CapBucketCursor) First(ctx context.Context, params func(CapBucketCursor_first_Params) error) (CapBucketCursor_first_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa11bc07e0c80620f,
			MethodID:      0,
			InterfaceName: "hubapi/Bucket.capnp:CapBucketCursor",
			MethodName:    "first",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapBucketCursor_first_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapBucketCursor_first_Results_Future{Future: ans.Future()}, release
}
func (c CapBucketCursor) Last(ctx context.Context, params func(CapBucketCursor_last_Params) error) (CapBucketCursor_last_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa11bc07e0c80620f,
			MethodID:      1,
			InterfaceName: "hubapi/Bucket.capnp:CapBucketCursor",
			MethodName:    "last",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapBucketCursor_last_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapBucketCursor_last_Results_Future{Future: ans.Future()}, release
}
func (c CapBucketCursor) Next(ctx context.Context, params func(CapBucketCursor_next_Params) error) (CapBucketCursor_next_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa11bc07e0c80620f,
			MethodID:      2,
			InterfaceName: "hubapi/Bucket.capnp:CapBucketCursor",
			MethodName:    "next",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapBucketCursor_next_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapBucketCursor_next_Results_Future{Future: ans.Future()}, release
}
func (c CapBucketCursor) NextN(ctx context.Context, params func(CapBucketCursor_nextN_Params) error) (CapBucketCursor_nextN_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa11bc07e0c80620f,
			MethodID:      3,
			InterfaceName: "hubapi/Bucket.capnp:CapBucketCursor",
			MethodName:    "nextN",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapBucketCursor_nextN_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapBucketCursor_nextN_Results_Future{Future: ans.Future()}, release
}
func (c CapBucketCursor) Prev(ctx context.Context, params func(CapBucketCursor_prev_Params) error) (CapBucketCursor_prev_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa11bc07e0c80620f,
			MethodID:      4,
			InterfaceName: "hubapi/Bucket.capnp:CapBucketCursor",
			MethodName:    "prev",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapBucketCursor_prev_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapBucketCursor_prev_Results_Future{Future: ans.Future()}, release
}
func (c CapBucketCursor) PrevN(ctx context.Context, params func(CapBucketCursor_prevN_Params) error) (CapBucketCursor_prevN_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa11bc07e0c80620f,
			MethodID:      5,
			InterfaceName: "hubapi/Bucket.capnp:CapBucketCursor",
			MethodName:    "prevN",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapBucketCursor_prevN_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapBucketCursor_prevN_Results_Future{Future: ans.Future()}, release
}
func (c CapBucketCursor) Seek(ctx context.Context, params func(CapBucketCursor_seek_Params) error) (CapBucketCursor_seek_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa11bc07e0c80620f,
			MethodID:      6,
			InterfaceName: "hubapi/Bucket.capnp:CapBucketCursor",
			MethodName:    "seek",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapBucketCursor_seek_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapBucketCursor_seek_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapBucketCursor) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapBucketCursor) AddRef() CapBucketCursor {
	return CapBucketCursor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapBucketCursor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapBucketCursor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapBucketCursor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapBucketCursor) DecodeFromPtr(p capnp.Ptr) CapBucketCursor {
	return CapBucketCursor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapBucketCursor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapBucketCursor) IsSame(other CapBucketCursor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapBucketCursor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapBucketCursor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapBucketCursor_Server is a CapBucketCursor with a local implementation.
type CapBucketCursor_Server interface {
	First(context.Context, CapBucketCursor_first) error

	Last(context.Context, CapBucketCursor_last) error

	Next(context.Context, CapBucketCursor_next) error

	NextN(context.Context, CapBucketCursor_nextN) error

	Prev(context.Context, CapBucketCursor_prev) error

	PrevN(context.Context, CapBucketCursor_prevN) error

	Seek(context.Context, CapBucketCursor_seek) error
}

// CapBucketCursor_NewServer creates a new Server from an implementation of CapBucketCursor_Server.
func CapBucketCursor_NewServer(s CapBucketCursor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapBucketCursor_Methods(nil, s), s, c)
}

// CapBucketCursor_ServerToClient creates a new Client from an implementation of CapBucketCursor_Server.
// The caller is responsible for calling Release on the returned Client.
func CapBucketCursor_ServerToClient(s CapBucketCursor_Server) CapBucketCursor {
	return CapBucketCursor(capnp.NewClient(CapBucketCursor_NewServer(s)))
}

// CapBucketCursor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapBucketCursor_Methods(methods []server.Method, s CapBucketCursor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 7)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa11bc07e0c80620f,
			MethodID:      0,
			InterfaceName: "hubapi/Bucket.capnp:CapBucketCursor",
			MethodName:    "first",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.First(ctx, CapBucketCursor_first{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa11bc07e0c80620f,
			MethodID:      1,
			InterfaceName: "hubapi/Bucket.capnp:CapBucketCursor",
			MethodName:    "last",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Last(ctx, CapBucketCursor_last{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa11bc07e0c80620f,
			MethodID:      2,
			InterfaceName: "hubapi/Bucket.capnp:CapBucketCursor",
			MethodName:    "next",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Next(ctx, CapBucketCursor_next{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa11bc07e0c80620f,
			MethodID:      3,
			InterfaceName: "hubapi/Bucket.capnp:CapBucketCursor",
			MethodName:    "nextN",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NextN(ctx, CapBucketCursor_nextN{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa11bc07e0c80620f,
			MethodID:      4,
			InterfaceName: "hubapi/Bucket.capnp:CapBucketCursor",
			MethodName:    "prev",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Prev(ctx, CapBucketCursor_prev{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa11bc07e0c80620f,
			MethodID:      5,
			InterfaceName: "hubapi/Bucket.capnp:CapBucketCursor",
			MethodName:    "prevN",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PrevN(ctx, CapBucketCursor_prevN{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa11bc07e0c80620f,
			MethodID:      6,
			InterfaceName: "hubapi/Bucket.capnp:CapBucketCursor",
			MethodName:    "seek",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Seek(ctx, CapBucketCursor_seek{call})
		},
	})

	return methods
}

// CapBucketCursor_first holds the state for a server call to CapBucketCursor.first.
// See server.Call for documentation.
type CapBucketCursor_first struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapBucketCursor_first) Args() CapBucketCursor_first_Params {
	return CapBucketCursor_first_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapBucketCursor_first) AllocResults() (CapBucketCursor_first_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapBucketCursor_first_Results(r), err
}

// CapBucketCursor_last holds the state for a server call to CapBucketCursor.last.
// See server.Call for documentation.
type CapBucketCursor_last struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapBucketCursor_last) Args() CapBucketCursor_last_Params {
	return CapBucketCursor_last_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapBucketCursor_last) AllocResults() (CapBucketCursor_last_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapBucketCursor_last_Results(r), err
}

// CapBucketCursor_next holds the state for a server call to CapBucketCursor.next.
// See server.Call for documentation.
type CapBucketCursor_next struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapBucketCursor_next) Args() CapBucketCursor_next_Params {
	return CapBucketCursor_next_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapBucketCursor_next) AllocResults() (CapBucketCursor_next_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapBucketCursor_next_Results(r), err
}

// CapBucketCursor_nextN holds the state for a server call to CapBucketCursor.nextN.
// See server.Call for documentation.
type CapBucketCursor_nextN struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapBucketCursor_nextN) Args() CapBucketCursor_nextN_Params {
	return CapBucketCursor_nextN_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapBucketCursor_nextN) AllocResults() (CapBucketCursor_nextN_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapBucketCursor_nextN_Results(r), err
}

// CapBucketCursor_prev holds the state for a server call to CapBucketCursor.prev.
// See server.Call for documentation.
type CapBucketCursor_prev struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapBucketCursor_prev) Args() CapBucketCursor_prev_Params {
	return CapBucketCursor_prev_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapBucketCursor_prev) AllocResults() (CapBucketCursor_prev_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapBucketCursor_prev_Results(r), err
}

// CapBucketCursor_prevN holds the state for a server call to CapBucketCursor.prevN.
// See server.Call for documentation.
type CapBucketCursor_prevN struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapBucketCursor_prevN) Args() CapBucketCursor_prevN_Params {
	return CapBucketCursor_prevN_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapBucketCursor_prevN) AllocResults() (CapBucketCursor_prevN_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapBucketCursor_prevN_Results(r), err
}

// CapBucketCursor_seek holds the state for a server call to CapBucketCursor.seek.
// See server.Call for documentation.
type CapBucketCursor_seek struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapBucketCursor_seek) Args() CapBucketCursor_seek_Params {
	return CapBucketCursor_seek_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapBucketCursor_seek) AllocResults() (CapBucketCursor_seek_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapBucketCursor_seek_Results(r), err
}

// CapBucketCursor_List is a list of CapBucketCursor.
type CapBucketCursor_List = capnp.CapList[CapBucketCursor]

// NewCapBucketCursor creates a new list of CapBucketCursor.
func NewCapBucketCursor_List(s *capnp.Segment, sz int32) (CapBucketCursor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapBucketCursor](l), err
}

type CapBucketCursor_first_Params capnp.Struct

// CapBucketCursor_first_Params_TypeID is the unique identifier for the type CapBucketCursor_first_Params.
const CapBucketCursor_first_Params_TypeID = 0xa68d3c040a138fc4

func NewCapBucketCursor_first_Params(s *capnp.Segment) (CapBucketCursor_first_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapBucketCursor_first_Params(st), err
}

func NewRootCapBucketCursor_first_Params(s *capnp.Segment) (CapBucketCursor_first_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapBucketCursor_first_Params(st), err
}

func ReadRootCapBucketCursor_first_Params(msg *capnp.Message) (CapBucketCursor_first_Params, error) {
	root, err := msg.Root()
	return CapBucketCursor_first_Params(root.Struct()), err
}

func (s CapBucketCursor_first_Params) String() string {
	str, _ := text.Marshal(0xa68d3c040a138fc4, capnp.Struct(s))
	return str
}

func (s CapBucketCursor_first_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapBucketCursor_first_Params) DecodeFromPtr(p capnp.Ptr) CapBucketCursor_first_Params {
	return CapBucketCursor_first_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapBucketCursor_first_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapBucketCursor_first_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapBucketCursor_first_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapBucketCursor_first_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapBucketCursor_first_Params_List is a list of CapBucketCursor_first_Params.
type CapBucketCursor_first_Params_List = capnp.StructList[CapBucketCursor_first_Params]

// NewCapBucketCursor_first_Params creates a new list of CapBucketCursor_first_Params.
func NewCapBucketCursor_first_Params_List(s *capnp.Segment, sz int32) (CapBucketCursor_first_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapBucketCursor_first_Params](l), err
}

// CapBucketCursor_first_Params_Future is a wrapper for a CapBucketCursor_first_Params promised by a client call.
type CapBucketCursor_first_Params_Future struct{ *capnp.Future }

func (f CapBucketCursor_first_Params_Future) Struct() (CapBucketCursor_first_Params, error) {
	p, err := f.Future.Ptr()
	return CapBucketCursor_first_Params(p.Struct()), err
}

type CapBucketCursor_first_Results capnp.Struct

// CapBucketCursor_first_Results_TypeID is the unique identifier for the type CapBucketCursor_first_Results.
const CapBucketCursor_first_Results_TypeID = 0x92163fe8dfbba335

func NewCapBucketCursor_first_Results(s *capnp.Segment) (CapBucketCursor_first_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapBucketCursor_first_Results(st), err
}

func NewRootCapBucketCursor_first_Results(s *capnp.Segment) (CapBucketCursor_first_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapBucketCursor_first_Results(st), err
}

func ReadRootCapBucketCursor_first_Results(msg *capnp.Message) (CapBucketCursor_first_Results, error) {
	root, err := msg.Root()
	return CapBucketCursor_first_Results(root.Struct()), err
}

func (s CapBucketCursor_first_Results) String() string {
	str, _ := text.Marshal(0x92163fe8dfbba335, capnp.Struct(s))
	return str
}

func (s CapBucketCursor_first_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapBucketCursor_first_Results) DecodeFromPtr(p capnp.Ptr) CapBucketCursor_first_Results {
	return CapBucketCursor_first_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapBucketCursor_first_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapBucketCursor_first_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapBucketCursor_first_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapBucketCursor_first_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapBucketCursor_first_Results) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapBucketCursor_first_Results) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapBucketCursor_first_Results) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapBucketCursor_first_Results) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapBucketCursor_first_Results) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s CapBucketCursor_first_Results) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapBucketCursor_first_Results) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s CapBucketCursor_first_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapBucketCursor_first_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapBucketCursor_first_Results_List is a list of CapBucketCursor_first_Results.
type CapBucketCursor_first_Results_List = capnp.StructList[CapBucketCursor_first_Results]

// NewCapBucketCursor_first_Results creates a new list of CapBucketCursor_first_Results.
func NewCapBucketCursor_first_Results_List(s *capnp.Segment, sz int32) (CapBucketCursor_first_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[CapBucketCursor_first_Results](l), err
}

// CapBucketCursor_first_Results_Future is a wrapper for a CapBucketCursor_first_Results promised by a client call.
type CapBucketCursor_first_Results_Future struct{ *capnp.Future }

func (f CapBucketCursor_first_Results_Future) Struct() (CapBucketCursor_first_Results, error) {
	p, err := f.Future.Ptr()
	return CapBucketCursor_first_Results(p.Struct()), err
}

type CapBucketCursor_last_Params capnp.Struct

// CapBucketCursor_last_Params_TypeID is the unique identifier for the type CapBucketCursor_last_Params.
const CapBucketCursor_last_Params_TypeID = 0x85be05195246e76a

func NewCapBucketCursor_last_Params(s *capnp.Segment) (CapBucketCursor_last_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapBucketCursor_last_Params(st), err
}

func NewRootCapBucketCursor_last_Params(s *capnp.Segment) (CapBucketCursor_last_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapBucketCursor_last_Params(st), err
}

func ReadRootCapBucketCursor_last_Params(msg *capnp.Message) (CapBucketCursor_last_Params, error) {
	root, err := msg.Root()
	return CapBucketCursor_last_Params(root.Struct()), err
}

func (s CapBucketCursor_last_Params) String() string {
	str, _ := text.Marshal(0x85be05195246e76a, capnp.Struct(s))
	return str
}

func (s CapBucketCursor_last_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapBucketCursor_last_Params) DecodeFromPtr(p capnp.Ptr) CapBucketCursor_last_Params {
	return CapBucketCursor_last_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapBucketCursor_last_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapBucketCursor_last_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapBucketCursor_last_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapBucketCursor_last_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapBucketCursor_last_Params_List is a list of CapBucketCursor_last_Params.
type CapBucketCursor_last_Params_List = capnp.StructList[CapBucketCursor_last_Params]

// NewCapBucketCursor_last_Params creates a new list of CapBucketCursor_last_Params.
func NewCapBucketCursor_last_Params_List(s *capnp.Segment, sz int32) (CapBucketCursor_last_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapBucketCursor_last_Params](l), err
}

// CapBucketCursor_last_Params_Future is a wrapper for a CapBucketCursor_last_Params promised by a client call.
type CapBucketCursor_last_Params_Future struct{ *capnp.Future }

func (f CapBucketCursor_last_Params_Future) Struct() (CapBucketCursor_last_Params, error) {
	p, err := f.Future.Ptr()
	return CapBucketCursor_last_Params(p.Struct()), err
}

type CapBucketCursor_last_Results capnp.Struct

// CapBucketCursor_last_Results_TypeID is the unique identifier for the type CapBucketCursor_last_Results.
const CapBucketCursor_last_Results_TypeID = 0xbec9f2412880c3c4

func NewCapBucketCursor_last_Results(s *capnp.Segment) (CapBucketCursor_last_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapBucketCursor_last_Results(st), err
}

func NewRootCapBucketCursor_last_Results(s *capnp.Segment) (CapBucketCursor_last_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapBucketCursor_last_Results(st), err
}

func ReadRootCapBucketCursor_last_Results(msg *capnp.Message) (CapBucketCursor_last_Results, error) {
	root, err := msg.Root()
	return CapBucketCursor_last_Results(root.Struct()), err
}

func (s CapBucketCursor_last_Results) String() string {
	str, _ := text.Marshal(0xbec9f2412880c3c4, capnp.Struct(s))
	return str
}

func (s CapBucketCursor_last_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapBucketCursor_last_Results) DecodeFromPtr(p capnp.Ptr) CapBucketCursor_last_Results {
	return CapBucketCursor_last_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapBucketCursor_last_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapBucketCursor_last_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapBucketCursor_last_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapBucketCursor_last_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapBucketCursor_last_Results) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapBucketCursor_last_Results) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapBucketCursor_last_Results) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapBucketCursor_last_Results) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapBucketCursor_last_Results) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s CapBucketCursor_last_Results) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapBucketCursor_last_Results) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s CapBucketCursor_last_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapBucketCursor_last_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapBucketCursor_last_Results_List is a list of CapBucketCursor_last_Results.
type CapBucketCursor_last_Results_List = capnp.StructList[CapBucketCursor_last_Results]

// NewCapBucketCursor_last_Results creates a new list of CapBucketCursor_last_Results.
func NewCapBucketCursor_last_Results_List(s *capnp.Segment, sz int32) (CapBucketCursor_last_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[CapBucketCursor_last_Results](l), err
}

// CapBucketCursor_last_Results_Future is a wrapper for a CapBucketCursor_last_Results promised by a client call.
type CapBucketCursor_last_Results_Future struct{ *capnp.Future }

func (f CapBucketCursor_last_Results_Future) Struct() (CapBucketCursor_last_Results, error) {
	p, err := f.Future.Ptr()
	return CapBucketCursor_last_Results(p.Struct()), err
}

type CapBucketCursor_next_Params capnp.Struct

// CapBucketCursor_next_Params_TypeID is the unique identifier for the type CapBucketCursor_next_Params.
const CapBucketCursor_next_Params_TypeID = 0xe474a76a2f0a28aa

func NewCapBucketCursor_next_Params(s *capnp.Segment) (CapBucketCursor_next_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapBucketCursor_next_Params(st), err
}

func NewRootCapBucketCursor_next_Params(s *capnp.Segment) (CapBucketCursor_next_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapBucketCursor_next_Params(st), err
}

func ReadRootCapBucketCursor_next_Params(msg *capnp.Message) (CapBucketCursor_next_Params, error) {
	root, err := msg.Root()
	return CapBucketCursor_next_Params(root.Struct()), err
}

func (s CapBucketCursor_next_Params) String() string {
	str, _ := text.Marshal(0xe474a76a2f0a28aa, capnp.Struct(s))
	return str
}

func (s CapBucketCursor_next_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapBucketCursor_next_Params) DecodeFromPtr(p capnp.Ptr) CapBucketCursor_next_Params {
	return CapBucketCursor_next_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapBucketCursor_next_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapBucketCursor_next_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapBucketCursor_next_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapBucketCursor_next_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapBucketCursor_next_Params_List is a list of CapBucketCursor_next_Params.
type CapBucketCursor_next_Params_List = capnp.StructList[CapBucketCursor_next_Params]

// NewCapBucketCursor_next_Params creates a new list of CapBucketCursor_next_Params.
func NewCapBucketCursor_next_Params_List(s *capnp.Segment, sz int32) (CapBucketCursor_next_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapBucketCursor_next_Params](l), err
}

// CapBucketCursor_next_Params_Future is a wrapper for a CapBucketCursor_next_Params promised by a client call.
type CapBucketCursor_next_Params_Future struct{ *capnp.Future }

func (f CapBucketCursor_next_Params_Future) Struct() (CapBucketCursor_next_Params, error) {
	p, err := f.Future.Ptr()
	return CapBucketCursor_next_Params(p.Struct()), err
}

type CapBucketCursor_next_Results capnp.Struct

// CapBucketCursor_next_Results_TypeID is the unique identifier for the type CapBucketCursor_next_Results.
const CapBucketCursor_next_Results_TypeID = 0xf4d0d1cc3d7621b4

func NewCapBucketCursor_next_Results(s *capnp.Segment) (CapBucketCursor_next_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapBucketCursor_next_Results(st), err
}

func NewRootCapBucketCursor_next_Results(s *capnp.Segment) (CapBucketCursor_next_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapBucketCursor_next_Results(st), err
}

func ReadRootCapBucketCursor_next_Results(msg *capnp.Message) (CapBucketCursor_next_Results, error) {
	root, err := msg.Root()
	return CapBucketCursor_next_Results(root.Struct()), err
}

func (s CapBucketCursor_next_Results) String() string {
	str, _ := text.Marshal(0xf4d0d1cc3d7621b4, capnp.Struct(s))
	return str
}

func (s CapBucketCursor_next_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapBucketCursor_next_Results) DecodeFromPtr(p capnp.Ptr) CapBucketCursor_next_Results {
	return CapBucketCursor_next_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapBucketCursor_next_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapBucketCursor_next_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapBucketCursor_next_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapBucketCursor_next_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapBucketCursor_next_Results) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapBucketCursor_next_Results) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapBucketCursor_next_Results) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapBucketCursor_next_Results) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapBucketCursor_next_Results) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s CapBucketCursor_next_Results) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapBucketCursor_next_Results) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s CapBucketCursor_next_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapBucketCursor_next_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapBucketCursor_next_Results_List is a list of CapBucketCursor_next_Results.
type CapBucketCursor_next_Results_List = capnp.StructList[CapBucketCursor_next_Results]

// NewCapBucketCursor_next_Results creates a new list of CapBucketCursor_next_Results.
func NewCapBucketCursor_next_Results_List(s *capnp.Segment, sz int32) (CapBucketCursor_next_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[CapBucketCursor_next_Results](l), err
}

// CapBucketCursor_next_Results_Future is a wrapper for a CapBucketCursor_next_Results promised by a client call.
type CapBucketCursor_next_Results_Future struct{ *capnp.Future }

func (f CapBucketCursor_next_Results_Future) Struct() (CapBucketCursor_next_Results, error) {
	p, err := f.Future.Ptr()
	return CapBucketCursor_next_Results(p.Struct()), err
}

type CapBucketCursor_nextN_Params capnp.Struct

// CapBucketCursor_nextN_Params_TypeID is the unique identifier for the type CapBucketCursor_nextN_Params.
const CapBucketCursor_nextN_Params_TypeID = 0xb722198a741d6b09

func NewCapBucketCursor_nextN_Params(s *capnp.Segment) (CapBucketCursor_nextN_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapBucketCursor_nextN_Params(st), err
}

func NewRootCapBucketCursor_nextN_Params(s *capnp.Segment) (CapBucketCursor_nextN_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapBucketCursor_nextN_Params(st), err
}

func ReadRootCapBucketCursor_nextN_Params(msg *capnp.Message) (CapBucketCursor_nextN_Params, error) {
	root, err := msg.Root()
	return CapBucketCursor_nextN_Params(root.Struct()), err
}

func (s CapBucketCursor_nextN_Params) String() string {
	str, _ := text.Marshal(0xb722198a741d6b09, capnp.Struct(s))
	return str
}

func (s CapBucketCursor_nextN_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapBucketCursor_nextN_Params) DecodeFromPtr(p capnp.Ptr) CapBucketCursor_nextN_Params {
	return CapBucketCursor_nextN_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapBucketCursor_nextN_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapBucketCursor_nextN_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapBucketCursor_nextN_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapBucketCursor_nextN_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapBucketCursor_nextN_Params) Steps() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s CapBucketCursor_nextN_Params) SetSteps(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// CapBucketCursor_nextN_Params_List is a list of CapBucketCursor_nextN_Params.
type CapBucketCursor_nextN_Params_List = capnp.StructList[CapBucketCursor_nextN_Params]

// NewCapBucketCursor_nextN_Params creates a new list of CapBucketCursor_nextN_Params.
func NewCapBucketCursor_nextN_Params_List(s *capnp.Segment, sz int32) (CapBucketCursor_nextN_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CapBucketCursor_nextN_Params](l), err
}

// CapBucketCursor_nextN_Params_Future is a wrapper for a CapBucketCursor_nextN_Params promised by a client call.
type CapBucketCursor_nextN_Params_Future struct{ *capnp.Future }

func (f CapBucketCursor_nextN_Params_Future) Struct() (CapBucketCursor_nextN_Params, error) {
	p, err := f.Future.Ptr()
	return CapBucketCursor_nextN_Params(p.Struct()), err
}

type CapBucketCursor_nextN_Results capnp.Struct

// CapBucketCursor_nextN_Results_TypeID is the unique identifier for the type CapBucketCursor_nextN_Results.
const CapBucketCursor_nextN_Results_TypeID = 0x868c48c5a99951cf

func NewCapBucketCursor_nextN_Results(s *capnp.Segment) (CapBucketCursor_nextN_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapBucketCursor_nextN_Results(st), err
}

func NewRootCapBucketCursor_nextN_Results(s *capnp.Segment) (CapBucketCursor_nextN_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapBucketCursor_nextN_Results(st), err
}

func ReadRootCapBucketCursor_nextN_Results(msg *capnp.Message) (CapBucketCursor_nextN_Results, error) {
	root, err := msg.Root()
	return CapBucketCursor_nextN_Results(root.Struct()), err
}

func (s CapBucketCursor_nextN_Results) String() string {
	str, _ := text.Marshal(0x868c48c5a99951cf, capnp.Struct(s))
	return str
}

func (s CapBucketCursor_nextN_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapBucketCursor_nextN_Results) DecodeFromPtr(p capnp.Ptr) CapBucketCursor_nextN_Results {
	return CapBucketCursor_nextN_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapBucketCursor_nextN_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapBucketCursor_nextN_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapBucketCursor_nextN_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapBucketCursor_nextN_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapBucketCursor_nextN_Results) Docs() (KeyValueMap, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return KeyValueMap(p.Struct()), err
}

func (s CapBucketCursor_nextN_Results) HasDocs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapBucketCursor_nextN_Results) SetDocs(v KeyValueMap) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDocs sets the docs field to a newly
// allocated KeyValueMap struct, preferring placement in s's segment.
func (s CapBucketCursor_nextN_Results) NewDocs() (KeyValueMap, error) {
	ss, err := NewKeyValueMap(capnp.Struct(s).Segment())
	if err != nil {
		return KeyValueMap{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CapBucketCursor_nextN_Results) ItemsRemaining() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapBucketCursor_nextN_Results) SetItemsRemaining(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapBucketCursor_nextN_Results_List is a list of CapBucketCursor_nextN_Results.
type CapBucketCursor_nextN_Results_List = capnp.StructList[CapBucketCursor_nextN_Results]

// NewCapBucketCursor_nextN_Results creates a new list of CapBucketCursor_nextN_Results.
func NewCapBucketCursor_nextN_Results_List(s *capnp.Segment, sz int32) (CapBucketCursor_nextN_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapBucketCursor_nextN_Results](l), err
}

// CapBucketCursor_nextN_Results_Future is a wrapper for a CapBucketCursor_nextN_Results promised by a client call.
type CapBucketCursor_nextN_Results_Future struct{ *capnp.Future }

func (f CapBucketCursor_nextN_Results_Future) Struct() (CapBucketCursor_nextN_Results, error) {
	p, err := f.Future.Ptr()
	return CapBucketCursor_nextN_Results(p.Struct()), err
}
func (p CapBucketCursor_nextN_Results_Future) Docs() KeyValueMap_Future {
	return KeyValueMap_Future{Future: p.Future.Field(0, nil)}
}

type CapBucketCursor_prev_Params capnp.Struct

// CapBucketCursor_prev_Params_TypeID is the unique identifier for the type CapBucketCursor_prev_Params.
const CapBucketCursor_prev_Params_TypeID = 0x81ba0d0702530538

func NewCapBucketCursor_prev_Params(s *capnp.Segment) (CapBucketCursor_prev_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapBucketCursor_prev_Params(st), err
}

func NewRootCapBucketCursor_prev_Params(s *capnp.Segment) (CapBucketCursor_prev_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapBucketCursor_prev_Params(st), err
}

func ReadRootCapBucketCursor_prev_Params(msg *capnp.Message) (CapBucketCursor_prev_Params, error) {
	root, err := msg.Root()
	return CapBucketCursor_prev_Params(root.Struct()), err
}

func (s CapBucketCursor_prev_Params) String() string {
	str, _ := text.Marshal(0x81ba0d0702530538, capnp.Struct(s))
	return str
}

func (s CapBucketCursor_prev_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapBucketCursor_prev_Params) DecodeFromPtr(p capnp.Ptr) CapBucketCursor_prev_Params {
	return CapBucketCursor_prev_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapBucketCursor_prev_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapBucketCursor_prev_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapBucketCursor_prev_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapBucketCursor_prev_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapBucketCursor_prev_Params_List is a list of CapBucketCursor_prev_Params.
type CapBucketCursor_prev_Params_List = capnp.StructList[CapBucketCursor_prev_Params]

// NewCapBucketCursor_prev_Params creates a new list of CapBucketCursor_prev_Params.
func NewCapBucketCursor_prev_Params_List(s *capnp.Segment, sz int32) (CapBucketCursor_prev_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapBucketCursor_prev_Params](l), err
}

// CapBucketCursor_prev_Params_Future is a wrapper for a CapBucketCursor_prev_Params promised by a client call.
type CapBucketCursor_prev_Params_Future struct{ *capnp.Future }

func (f CapBucketCursor_prev_Params_Future) Struct() (CapBucketCursor_prev_Params, error) {
	p, err := f.Future.Ptr()
	return CapBucketCursor_prev_Params(p.Struct()), err
}

type CapBucketCursor_prev_Results capnp.Struct

// CapBucketCursor_prev_Results_TypeID is the unique identifier for the type CapBucketCursor_prev_Results.
const CapBucketCursor_prev_Results_TypeID = 0x80afad1a89a118e9

func NewCapBucketCursor_prev_Results(s *capnp.Segment) (CapBucketCursor_prev_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapBucketCursor_prev_Results(st), err
}

func NewRootCapBucketCursor_prev_Results(s *capnp.Segment) (CapBucketCursor_prev_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapBucketCursor_prev_Results(st), err
}

func ReadRootCapBucketCursor_prev_Results(msg *capnp.Message) (CapBucketCursor_prev_Results, error) {
	root, err := msg.Root()
	return CapBucketCursor_prev_Results(root.Struct()), err
}

func (s CapBucketCursor_prev_Results) String() string {
	str, _ := text.Marshal(0x80afad1a89a118e9, capnp.Struct(s))
	return str
}

func (s CapBucketCursor_prev_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapBucketCursor_prev_Results) DecodeFromPtr(p capnp.Ptr) CapBucketCursor_prev_Results {
	return CapBucketCursor_prev_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapBucketCursor_prev_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapBucketCursor_prev_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapBucketCursor_prev_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapBucketCursor_prev_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapBucketCursor_prev_Results) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapBucketCursor_prev_Results) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapBucketCursor_prev_Results) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapBucketCursor_prev_Results) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapBucketCursor_prev_Results) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s CapBucketCursor_prev_Results) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapBucketCursor_prev_Results) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s CapBucketCursor_prev_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapBucketCursor_prev_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapBucketCursor_prev_Results_List is a list of CapBucketCursor_prev_Results.
type CapBucketCursor_prev_Results_List = capnp.StructList[CapBucketCursor_prev_Results]

// NewCapBucketCursor_prev_Results creates a new list of CapBucketCursor_prev_Results.
func NewCapBucketCursor_prev_Results_List(s *capnp.Segment, sz int32) (CapBucketCursor_prev_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[CapBucketCursor_prev_Results](l), err
}

// CapBucketCursor_prev_Results_Future is a wrapper for a CapBucketCursor_prev_Results promised by a client call.
type CapBucketCursor_prev_Results_Future struct{ *capnp.Future }

func (f CapBucketCursor_prev_Results_Future) Struct() (CapBucketCursor_prev_Results, error) {
	p, err := f.Future.Ptr()
	return CapBucketCursor_prev_Results(p.Struct()), err
}

type CapBucketCursor_prevN_Params capnp.Struct

// CapBucketCursor_prevN_Params_TypeID is the unique identifier for the type CapBucketCursor_prevN_Params.
const CapBucketCursor_prevN_Params_TypeID = 0xd1d62e51cc686764

func NewCapBucketCursor_prevN_Params(s *capnp.Segment) (CapBucketCursor_prevN_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapBucketCursor_prevN_Params(st), err
}

func NewRootCapBucketCursor_prevN_Params(s *capnp.Segment) (CapBucketCursor_prevN_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapBucketCursor_prevN_Params(st), err
}

func ReadRootCapBucketCursor_prevN_Params(msg *capnp.Message) (CapBucketCursor_prevN_Params, error) {
	root, err := msg.Root()
	return CapBucketCursor_prevN_Params(root.Struct()), err
}

func (s CapBucketCursor_prevN_Params) String() string {
	str, _ := text.Marshal(0xd1d62e51cc686764, capnp.Struct(s))
	return str
}

func (s CapBucketCursor_prevN_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapBucketCursor_prevN_Params) DecodeFromPtr(p capnp.Ptr) CapBucketCursor_prevN_Params {
	return CapBucketCursor_prevN_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapBucketCursor_prevN_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapBucketCursor_prevN_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapBucketCursor_prevN_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapBucketCursor_prevN_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapBucketCursor_prevN_Params) Steps() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s CapBucketCursor_prevN_Params) SetSteps(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// CapBucketCursor_prevN_Params_List is a list of CapBucketCursor_prevN_Params.
type CapBucketCursor_prevN_Params_List = capnp.StructList[CapBucketCursor_prevN_Params]

// NewCapBucketCursor_prevN_Params creates a new list of CapBucketCursor_prevN_Params.
func NewCapBucketCursor_prevN_Params_List(s *capnp.Segment, sz int32) (CapBucketCursor_prevN_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CapBucketCursor_prevN_Params](l), err
}

// CapBucketCursor_prevN_Params_Future is a wrapper for a CapBucketCursor_prevN_Params promised by a client call.
type CapBucketCursor_prevN_Params_Future struct{ *capnp.Future }

func (f CapBucketCursor_prevN_Params_Future) Struct() (CapBucketCursor_prevN_Params, error) {
	p, err := f.Future.Ptr()
	return CapBucketCursor_prevN_Params(p.Struct()), err
}

type CapBucketCursor_prevN_Results capnp.Struct

// CapBucketCursor_prevN_Results_TypeID is the unique identifier for the type CapBucketCursor_prevN_Results.
const CapBucketCursor_prevN_Results_TypeID = 0xd88b83d32b65bc16

func NewCapBucketCursor_prevN_Results(s *capnp.Segment) (CapBucketCursor_prevN_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapBucketCursor_prevN_Results(st), err
}

func NewRootCapBucketCursor_prevN_Results(s *capnp.Segment) (CapBucketCursor_prevN_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapBucketCursor_prevN_Results(st), err
}

func ReadRootCapBucketCursor_prevN_Results(msg *capnp.Message) (CapBucketCursor_prevN_Results, error) {
	root, err := msg.Root()
	return CapBucketCursor_prevN_Results(root.Struct()), err
}

func (s CapBucketCursor_prevN_Results) String() string {
	str, _ := text.Marshal(0xd88b83d32b65bc16, capnp.Struct(s))
	return str
}

func (s CapBucketCursor_prevN_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapBucketCursor_prevN_Results) DecodeFromPtr(p capnp.Ptr) CapBucketCursor_prevN_Results {
	return CapBucketCursor_prevN_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapBucketCursor_prevN_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapBucketCursor_prevN_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapBucketCursor_prevN_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapBucketCursor_prevN_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapBucketCursor_prevN_Results) Docs() (KeyValueMap, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return KeyValueMap(p.Struct()), err
}

func (s CapBucketCursor_prevN_Results) HasDocs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapBucketCursor_prevN_Results) SetDocs(v KeyValueMap) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDocs sets the docs field to a newly
// allocated KeyValueMap struct, preferring placement in s's segment.
func (s CapBucketCursor_prevN_Results) NewDocs() (KeyValueMap, error) {
	ss, err := NewKeyValueMap(capnp.Struct(s).Segment())
	if err != nil {
		return KeyValueMap{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CapBucketCursor_prevN_Results) ItemsRemaining() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapBucketCursor_prevN_Results) SetItemsRemaining(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapBucketCursor_prevN_Results_List is a list of CapBucketCursor_prevN_Results.
type CapBucketCursor_prevN_Results_List = capnp.StructList[CapBucketCursor_prevN_Results]

// NewCapBucketCursor_prevN_Results creates a new list of CapBucketCursor_prevN_Results.
func NewCapBucketCursor_prevN_Results_List(s *capnp.Segment, sz int32) (CapBucketCursor_prevN_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapBucketCursor_prevN_Results](l), err
}

// CapBucketCursor_prevN_Results_Future is a wrapper for a CapBucketCursor_prevN_Results promised by a client call.
type CapBucketCursor_prevN_Results_Future struct{ *capnp.Future }

func (f CapBucketCursor_prevN_Results_Future) Struct() (CapBucketCursor_prevN_Results, error) {
	p, err := f.Future.Ptr()
	return CapBucketCursor_prevN_Results(p.Struct()), err
}
func (p CapBucketCursor_prevN_Results_Future) Docs() KeyValueMap_Future {
	return KeyValueMap_Future{Future: p.Future.Field(0, nil)}
}

type CapBucketCursor_seek_Params capnp.Struct

// CapBucketCursor_seek_Params_TypeID is the unique identifier for the type CapBucketCursor_seek_Params.
const CapBucketCursor_seek_Params_TypeID = 0xd67f13920d614679

func NewCapBucketCursor_seek_Params(s *capnp.Segment) (CapBucketCursor_seek_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapBucketCursor_seek_Params(st), err
}

func NewRootCapBucketCursor_seek_Params(s *capnp.Segment) (CapBucketCursor_seek_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapBucketCursor_seek_Params(st), err
}

func ReadRootCapBucketCursor_seek_Params(msg *capnp.Message) (CapBucketCursor_seek_Params, error) {
	root, err := msg.Root()
	return CapBucketCursor_seek_Params(root.Struct()), err
}

func (s CapBucketCursor_seek_Params) String() string {
	str, _ := text.Marshal(0xd67f13920d614679, capnp.Struct(s))
	return str
}

func (s CapBucketCursor_seek_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapBucketCursor_seek_Params) DecodeFromPtr(p capnp.Ptr) CapBucketCursor_seek_Params {
	return CapBucketCursor_seek_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapBucketCursor_seek_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapBucketCursor_seek_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapBucketCursor_seek_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapBucketCursor_seek_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapBucketCursor_seek_Params) SearchKey() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapBucketCursor_seek_Params) HasSearchKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapBucketCursor_seek_Params) SearchKeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapBucketCursor_seek_Params) SetSearchKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapBucketCursor_seek_Params_List is a list of CapBucketCursor_seek_Params.
type CapBucketCursor_seek_Params_List = capnp.StructList[CapBucketCursor_seek_Params]

// NewCapBucketCursor_seek_Params creates a new list of CapBucketCursor_seek_Params.
func NewCapBucketCursor_seek_Params_List(s *capnp.Segment, sz int32) (CapBucketCursor_seek_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapBucketCursor_seek_Params](l), err
}

// CapBucketCursor_seek_Params_Future is a wrapper for a CapBucketCursor_seek_Params promised by a client call.
type CapBucketCursor_seek_Params_Future struct{ *capnp.Future }

func (f CapBucketCursor_seek_Params_Future) Struct() (CapBucketCursor_seek_Params, error) {
	p, err := f.Future.Ptr()
	return CapBucketCursor_seek_Params(p.Struct()), err
}

type CapBucketCursor_seek_Results capnp.Struct

// CapBucketCursor_seek_Results_TypeID is the unique identifier for the type CapBucketCursor_seek_Results.
const CapBucketCursor_seek_Results_TypeID = 0x9279eeebcc13f8a4

func NewCapBucketCursor_seek_Results(s *capnp.Segment) (CapBucketCursor_seek_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapBucketCursor_seek_Results(st), err
}

func NewRootCapBucketCursor_seek_Results(s *capnp.Segment) (CapBucketCursor_seek_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CapBucketCursor_seek_Results(st), err
}

func ReadRootCapBucketCursor_seek_Results(msg *capnp.Message) (CapBucketCursor_seek_Results, error) {
	root, err := msg.Root()
	return CapBucketCursor_seek_Results(root.Struct()), err
}

func (s CapBucketCursor_seek_Results) String() string {
	str, _ := text.Marshal(0x9279eeebcc13f8a4, capnp.Struct(s))
	return str
}

func (s CapBucketCursor_seek_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapBucketCursor_seek_Results) DecodeFromPtr(p capnp.Ptr) CapBucketCursor_seek_Results {
	return CapBucketCursor_seek_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapBucketCursor_seek_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapBucketCursor_seek_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapBucketCursor_seek_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapBucketCursor_seek_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapBucketCursor_seek_Results) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapBucketCursor_seek_Results) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapBucketCursor_seek_Results) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapBucketCursor_seek_Results) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapBucketCursor_seek_Results) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s CapBucketCursor_seek_Results) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapBucketCursor_seek_Results) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s CapBucketCursor_seek_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapBucketCursor_seek_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapBucketCursor_seek_Results_List is a list of CapBucketCursor_seek_Results.
type CapBucketCursor_seek_Results_List = capnp.StructList[CapBucketCursor_seek_Results]

// NewCapBucketCursor_seek_Results creates a new list of CapBucketCursor_seek_Results.
func NewCapBucketCursor_seek_Results_List(s *capnp.Segment, sz int32) (CapBucketCursor_seek_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[CapBucketCursor_seek_Results](l), err
}

// CapBucketCursor_seek_Results_Future is a wrapper for a CapBucketCursor_seek_Results promised by a client call.
type CapBucketCursor_seek_Results_Future struct{ *capnp.Future }

func (f CapBucketCursor_seek_Results_Future) Struct() (CapBucketCursor_seek_Results, error) {
	p, err := f.Future.Ptr()
	return CapBucketCursor_seek_Results(p.Struct()), err
}

const schema_893d996fbc85a1c3 = "x\xda\xccV_h\x1c\xd5\x17>\xdf\xbd3;\xbb\xf9" +
	"e\x7f\xc9\xb0km\xabe5\xe4\xa1\xad6mS[" +
	"J\xb1d\x93\xda\xd2Z+\xb9[\x11\xfb\xa4\xd3\xec\xb4" +
	"\xd9&\xd9\xdd\xceL\xa2[\x8cM\xab\x11\x12\x1b\x84\x80" +
	"H\x1e\x17EQ\x88\xa5(\xf8\xa71(m\x11!\xa0" +
	"A,\xe6AD0\xd4 \xf4A,\xf8\"#wv" +
	"gv\x82\x98?\x0f\x1a\x9f\x92;\xf7\x9cs\xbf\xf3\x9d" +
	"s\xbe\xb3;.\xf0\xb4\xb23\xfe\xbaFL<\xa5F" +
	"\xdc\x85\xf5\xe5\x91\x8d\x93\x97\x87H4\x03D*\xd3\x88" +
	"v]\xe1\xa3 $>\xe7\x97\x09\xee^\xf58\xd3\xe2" +
	"\x9f\\ \xbd\x19D\x8a\xbc?\xa1\\\x04)\xee\x99[" +
	"\x872\x1b\xd4\xe9\xe1\xd0\xcd\xc1\xca\xcdWb\xe2\x9d\x1b" +
	"\x87/\xbd\xecG\x85\xbc\xdb\xa9\x8c\xcb\xa8\xed\xca\xb3\x04" +
	"w\xff\\\xc7{{\x9e~\xe9\x12\x89$\x98{\xad<" +
	"<U\x98\xd8?R}\xbf\xac4!qE\x06LL" +
	"*\xb7\x08\xee\xee7\xae\xfe\xf0s\xdb\xba\xf1E(G" +
	"T/\xde\x84*Q\xbe\xf9{b\xe6\x97\xdb\xa5\xc5\x16" +
	";#^\x1e\xed\x11i\xd1pr\xa8\xfe\x85\xcf\xee)" +
	"\x93\x9e\xe4\xb5\x07\x09\xbb\xe6\"MH,D\xa4\xc3|" +
	"\xe4\x0b$\xfe\xd04\"\xf7\xfa\xab\x89:\xe5\xe1\xb1\xb7" +
	"B\xc9\xcdk\xa32\xb9X\xcf&gtC\xd3\x87\xd5" +
	"\xa7\xbc\xabo5\xef\xa5y\xad\x8d\xe0^\xbf6\xb4\xb9" +
	"\xfd\xd7/\xa7\x17aQ\xa3\x9e\xc5]Q\x89%{\xba" +
	"{F\xb4\xdc\x9c\x0d\x87\x98\xac\x18|\x1a\x95!J\x87" +
	"\x8c\xf8x\xe2\xfc\xcd\xca\xeb\x15\xfe\xbe\x8f^\x94\x06\x0b" +
	"\x9e\xc1\xba)\xf3\x81o^|\xe5\xbbE\x0c\xc7c\x1e" +
	"#\x9bb\x92\xe1\xf2\xfbSWoOo\x99#\xfd>" +
	"\xb8\x83c\xf9='\xee|t\xa7\x0af0\xd6\x8a\xc4" +
	"XL\x12<\xe2\x19\xbf\xbb\xb9n\xfb\x99\xb7\x9d\x9f\xc2" +
	"\xd9\xc6\xbcR~p\xff\xc0\xfe\x99\xd9\xaf\x7f[\x94\xcc" +
	"l\xcc\xc3\xfacL&\x13\xc4\xd6\x93\x08U\xd2CT" +
	"\xaacH\x0c\xd7\xddM\x94\x18\xabk\xa3mnw\xff" +
	"I\xa3\x98\xdb\xde\xa1\xf6w\xf5\x98NK\x97Q\xcc\x17" +
	"\xf7\x1d0\x8a\x1d\xde\xf9@\xbfe\x17\xac\x96\xa2e\x0e" +
	"4gL\xbb\xbf\xd7\xb1\x89D=W\x88\x14\x10\xe9\x07" +
	"\x9b\x88D\x9aC<\xc6\xa0\x03I\x89H?\xd2J$" +
	"\x1e\xe1\x10\x9d\x0c`I0\"\xfd\x98\xfcv\x98C<" +
	"\xc1\xa0\xf5\x98%\xd4\x13C=!5`\xf4\xf6\x9b\x88" +
	"\x13C\xbcr\xcae\x01b\x00!\xc0\xa6/\x8b\xad\xd3" +
	"\xb0\x8c>\x9b|\x87\xa5\xec{\x0d\xdbY\x8d}\xde|" +
	"\xcey\xbc\x9a<l\x11\x0dr\xdf\xb2\x95H4s\x88" +
	"\x1d\x0c~\xea\xdb\xce\x11\x89\x079\xc4^\x86\x86l\xa1" +
	"\xcbFc\xad\x1c\x044\x12\xdc\x9cc\xf6\xd9\x19\xb3\x8f" +
	"\xda\x8c\\>\x97?\xfd\x97ty\x18N\x05\xcbq\xa7" +
	"`\x99G\xb4\xfc\xa9B' \x1a\x03\x0c\xc6\xa3D\xe2" +
	"\x19\x0e\xd1[\xc3\x90\xdbG$\xb2\x1c\xa2\xc8\xa03T" +
	"\xf8\xef\xdbH$\xba9\x84\xc3\xa0s$\xc1\x89\xf4\xb3" +
	"\x19\"Q\xe4\x10\xcf3\xb8Y\xc31\x8e\xe7\xce\x99D" +
	"\x04\x95\x18TB\x9b\x99?\x9d\xcb\x9b~\xadx.\xeb" +
	"\xff\xeb\xe6\xad\x8c\xd9U\xb0\xb2\x04\xdb\xb7^Y+\x9d" +
	"\xcaY\xb6S\xa3\xf3\xdfn\xa5%\xb1\xd9\xa6\xd9\xb3\x86" +
	"m\xce\xff\x0e\x9bf\x17,Y\xf7{\xb9\x1a\x12B\xf8" +
	"\"\xac\xcf\xb6\x12\xd3oh@\xb0\x01\xe0K\x9e\xfe\xf1" +
	"Vb\xfa\xa4\x06\x16H\x0a|\x05\xd1\xcb\xf2\xee5\x0d" +
	"<\x90P\xf8\x8bB\x1f\x911\x075(\xc1\xbe\x81\xbf" +
	"\x9a\xf4\xb3\xd2\xcf\xd4\xa0\x06\xba\x09_\xfe\xf4\x13\xd2\xef" +
	"\x98\x86H \x99\xf0W\x81\xde.\xfdvk)\xaf\x07" +
	"\xd2h\x90\xa3\x98F\x83\x9c\xb04R\xde\xa0\xa5\xd1 " +
	"\x07:\x8d\x94\xfc#\x8f\xb2(itbU\xfdU\x9d" +
	"oZ\x99Oe\xc4}\x1f\xa1\x04u\x8f\xcbrF9" +
	"D\x92!e;f\xd1F\x94\x18\xa2+m(Ok" +
	"\xd6\xae\xa1\x96\xd5\xf4\x7f$io\x8a\xaaq\xc3a3" +
	"\x1e\x03\x10\xeb\x19\\\xdb4\xac\xae\xee\xa3&!\xc8h" +
	"5\xa8\xd7L\x8d\x8f\x9a\xa5'%\xf1\xc7\x8cbK\xea" +
	"`\xde\xb1Jr.C(\x9aj(\x82\xban\x93\x84" +
	"n\xe6\x10\x0f-U\xc3\xe0\xc1\xff-\xd7\xaa\xab\xdd^" +
	"\xff\x15I\x0b\x91GBA\xf8\x17\x11Z+l\x86\xfb" +
	"\xa5\xa3\xda\x86\xcd\x0c\xe7\xcd\xbcc\xe5L\x1b\xff't" +
	"r\xa0\xb1\xe6J\x90\x1f\xff\x0c\x00\x00\xff\xff\x128\xe0" +
	"P"

func init() {
	schemas.Register(schema_893d996fbc85a1c3,
		0x80afad1a89a118e9,
		0x81ba0d0702530538,
		0x85be05195246e76a,
		0x868c48c5a99951cf,
		0x8c845f36ae42d93d,
		0x92163fe8dfbba335,
		0x9279eeebcc13f8a4,
		0xa11bc07e0c80620f,
		0xa68d3c040a138fc4,
		0xb722198a741d6b09,
		0xbec9f2412880c3c4,
		0xd1d62e51cc686764,
		0xd67f13920d614679,
		0xd88b83d32b65bc16,
		0xd929beeebbbcb3a1,
		0xe474a76a2f0a28aa,
		0xf4d0d1cc3d7621b4,
		0xf5b8f559366e8d7d)
}

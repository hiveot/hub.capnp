// Code generated by capnpc-go. DO NOT EDIT.

package hubapi

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

// Constants defined in History.capnp.
const (
	HistoryServiceName     = "history"
	CapNameAddHistory      = "capAddHistory"
	CapNameManageRetention = "capManageRetention"
	CapNameReadHistory     = "capReadHistory"
)

type EventRetention capnp.Struct

// EventRetention_TypeID is the unique identifier for the type EventRetention.
const EventRetention_TypeID = 0x82949d8d788d3f1c

func NewEventRetention(s *capnp.Segment) (EventRetention, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return EventRetention(st), err
}

func NewRootEventRetention(s *capnp.Segment) (EventRetention, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return EventRetention(st), err
}

func ReadRootEventRetention(msg *capnp.Message) (EventRetention, error) {
	root, err := msg.Root()
	return EventRetention(root.Struct()), err
}

func (s EventRetention) String() string {
	str, _ := text.Marshal(0x82949d8d788d3f1c, capnp.Struct(s))
	return str
}

func (s EventRetention) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EventRetention) DecodeFromPtr(p capnp.Ptr) EventRetention {
	return EventRetention(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EventRetention) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EventRetention) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EventRetention) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EventRetention) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EventRetention) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EventRetention) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EventRetention) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EventRetention) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s EventRetention) Publishers() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s EventRetention) HasPublishers() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s EventRetention) SetPublishers(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewPublishers sets the publishers field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s EventRetention) NewPublishers(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s EventRetention) Things() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s EventRetention) HasThings() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s EventRetention) SetThings(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewThings sets the things field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s EventRetention) NewThings(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s EventRetention) Exclude() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.TextList(p.List()), err
}

func (s EventRetention) HasExclude() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s EventRetention) SetExclude(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewExclude sets the exclude field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s EventRetention) NewExclude(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s EventRetention) RetentionDays() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s EventRetention) SetRetentionDays(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// EventRetention_List is a list of EventRetention.
type EventRetention_List = capnp.StructList[EventRetention]

// NewEventRetention creates a new list of EventRetention.
func NewEventRetention_List(s *capnp.Segment, sz int32) (EventRetention_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[EventRetention](l), err
}

// EventRetention_Future is a wrapper for a EventRetention promised by a client call.
type EventRetention_Future struct{ *capnp.Future }

func (f EventRetention_Future) Struct() (EventRetention, error) {
	p, err := f.Future.Ptr()
	return EventRetention(p.Struct()), err
}

type CapHistoryService capnp.Client

// CapHistoryService_TypeID is the unique identifier for the type CapHistoryService.
const CapHistoryService_TypeID = 0x934ac037c7063be0

func (c CapHistoryService) CapAddHistory(ctx context.Context, params func(CapHistoryService_capAddHistory_Params) error) (CapHistoryService_capAddHistory_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x934ac037c7063be0,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapHistoryService",
			MethodName:    "capAddHistory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryService_capAddHistory_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryService_capAddHistory_Results_Future{Future: ans.Future()}, release
}
func (c CapHistoryService) CapManageRetention(ctx context.Context, params func(CapHistoryService_capManageRetention_Params) error) (CapHistoryService_capManageRetention_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x934ac037c7063be0,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapHistoryService",
			MethodName:    "capManageRetention",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryService_capManageRetention_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryService_capManageRetention_Results_Future{Future: ans.Future()}, release
}
func (c CapHistoryService) CapReadHistory(ctx context.Context, params func(CapHistoryService_capReadHistory_Params) error) (CapHistoryService_capReadHistory_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x934ac037c7063be0,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapHistoryService",
			MethodName:    "capReadHistory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryService_capReadHistory_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryService_capReadHistory_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapHistoryService) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapHistoryService) AddRef() CapHistoryService {
	return CapHistoryService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapHistoryService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapHistoryService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapHistoryService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapHistoryService) DecodeFromPtr(p capnp.Ptr) CapHistoryService {
	return CapHistoryService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapHistoryService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapHistoryService) IsSame(other CapHistoryService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapHistoryService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapHistoryService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapHistoryService_Server is a CapHistoryService with a local implementation.
type CapHistoryService_Server interface {
	CapAddHistory(context.Context, CapHistoryService_capAddHistory) error

	CapManageRetention(context.Context, CapHistoryService_capManageRetention) error

	CapReadHistory(context.Context, CapHistoryService_capReadHistory) error
}

// CapHistoryService_NewServer creates a new Server from an implementation of CapHistoryService_Server.
func CapHistoryService_NewServer(s CapHistoryService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapHistoryService_Methods(nil, s), s, c)
}

// CapHistoryService_ServerToClient creates a new Client from an implementation of CapHistoryService_Server.
// The caller is responsible for calling Release on the returned Client.
func CapHistoryService_ServerToClient(s CapHistoryService_Server) CapHistoryService {
	return CapHistoryService(capnp.NewClient(CapHistoryService_NewServer(s)))
}

// CapHistoryService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapHistoryService_Methods(methods []server.Method, s CapHistoryService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x934ac037c7063be0,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapHistoryService",
			MethodName:    "capAddHistory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapAddHistory(ctx, CapHistoryService_capAddHistory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x934ac037c7063be0,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapHistoryService",
			MethodName:    "capManageRetention",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapManageRetention(ctx, CapHistoryService_capManageRetention{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x934ac037c7063be0,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapHistoryService",
			MethodName:    "capReadHistory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapReadHistory(ctx, CapHistoryService_capReadHistory{call})
		},
	})

	return methods
}

// CapHistoryService_capAddHistory holds the state for a server call to CapHistoryService.capAddHistory.
// See server.Call for documentation.
type CapHistoryService_capAddHistory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryService_capAddHistory) Args() CapHistoryService_capAddHistory_Params {
	return CapHistoryService_capAddHistory_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryService_capAddHistory) AllocResults() (CapHistoryService_capAddHistory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capAddHistory_Results(r), err
}

// CapHistoryService_capManageRetention holds the state for a server call to CapHistoryService.capManageRetention.
// See server.Call for documentation.
type CapHistoryService_capManageRetention struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryService_capManageRetention) Args() CapHistoryService_capManageRetention_Params {
	return CapHistoryService_capManageRetention_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryService_capManageRetention) AllocResults() (CapHistoryService_capManageRetention_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capManageRetention_Results(r), err
}

// CapHistoryService_capReadHistory holds the state for a server call to CapHistoryService.capReadHistory.
// See server.Call for documentation.
type CapHistoryService_capReadHistory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryService_capReadHistory) Args() CapHistoryService_capReadHistory_Params {
	return CapHistoryService_capReadHistory_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryService_capReadHistory) AllocResults() (CapHistoryService_capReadHistory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capReadHistory_Results(r), err
}

// CapHistoryService_List is a list of CapHistoryService.
type CapHistoryService_List = capnp.CapList[CapHistoryService]

// NewCapHistoryService creates a new list of CapHistoryService.
func NewCapHistoryService_List(s *capnp.Segment, sz int32) (CapHistoryService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapHistoryService](l), err
}

type CapHistoryService_capAddHistory_Params capnp.Struct

// CapHistoryService_capAddHistory_Params_TypeID is the unique identifier for the type CapHistoryService_capAddHistory_Params.
const CapHistoryService_capAddHistory_Params_TypeID = 0xe77e737e0f852702

func NewCapHistoryService_capAddHistory_Params(s *capnp.Segment) (CapHistoryService_capAddHistory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryService_capAddHistory_Params(st), err
}

func NewRootCapHistoryService_capAddHistory_Params(s *capnp.Segment) (CapHistoryService_capAddHistory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryService_capAddHistory_Params(st), err
}

func ReadRootCapHistoryService_capAddHistory_Params(msg *capnp.Message) (CapHistoryService_capAddHistory_Params, error) {
	root, err := msg.Root()
	return CapHistoryService_capAddHistory_Params(root.Struct()), err
}

func (s CapHistoryService_capAddHistory_Params) String() string {
	str, _ := text.Marshal(0xe77e737e0f852702, capnp.Struct(s))
	return str
}

func (s CapHistoryService_capAddHistory_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryService_capAddHistory_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryService_capAddHistory_Params {
	return CapHistoryService_capAddHistory_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryService_capAddHistory_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryService_capAddHistory_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryService_capAddHistory_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryService_capAddHistory_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryService_capAddHistory_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapHistoryService_capAddHistory_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryService_capAddHistory_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapHistoryService_capAddHistory_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapHistoryService_capAddHistory_Params) IgnoreRetention() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapHistoryService_capAddHistory_Params) SetIgnoreRetention(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapHistoryService_capAddHistory_Params_List is a list of CapHistoryService_capAddHistory_Params.
type CapHistoryService_capAddHistory_Params_List = capnp.StructList[CapHistoryService_capAddHistory_Params]

// NewCapHistoryService_capAddHistory_Params creates a new list of CapHistoryService_capAddHistory_Params.
func NewCapHistoryService_capAddHistory_Params_List(s *capnp.Segment, sz int32) (CapHistoryService_capAddHistory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryService_capAddHistory_Params](l), err
}

// CapHistoryService_capAddHistory_Params_Future is a wrapper for a CapHistoryService_capAddHistory_Params promised by a client call.
type CapHistoryService_capAddHistory_Params_Future struct{ *capnp.Future }

func (f CapHistoryService_capAddHistory_Params_Future) Struct() (CapHistoryService_capAddHistory_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryService_capAddHistory_Params(p.Struct()), err
}

type CapHistoryService_capAddHistory_Results capnp.Struct

// CapHistoryService_capAddHistory_Results_TypeID is the unique identifier for the type CapHistoryService_capAddHistory_Results.
const CapHistoryService_capAddHistory_Results_TypeID = 0xffd4b7abb0abe3b4

func NewCapHistoryService_capAddHistory_Results(s *capnp.Segment) (CapHistoryService_capAddHistory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capAddHistory_Results(st), err
}

func NewRootCapHistoryService_capAddHistory_Results(s *capnp.Segment) (CapHistoryService_capAddHistory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capAddHistory_Results(st), err
}

func ReadRootCapHistoryService_capAddHistory_Results(msg *capnp.Message) (CapHistoryService_capAddHistory_Results, error) {
	root, err := msg.Root()
	return CapHistoryService_capAddHistory_Results(root.Struct()), err
}

func (s CapHistoryService_capAddHistory_Results) String() string {
	str, _ := text.Marshal(0xffd4b7abb0abe3b4, capnp.Struct(s))
	return str
}

func (s CapHistoryService_capAddHistory_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryService_capAddHistory_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryService_capAddHistory_Results {
	return CapHistoryService_capAddHistory_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryService_capAddHistory_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryService_capAddHistory_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryService_capAddHistory_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryService_capAddHistory_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryService_capAddHistory_Results) Cap() CapAddHistory {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapAddHistory(p.Interface().Client())
}

func (s CapHistoryService_capAddHistory_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryService_capAddHistory_Results) SetCap(v CapAddHistory) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapHistoryService_capAddHistory_Results_List is a list of CapHistoryService_capAddHistory_Results.
type CapHistoryService_capAddHistory_Results_List = capnp.StructList[CapHistoryService_capAddHistory_Results]

// NewCapHistoryService_capAddHistory_Results creates a new list of CapHistoryService_capAddHistory_Results.
func NewCapHistoryService_capAddHistory_Results_List(s *capnp.Segment, sz int32) (CapHistoryService_capAddHistory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryService_capAddHistory_Results](l), err
}

// CapHistoryService_capAddHistory_Results_Future is a wrapper for a CapHistoryService_capAddHistory_Results promised by a client call.
type CapHistoryService_capAddHistory_Results_Future struct{ *capnp.Future }

func (f CapHistoryService_capAddHistory_Results_Future) Struct() (CapHistoryService_capAddHistory_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryService_capAddHistory_Results(p.Struct()), err
}
func (p CapHistoryService_capAddHistory_Results_Future) Cap() CapAddHistory {
	return CapAddHistory(p.Future.Field(0, nil).Client())
}

type CapHistoryService_capManageRetention_Params capnp.Struct

// CapHistoryService_capManageRetention_Params_TypeID is the unique identifier for the type CapHistoryService_capManageRetention_Params.
const CapHistoryService_capManageRetention_Params_TypeID = 0xf71ceab5f8e294bd

func NewCapHistoryService_capManageRetention_Params(s *capnp.Segment) (CapHistoryService_capManageRetention_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capManageRetention_Params(st), err
}

func NewRootCapHistoryService_capManageRetention_Params(s *capnp.Segment) (CapHistoryService_capManageRetention_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capManageRetention_Params(st), err
}

func ReadRootCapHistoryService_capManageRetention_Params(msg *capnp.Message) (CapHistoryService_capManageRetention_Params, error) {
	root, err := msg.Root()
	return CapHistoryService_capManageRetention_Params(root.Struct()), err
}

func (s CapHistoryService_capManageRetention_Params) String() string {
	str, _ := text.Marshal(0xf71ceab5f8e294bd, capnp.Struct(s))
	return str
}

func (s CapHistoryService_capManageRetention_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryService_capManageRetention_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryService_capManageRetention_Params {
	return CapHistoryService_capManageRetention_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryService_capManageRetention_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryService_capManageRetention_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryService_capManageRetention_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryService_capManageRetention_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryService_capManageRetention_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapHistoryService_capManageRetention_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryService_capManageRetention_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapHistoryService_capManageRetention_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapHistoryService_capManageRetention_Params_List is a list of CapHistoryService_capManageRetention_Params.
type CapHistoryService_capManageRetention_Params_List = capnp.StructList[CapHistoryService_capManageRetention_Params]

// NewCapHistoryService_capManageRetention_Params creates a new list of CapHistoryService_capManageRetention_Params.
func NewCapHistoryService_capManageRetention_Params_List(s *capnp.Segment, sz int32) (CapHistoryService_capManageRetention_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryService_capManageRetention_Params](l), err
}

// CapHistoryService_capManageRetention_Params_Future is a wrapper for a CapHistoryService_capManageRetention_Params promised by a client call.
type CapHistoryService_capManageRetention_Params_Future struct{ *capnp.Future }

func (f CapHistoryService_capManageRetention_Params_Future) Struct() (CapHistoryService_capManageRetention_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryService_capManageRetention_Params(p.Struct()), err
}

type CapHistoryService_capManageRetention_Results capnp.Struct

// CapHistoryService_capManageRetention_Results_TypeID is the unique identifier for the type CapHistoryService_capManageRetention_Results.
const CapHistoryService_capManageRetention_Results_TypeID = 0xe610c5eade193517

func NewCapHistoryService_capManageRetention_Results(s *capnp.Segment) (CapHistoryService_capManageRetention_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capManageRetention_Results(st), err
}

func NewRootCapHistoryService_capManageRetention_Results(s *capnp.Segment) (CapHistoryService_capManageRetention_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capManageRetention_Results(st), err
}

func ReadRootCapHistoryService_capManageRetention_Results(msg *capnp.Message) (CapHistoryService_capManageRetention_Results, error) {
	root, err := msg.Root()
	return CapHistoryService_capManageRetention_Results(root.Struct()), err
}

func (s CapHistoryService_capManageRetention_Results) String() string {
	str, _ := text.Marshal(0xe610c5eade193517, capnp.Struct(s))
	return str
}

func (s CapHistoryService_capManageRetention_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryService_capManageRetention_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryService_capManageRetention_Results {
	return CapHistoryService_capManageRetention_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryService_capManageRetention_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryService_capManageRetention_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryService_capManageRetention_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryService_capManageRetention_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryService_capManageRetention_Results) Cap() CapManageRetention {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapManageRetention(p.Interface().Client())
}

func (s CapHistoryService_capManageRetention_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryService_capManageRetention_Results) SetCap(v CapManageRetention) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapHistoryService_capManageRetention_Results_List is a list of CapHistoryService_capManageRetention_Results.
type CapHistoryService_capManageRetention_Results_List = capnp.StructList[CapHistoryService_capManageRetention_Results]

// NewCapHistoryService_capManageRetention_Results creates a new list of CapHistoryService_capManageRetention_Results.
func NewCapHistoryService_capManageRetention_Results_List(s *capnp.Segment, sz int32) (CapHistoryService_capManageRetention_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryService_capManageRetention_Results](l), err
}

// CapHistoryService_capManageRetention_Results_Future is a wrapper for a CapHistoryService_capManageRetention_Results promised by a client call.
type CapHistoryService_capManageRetention_Results_Future struct{ *capnp.Future }

func (f CapHistoryService_capManageRetention_Results_Future) Struct() (CapHistoryService_capManageRetention_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryService_capManageRetention_Results(p.Struct()), err
}
func (p CapHistoryService_capManageRetention_Results_Future) Cap() CapManageRetention {
	return CapManageRetention(p.Future.Field(0, nil).Client())
}

type CapHistoryService_capReadHistory_Params capnp.Struct

// CapHistoryService_capReadHistory_Params_TypeID is the unique identifier for the type CapHistoryService_capReadHistory_Params.
const CapHistoryService_capReadHistory_Params_TypeID = 0xf51b4d58d6c7f245

func NewCapHistoryService_capReadHistory_Params(s *capnp.Segment) (CapHistoryService_capReadHistory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapHistoryService_capReadHistory_Params(st), err
}

func NewRootCapHistoryService_capReadHistory_Params(s *capnp.Segment) (CapHistoryService_capReadHistory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapHistoryService_capReadHistory_Params(st), err
}

func ReadRootCapHistoryService_capReadHistory_Params(msg *capnp.Message) (CapHistoryService_capReadHistory_Params, error) {
	root, err := msg.Root()
	return CapHistoryService_capReadHistory_Params(root.Struct()), err
}

func (s CapHistoryService_capReadHistory_Params) String() string {
	str, _ := text.Marshal(0xf51b4d58d6c7f245, capnp.Struct(s))
	return str
}

func (s CapHistoryService_capReadHistory_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryService_capReadHistory_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryService_capReadHistory_Params {
	return CapHistoryService_capReadHistory_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryService_capReadHistory_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryService_capReadHistory_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryService_capReadHistory_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryService_capReadHistory_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryService_capReadHistory_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapHistoryService_capReadHistory_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryService_capReadHistory_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapHistoryService_capReadHistory_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapHistoryService_capReadHistory_Params) PublisherID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapHistoryService_capReadHistory_Params) HasPublisherID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapHistoryService_capReadHistory_Params) PublisherIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapHistoryService_capReadHistory_Params) SetPublisherID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapHistoryService_capReadHistory_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CapHistoryService_capReadHistory_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapHistoryService_capReadHistory_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CapHistoryService_capReadHistory_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// CapHistoryService_capReadHistory_Params_List is a list of CapHistoryService_capReadHistory_Params.
type CapHistoryService_capReadHistory_Params_List = capnp.StructList[CapHistoryService_capReadHistory_Params]

// NewCapHistoryService_capReadHistory_Params creates a new list of CapHistoryService_capReadHistory_Params.
func NewCapHistoryService_capReadHistory_Params_List(s *capnp.Segment, sz int32) (CapHistoryService_capReadHistory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[CapHistoryService_capReadHistory_Params](l), err
}

// CapHistoryService_capReadHistory_Params_Future is a wrapper for a CapHistoryService_capReadHistory_Params promised by a client call.
type CapHistoryService_capReadHistory_Params_Future struct{ *capnp.Future }

func (f CapHistoryService_capReadHistory_Params_Future) Struct() (CapHistoryService_capReadHistory_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryService_capReadHistory_Params(p.Struct()), err
}

type CapHistoryService_capReadHistory_Results capnp.Struct

// CapHistoryService_capReadHistory_Results_TypeID is the unique identifier for the type CapHistoryService_capReadHistory_Results.
const CapHistoryService_capReadHistory_Results_TypeID = 0x8a3402043f3ec9f0

func NewCapHistoryService_capReadHistory_Results(s *capnp.Segment) (CapHistoryService_capReadHistory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capReadHistory_Results(st), err
}

func NewRootCapHistoryService_capReadHistory_Results(s *capnp.Segment) (CapHistoryService_capReadHistory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capReadHistory_Results(st), err
}

func ReadRootCapHistoryService_capReadHistory_Results(msg *capnp.Message) (CapHistoryService_capReadHistory_Results, error) {
	root, err := msg.Root()
	return CapHistoryService_capReadHistory_Results(root.Struct()), err
}

func (s CapHistoryService_capReadHistory_Results) String() string {
	str, _ := text.Marshal(0x8a3402043f3ec9f0, capnp.Struct(s))
	return str
}

func (s CapHistoryService_capReadHistory_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryService_capReadHistory_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryService_capReadHistory_Results {
	return CapHistoryService_capReadHistory_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryService_capReadHistory_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryService_capReadHistory_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryService_capReadHistory_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryService_capReadHistory_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryService_capReadHistory_Results) Cap() CapReadHistory {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapReadHistory(p.Interface().Client())
}

func (s CapHistoryService_capReadHistory_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryService_capReadHistory_Results) SetCap(v CapReadHistory) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapHistoryService_capReadHistory_Results_List is a list of CapHistoryService_capReadHistory_Results.
type CapHistoryService_capReadHistory_Results_List = capnp.StructList[CapHistoryService_capReadHistory_Results]

// NewCapHistoryService_capReadHistory_Results creates a new list of CapHistoryService_capReadHistory_Results.
func NewCapHistoryService_capReadHistory_Results_List(s *capnp.Segment, sz int32) (CapHistoryService_capReadHistory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryService_capReadHistory_Results](l), err
}

// CapHistoryService_capReadHistory_Results_Future is a wrapper for a CapHistoryService_capReadHistory_Results promised by a client call.
type CapHistoryService_capReadHistory_Results_Future struct{ *capnp.Future }

func (f CapHistoryService_capReadHistory_Results_Future) Struct() (CapHistoryService_capReadHistory_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryService_capReadHistory_Results(p.Struct()), err
}
func (p CapHistoryService_capReadHistory_Results_Future) Cap() CapReadHistory {
	return CapReadHistory(p.Future.Field(0, nil).Client())
}

type CapAddHistory capnp.Client

// CapAddHistory_TypeID is the unique identifier for the type CapAddHistory.
const CapAddHistory_TypeID = 0xaeedfb5c318d00ee

func (c CapAddHistory) AddAction(ctx context.Context, params func(CapAddHistory_addAction_Params) error) (CapAddHistory_addAction_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaeedfb5c318d00ee,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapAddHistory",
			MethodName:    "addAction",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapAddHistory_addAction_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapAddHistory_addAction_Results_Future{Future: ans.Future()}, release
}
func (c CapAddHistory) AddEvent(ctx context.Context, params func(CapAddHistory_addEvent_Params) error) (CapAddHistory_addEvent_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaeedfb5c318d00ee,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapAddHistory",
			MethodName:    "addEvent",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapAddHistory_addEvent_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapAddHistory_addEvent_Results_Future{Future: ans.Future()}, release
}
func (c CapAddHistory) AddEvents(ctx context.Context, params func(CapAddHistory_addEvents_Params) error) (CapAddHistory_addEvents_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaeedfb5c318d00ee,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapAddHistory",
			MethodName:    "addEvents",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapAddHistory_addEvents_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapAddHistory_addEvents_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapAddHistory) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapAddHistory) AddRef() CapAddHistory {
	return CapAddHistory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapAddHistory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapAddHistory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapAddHistory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapAddHistory) DecodeFromPtr(p capnp.Ptr) CapAddHistory {
	return CapAddHistory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapAddHistory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapAddHistory) IsSame(other CapAddHistory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapAddHistory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapAddHistory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapAddHistory_Server is a CapAddHistory with a local implementation.
type CapAddHistory_Server interface {
	AddAction(context.Context, CapAddHistory_addAction) error

	AddEvent(context.Context, CapAddHistory_addEvent) error

	AddEvents(context.Context, CapAddHistory_addEvents) error
}

// CapAddHistory_NewServer creates a new Server from an implementation of CapAddHistory_Server.
func CapAddHistory_NewServer(s CapAddHistory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapAddHistory_Methods(nil, s), s, c)
}

// CapAddHistory_ServerToClient creates a new Client from an implementation of CapAddHistory_Server.
// The caller is responsible for calling Release on the returned Client.
func CapAddHistory_ServerToClient(s CapAddHistory_Server) CapAddHistory {
	return CapAddHistory(capnp.NewClient(CapAddHistory_NewServer(s)))
}

// CapAddHistory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapAddHistory_Methods(methods []server.Method, s CapAddHistory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaeedfb5c318d00ee,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapAddHistory",
			MethodName:    "addAction",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddAction(ctx, CapAddHistory_addAction{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaeedfb5c318d00ee,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapAddHistory",
			MethodName:    "addEvent",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddEvent(ctx, CapAddHistory_addEvent{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaeedfb5c318d00ee,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapAddHistory",
			MethodName:    "addEvents",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddEvents(ctx, CapAddHistory_addEvents{call})
		},
	})

	return methods
}

// CapAddHistory_addAction holds the state for a server call to CapAddHistory.addAction.
// See server.Call for documentation.
type CapAddHistory_addAction struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapAddHistory_addAction) Args() CapAddHistory_addAction_Params {
	return CapAddHistory_addAction_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapAddHistory_addAction) AllocResults() (CapAddHistory_addAction_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addAction_Results(r), err
}

// CapAddHistory_addEvent holds the state for a server call to CapAddHistory.addEvent.
// See server.Call for documentation.
type CapAddHistory_addEvent struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapAddHistory_addEvent) Args() CapAddHistory_addEvent_Params {
	return CapAddHistory_addEvent_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapAddHistory_addEvent) AllocResults() (CapAddHistory_addEvent_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addEvent_Results(r), err
}

// CapAddHistory_addEvents holds the state for a server call to CapAddHistory.addEvents.
// See server.Call for documentation.
type CapAddHistory_addEvents struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapAddHistory_addEvents) Args() CapAddHistory_addEvents_Params {
	return CapAddHistory_addEvents_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapAddHistory_addEvents) AllocResults() (CapAddHistory_addEvents_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addEvents_Results(r), err
}

// CapAddHistory_List is a list of CapAddHistory.
type CapAddHistory_List = capnp.CapList[CapAddHistory]

// NewCapAddHistory creates a new list of CapAddHistory.
func NewCapAddHistory_List(s *capnp.Segment, sz int32) (CapAddHistory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapAddHistory](l), err
}

type CapAddHistory_addAction_Params capnp.Struct

// CapAddHistory_addAction_Params_TypeID is the unique identifier for the type CapAddHistory_addAction_Params.
const CapAddHistory_addAction_Params_TypeID = 0xf2d04e4d076109a1

func NewCapAddHistory_addAction_Params(s *capnp.Segment) (CapAddHistory_addAction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAddHistory_addAction_Params(st), err
}

func NewRootCapAddHistory_addAction_Params(s *capnp.Segment) (CapAddHistory_addAction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAddHistory_addAction_Params(st), err
}

func ReadRootCapAddHistory_addAction_Params(msg *capnp.Message) (CapAddHistory_addAction_Params, error) {
	root, err := msg.Root()
	return CapAddHistory_addAction_Params(root.Struct()), err
}

func (s CapAddHistory_addAction_Params) String() string {
	str, _ := text.Marshal(0xf2d04e4d076109a1, capnp.Struct(s))
	return str
}

func (s CapAddHistory_addAction_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAddHistory_addAction_Params) DecodeFromPtr(p capnp.Ptr) CapAddHistory_addAction_Params {
	return CapAddHistory_addAction_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAddHistory_addAction_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAddHistory_addAction_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAddHistory_addAction_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAddHistory_addAction_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapAddHistory_addAction_Params) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapAddHistory_addAction_Params) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapAddHistory_addAction_Params) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapAddHistory_addAction_Params) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapAddHistory_addAction_Params_List is a list of CapAddHistory_addAction_Params.
type CapAddHistory_addAction_Params_List = capnp.StructList[CapAddHistory_addAction_Params]

// NewCapAddHistory_addAction_Params creates a new list of CapAddHistory_addAction_Params.
func NewCapAddHistory_addAction_Params_List(s *capnp.Segment, sz int32) (CapAddHistory_addAction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapAddHistory_addAction_Params](l), err
}

// CapAddHistory_addAction_Params_Future is a wrapper for a CapAddHistory_addAction_Params promised by a client call.
type CapAddHistory_addAction_Params_Future struct{ *capnp.Future }

func (f CapAddHistory_addAction_Params_Future) Struct() (CapAddHistory_addAction_Params, error) {
	p, err := f.Future.Ptr()
	return CapAddHistory_addAction_Params(p.Struct()), err
}
func (p CapAddHistory_addAction_Params_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapAddHistory_addAction_Results capnp.Struct

// CapAddHistory_addAction_Results_TypeID is the unique identifier for the type CapAddHistory_addAction_Results.
const CapAddHistory_addAction_Results_TypeID = 0xaa066f541f1a116a

func NewCapAddHistory_addAction_Results(s *capnp.Segment) (CapAddHistory_addAction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addAction_Results(st), err
}

func NewRootCapAddHistory_addAction_Results(s *capnp.Segment) (CapAddHistory_addAction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addAction_Results(st), err
}

func ReadRootCapAddHistory_addAction_Results(msg *capnp.Message) (CapAddHistory_addAction_Results, error) {
	root, err := msg.Root()
	return CapAddHistory_addAction_Results(root.Struct()), err
}

func (s CapAddHistory_addAction_Results) String() string {
	str, _ := text.Marshal(0xaa066f541f1a116a, capnp.Struct(s))
	return str
}

func (s CapAddHistory_addAction_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAddHistory_addAction_Results) DecodeFromPtr(p capnp.Ptr) CapAddHistory_addAction_Results {
	return CapAddHistory_addAction_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAddHistory_addAction_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAddHistory_addAction_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAddHistory_addAction_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAddHistory_addAction_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapAddHistory_addAction_Results_List is a list of CapAddHistory_addAction_Results.
type CapAddHistory_addAction_Results_List = capnp.StructList[CapAddHistory_addAction_Results]

// NewCapAddHistory_addAction_Results creates a new list of CapAddHistory_addAction_Results.
func NewCapAddHistory_addAction_Results_List(s *capnp.Segment, sz int32) (CapAddHistory_addAction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapAddHistory_addAction_Results](l), err
}

// CapAddHistory_addAction_Results_Future is a wrapper for a CapAddHistory_addAction_Results promised by a client call.
type CapAddHistory_addAction_Results_Future struct{ *capnp.Future }

func (f CapAddHistory_addAction_Results_Future) Struct() (CapAddHistory_addAction_Results, error) {
	p, err := f.Future.Ptr()
	return CapAddHistory_addAction_Results(p.Struct()), err
}

type CapAddHistory_addEvent_Params capnp.Struct

// CapAddHistory_addEvent_Params_TypeID is the unique identifier for the type CapAddHistory_addEvent_Params.
const CapAddHistory_addEvent_Params_TypeID = 0xd3899668953eaf95

func NewCapAddHistory_addEvent_Params(s *capnp.Segment) (CapAddHistory_addEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAddHistory_addEvent_Params(st), err
}

func NewRootCapAddHistory_addEvent_Params(s *capnp.Segment) (CapAddHistory_addEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAddHistory_addEvent_Params(st), err
}

func ReadRootCapAddHistory_addEvent_Params(msg *capnp.Message) (CapAddHistory_addEvent_Params, error) {
	root, err := msg.Root()
	return CapAddHistory_addEvent_Params(root.Struct()), err
}

func (s CapAddHistory_addEvent_Params) String() string {
	str, _ := text.Marshal(0xd3899668953eaf95, capnp.Struct(s))
	return str
}

func (s CapAddHistory_addEvent_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAddHistory_addEvent_Params) DecodeFromPtr(p capnp.Ptr) CapAddHistory_addEvent_Params {
	return CapAddHistory_addEvent_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAddHistory_addEvent_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAddHistory_addEvent_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAddHistory_addEvent_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAddHistory_addEvent_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapAddHistory_addEvent_Params) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapAddHistory_addEvent_Params) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapAddHistory_addEvent_Params) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapAddHistory_addEvent_Params) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapAddHistory_addEvent_Params_List is a list of CapAddHistory_addEvent_Params.
type CapAddHistory_addEvent_Params_List = capnp.StructList[CapAddHistory_addEvent_Params]

// NewCapAddHistory_addEvent_Params creates a new list of CapAddHistory_addEvent_Params.
func NewCapAddHistory_addEvent_Params_List(s *capnp.Segment, sz int32) (CapAddHistory_addEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapAddHistory_addEvent_Params](l), err
}

// CapAddHistory_addEvent_Params_Future is a wrapper for a CapAddHistory_addEvent_Params promised by a client call.
type CapAddHistory_addEvent_Params_Future struct{ *capnp.Future }

func (f CapAddHistory_addEvent_Params_Future) Struct() (CapAddHistory_addEvent_Params, error) {
	p, err := f.Future.Ptr()
	return CapAddHistory_addEvent_Params(p.Struct()), err
}
func (p CapAddHistory_addEvent_Params_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapAddHistory_addEvent_Results capnp.Struct

// CapAddHistory_addEvent_Results_TypeID is the unique identifier for the type CapAddHistory_addEvent_Results.
const CapAddHistory_addEvent_Results_TypeID = 0x9c3ac18a6f855cd2

func NewCapAddHistory_addEvent_Results(s *capnp.Segment) (CapAddHistory_addEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addEvent_Results(st), err
}

func NewRootCapAddHistory_addEvent_Results(s *capnp.Segment) (CapAddHistory_addEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addEvent_Results(st), err
}

func ReadRootCapAddHistory_addEvent_Results(msg *capnp.Message) (CapAddHistory_addEvent_Results, error) {
	root, err := msg.Root()
	return CapAddHistory_addEvent_Results(root.Struct()), err
}

func (s CapAddHistory_addEvent_Results) String() string {
	str, _ := text.Marshal(0x9c3ac18a6f855cd2, capnp.Struct(s))
	return str
}

func (s CapAddHistory_addEvent_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAddHistory_addEvent_Results) DecodeFromPtr(p capnp.Ptr) CapAddHistory_addEvent_Results {
	return CapAddHistory_addEvent_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAddHistory_addEvent_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAddHistory_addEvent_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAddHistory_addEvent_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAddHistory_addEvent_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapAddHistory_addEvent_Results_List is a list of CapAddHistory_addEvent_Results.
type CapAddHistory_addEvent_Results_List = capnp.StructList[CapAddHistory_addEvent_Results]

// NewCapAddHistory_addEvent_Results creates a new list of CapAddHistory_addEvent_Results.
func NewCapAddHistory_addEvent_Results_List(s *capnp.Segment, sz int32) (CapAddHistory_addEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapAddHistory_addEvent_Results](l), err
}

// CapAddHistory_addEvent_Results_Future is a wrapper for a CapAddHistory_addEvent_Results promised by a client call.
type CapAddHistory_addEvent_Results_Future struct{ *capnp.Future }

func (f CapAddHistory_addEvent_Results_Future) Struct() (CapAddHistory_addEvent_Results, error) {
	p, err := f.Future.Ptr()
	return CapAddHistory_addEvent_Results(p.Struct()), err
}

type CapAddHistory_addEvents_Params capnp.Struct

// CapAddHistory_addEvents_Params_TypeID is the unique identifier for the type CapAddHistory_addEvents_Params.
const CapAddHistory_addEvents_Params_TypeID = 0xb3a20cba1aabab09

func NewCapAddHistory_addEvents_Params(s *capnp.Segment) (CapAddHistory_addEvents_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAddHistory_addEvents_Params(st), err
}

func NewRootCapAddHistory_addEvents_Params(s *capnp.Segment) (CapAddHistory_addEvents_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAddHistory_addEvents_Params(st), err
}

func ReadRootCapAddHistory_addEvents_Params(msg *capnp.Message) (CapAddHistory_addEvents_Params, error) {
	root, err := msg.Root()
	return CapAddHistory_addEvents_Params(root.Struct()), err
}

func (s CapAddHistory_addEvents_Params) String() string {
	str, _ := text.Marshal(0xb3a20cba1aabab09, capnp.Struct(s))
	return str
}

func (s CapAddHistory_addEvents_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAddHistory_addEvents_Params) DecodeFromPtr(p capnp.Ptr) CapAddHistory_addEvents_Params {
	return CapAddHistory_addEvents_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAddHistory_addEvents_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAddHistory_addEvents_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAddHistory_addEvents_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAddHistory_addEvents_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapAddHistory_addEvents_Params) Tv() (ThingValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue_List(p.List()), err
}

func (s CapAddHistory_addEvents_Params) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapAddHistory_addEvents_Params) SetTv(v ThingValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue_List, preferring placement in s's segment.
func (s CapAddHistory_addEvents_Params) NewTv(n int32) (ThingValue_List, error) {
	l, err := NewThingValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ThingValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapAddHistory_addEvents_Params_List is a list of CapAddHistory_addEvents_Params.
type CapAddHistory_addEvents_Params_List = capnp.StructList[CapAddHistory_addEvents_Params]

// NewCapAddHistory_addEvents_Params creates a new list of CapAddHistory_addEvents_Params.
func NewCapAddHistory_addEvents_Params_List(s *capnp.Segment, sz int32) (CapAddHistory_addEvents_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapAddHistory_addEvents_Params](l), err
}

// CapAddHistory_addEvents_Params_Future is a wrapper for a CapAddHistory_addEvents_Params promised by a client call.
type CapAddHistory_addEvents_Params_Future struct{ *capnp.Future }

func (f CapAddHistory_addEvents_Params_Future) Struct() (CapAddHistory_addEvents_Params, error) {
	p, err := f.Future.Ptr()
	return CapAddHistory_addEvents_Params(p.Struct()), err
}

type CapAddHistory_addEvents_Results capnp.Struct

// CapAddHistory_addEvents_Results_TypeID is the unique identifier for the type CapAddHistory_addEvents_Results.
const CapAddHistory_addEvents_Results_TypeID = 0x95158665d71f5337

func NewCapAddHistory_addEvents_Results(s *capnp.Segment) (CapAddHistory_addEvents_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addEvents_Results(st), err
}

func NewRootCapAddHistory_addEvents_Results(s *capnp.Segment) (CapAddHistory_addEvents_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addEvents_Results(st), err
}

func ReadRootCapAddHistory_addEvents_Results(msg *capnp.Message) (CapAddHistory_addEvents_Results, error) {
	root, err := msg.Root()
	return CapAddHistory_addEvents_Results(root.Struct()), err
}

func (s CapAddHistory_addEvents_Results) String() string {
	str, _ := text.Marshal(0x95158665d71f5337, capnp.Struct(s))
	return str
}

func (s CapAddHistory_addEvents_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAddHistory_addEvents_Results) DecodeFromPtr(p capnp.Ptr) CapAddHistory_addEvents_Results {
	return CapAddHistory_addEvents_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAddHistory_addEvents_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAddHistory_addEvents_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAddHistory_addEvents_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAddHistory_addEvents_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapAddHistory_addEvents_Results_List is a list of CapAddHistory_addEvents_Results.
type CapAddHistory_addEvents_Results_List = capnp.StructList[CapAddHistory_addEvents_Results]

// NewCapAddHistory_addEvents_Results creates a new list of CapAddHistory_addEvents_Results.
func NewCapAddHistory_addEvents_Results_List(s *capnp.Segment, sz int32) (CapAddHistory_addEvents_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapAddHistory_addEvents_Results](l), err
}

// CapAddHistory_addEvents_Results_Future is a wrapper for a CapAddHistory_addEvents_Results promised by a client call.
type CapAddHistory_addEvents_Results_Future struct{ *capnp.Future }

func (f CapAddHistory_addEvents_Results_Future) Struct() (CapAddHistory_addEvents_Results, error) {
	p, err := f.Future.Ptr()
	return CapAddHistory_addEvents_Results(p.Struct()), err
}

type CapManageRetention capnp.Client

// CapManageRetention_TypeID is the unique identifier for the type CapManageRetention.
const CapManageRetention_TypeID = 0xf2086587739b71d1

func (c CapManageRetention) GetEvents(ctx context.Context, params func(CapManageRetention_getEvents_Params) error) (CapManageRetention_getEvents_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "getEvents",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageRetention_getEvents_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageRetention_getEvents_Results_Future{Future: ans.Future()}, release
}
func (c CapManageRetention) GetEventRetention(ctx context.Context, params func(CapManageRetention_getEventRetention_Params) error) (CapManageRetention_getEventRetention_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "getEventRetention",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageRetention_getEventRetention_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageRetention_getEventRetention_Results_Future{Future: ans.Future()}, release
}
func (c CapManageRetention) RemoveEventRetention(ctx context.Context, params func(CapManageRetention_removeEventRetention_Params) error) (CapManageRetention_removeEventRetention_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "removeEventRetention",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageRetention_removeEventRetention_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageRetention_removeEventRetention_Results_Future{Future: ans.Future()}, release
}
func (c CapManageRetention) SetEventRetention(ctx context.Context, params func(CapManageRetention_setEventRetention_Params) error) (CapManageRetention_setEventRetention_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      3,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "setEventRetention",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageRetention_setEventRetention_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageRetention_setEventRetention_Results_Future{Future: ans.Future()}, release
}
func (c CapManageRetention) TestEvent(ctx context.Context, params func(CapManageRetention_testEvent_Params) error) (CapManageRetention_testEvent_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      4,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "testEvent",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageRetention_testEvent_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageRetention_testEvent_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapManageRetention) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapManageRetention) AddRef() CapManageRetention {
	return CapManageRetention(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapManageRetention) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapManageRetention) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapManageRetention) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapManageRetention) DecodeFromPtr(p capnp.Ptr) CapManageRetention {
	return CapManageRetention(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapManageRetention) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapManageRetention) IsSame(other CapManageRetention) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapManageRetention) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapManageRetention) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapManageRetention_Server is a CapManageRetention with a local implementation.
type CapManageRetention_Server interface {
	GetEvents(context.Context, CapManageRetention_getEvents) error

	GetEventRetention(context.Context, CapManageRetention_getEventRetention) error

	RemoveEventRetention(context.Context, CapManageRetention_removeEventRetention) error

	SetEventRetention(context.Context, CapManageRetention_setEventRetention) error

	TestEvent(context.Context, CapManageRetention_testEvent) error
}

// CapManageRetention_NewServer creates a new Server from an implementation of CapManageRetention_Server.
func CapManageRetention_NewServer(s CapManageRetention_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapManageRetention_Methods(nil, s), s, c)
}

// CapManageRetention_ServerToClient creates a new Client from an implementation of CapManageRetention_Server.
// The caller is responsible for calling Release on the returned Client.
func CapManageRetention_ServerToClient(s CapManageRetention_Server) CapManageRetention {
	return CapManageRetention(capnp.NewClient(CapManageRetention_NewServer(s)))
}

// CapManageRetention_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapManageRetention_Methods(methods []server.Method, s CapManageRetention_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "getEvents",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetEvents(ctx, CapManageRetention_getEvents{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "getEventRetention",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetEventRetention(ctx, CapManageRetention_getEventRetention{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "removeEventRetention",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveEventRetention(ctx, CapManageRetention_removeEventRetention{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      3,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "setEventRetention",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetEventRetention(ctx, CapManageRetention_setEventRetention{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      4,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "testEvent",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.TestEvent(ctx, CapManageRetention_testEvent{call})
		},
	})

	return methods
}

// CapManageRetention_getEvents holds the state for a server call to CapManageRetention.getEvents.
// See server.Call for documentation.
type CapManageRetention_getEvents struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageRetention_getEvents) Args() CapManageRetention_getEvents_Params {
	return CapManageRetention_getEvents_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageRetention_getEvents) AllocResults() (CapManageRetention_getEvents_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_getEvents_Results(r), err
}

// CapManageRetention_getEventRetention holds the state for a server call to CapManageRetention.getEventRetention.
// See server.Call for documentation.
type CapManageRetention_getEventRetention struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageRetention_getEventRetention) Args() CapManageRetention_getEventRetention_Params {
	return CapManageRetention_getEventRetention_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageRetention_getEventRetention) AllocResults() (CapManageRetention_getEventRetention_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_getEventRetention_Results(r), err
}

// CapManageRetention_removeEventRetention holds the state for a server call to CapManageRetention.removeEventRetention.
// See server.Call for documentation.
type CapManageRetention_removeEventRetention struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageRetention_removeEventRetention) Args() CapManageRetention_removeEventRetention_Params {
	return CapManageRetention_removeEventRetention_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageRetention_removeEventRetention) AllocResults() (CapManageRetention_removeEventRetention_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageRetention_removeEventRetention_Results(r), err
}

// CapManageRetention_setEventRetention holds the state for a server call to CapManageRetention.setEventRetention.
// See server.Call for documentation.
type CapManageRetention_setEventRetention struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageRetention_setEventRetention) Args() CapManageRetention_setEventRetention_Params {
	return CapManageRetention_setEventRetention_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageRetention_setEventRetention) AllocResults() (CapManageRetention_setEventRetention_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageRetention_setEventRetention_Results(r), err
}

// CapManageRetention_testEvent holds the state for a server call to CapManageRetention.testEvent.
// See server.Call for documentation.
type CapManageRetention_testEvent struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageRetention_testEvent) Args() CapManageRetention_testEvent_Params {
	return CapManageRetention_testEvent_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageRetention_testEvent) AllocResults() (CapManageRetention_testEvent_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapManageRetention_testEvent_Results(r), err
}

// CapManageRetention_List is a list of CapManageRetention.
type CapManageRetention_List = capnp.CapList[CapManageRetention]

// NewCapManageRetention creates a new list of CapManageRetention.
func NewCapManageRetention_List(s *capnp.Segment, sz int32) (CapManageRetention_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapManageRetention](l), err
}

type CapManageRetention_getEvents_Params capnp.Struct

// CapManageRetention_getEvents_Params_TypeID is the unique identifier for the type CapManageRetention_getEvents_Params.
const CapManageRetention_getEvents_Params_TypeID = 0x94f59b819a6e7ce3

func NewCapManageRetention_getEvents_Params(s *capnp.Segment) (CapManageRetention_getEvents_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageRetention_getEvents_Params(st), err
}

func NewRootCapManageRetention_getEvents_Params(s *capnp.Segment) (CapManageRetention_getEvents_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageRetention_getEvents_Params(st), err
}

func ReadRootCapManageRetention_getEvents_Params(msg *capnp.Message) (CapManageRetention_getEvents_Params, error) {
	root, err := msg.Root()
	return CapManageRetention_getEvents_Params(root.Struct()), err
}

func (s CapManageRetention_getEvents_Params) String() string {
	str, _ := text.Marshal(0x94f59b819a6e7ce3, capnp.Struct(s))
	return str
}

func (s CapManageRetention_getEvents_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_getEvents_Params) DecodeFromPtr(p capnp.Ptr) CapManageRetention_getEvents_Params {
	return CapManageRetention_getEvents_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_getEvents_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_getEvents_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_getEvents_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_getEvents_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapManageRetention_getEvents_Params_List is a list of CapManageRetention_getEvents_Params.
type CapManageRetention_getEvents_Params_List = capnp.StructList[CapManageRetention_getEvents_Params]

// NewCapManageRetention_getEvents_Params creates a new list of CapManageRetention_getEvents_Params.
func NewCapManageRetention_getEvents_Params_List(s *capnp.Segment, sz int32) (CapManageRetention_getEvents_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapManageRetention_getEvents_Params](l), err
}

// CapManageRetention_getEvents_Params_Future is a wrapper for a CapManageRetention_getEvents_Params promised by a client call.
type CapManageRetention_getEvents_Params_Future struct{ *capnp.Future }

func (f CapManageRetention_getEvents_Params_Future) Struct() (CapManageRetention_getEvents_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_getEvents_Params(p.Struct()), err
}

type CapManageRetention_getEvents_Results capnp.Struct

// CapManageRetention_getEvents_Results_TypeID is the unique identifier for the type CapManageRetention_getEvents_Results.
const CapManageRetention_getEvents_Results_TypeID = 0xeade1fba66bf829a

func NewCapManageRetention_getEvents_Results(s *capnp.Segment) (CapManageRetention_getEvents_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_getEvents_Results(st), err
}

func NewRootCapManageRetention_getEvents_Results(s *capnp.Segment) (CapManageRetention_getEvents_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_getEvents_Results(st), err
}

func ReadRootCapManageRetention_getEvents_Results(msg *capnp.Message) (CapManageRetention_getEvents_Results, error) {
	root, err := msg.Root()
	return CapManageRetention_getEvents_Results(root.Struct()), err
}

func (s CapManageRetention_getEvents_Results) String() string {
	str, _ := text.Marshal(0xeade1fba66bf829a, capnp.Struct(s))
	return str
}

func (s CapManageRetention_getEvents_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_getEvents_Results) DecodeFromPtr(p capnp.Ptr) CapManageRetention_getEvents_Results {
	return CapManageRetention_getEvents_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_getEvents_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_getEvents_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_getEvents_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_getEvents_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageRetention_getEvents_Results) RetList() (EventRetention_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return EventRetention_List(p.List()), err
}

func (s CapManageRetention_getEvents_Results) HasRetList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageRetention_getEvents_Results) SetRetList(v EventRetention_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewRetList sets the retList field to a newly
// allocated EventRetention_List, preferring placement in s's segment.
func (s CapManageRetention_getEvents_Results) NewRetList(n int32) (EventRetention_List, error) {
	l, err := NewEventRetention_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return EventRetention_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapManageRetention_getEvents_Results_List is a list of CapManageRetention_getEvents_Results.
type CapManageRetention_getEvents_Results_List = capnp.StructList[CapManageRetention_getEvents_Results]

// NewCapManageRetention_getEvents_Results creates a new list of CapManageRetention_getEvents_Results.
func NewCapManageRetention_getEvents_Results_List(s *capnp.Segment, sz int32) (CapManageRetention_getEvents_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageRetention_getEvents_Results](l), err
}

// CapManageRetention_getEvents_Results_Future is a wrapper for a CapManageRetention_getEvents_Results promised by a client call.
type CapManageRetention_getEvents_Results_Future struct{ *capnp.Future }

func (f CapManageRetention_getEvents_Results_Future) Struct() (CapManageRetention_getEvents_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_getEvents_Results(p.Struct()), err
}

type CapManageRetention_getEventRetention_Params capnp.Struct

// CapManageRetention_getEventRetention_Params_TypeID is the unique identifier for the type CapManageRetention_getEventRetention_Params.
const CapManageRetention_getEventRetention_Params_TypeID = 0xd04e1143cc533067

func NewCapManageRetention_getEventRetention_Params(s *capnp.Segment) (CapManageRetention_getEventRetention_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_getEventRetention_Params(st), err
}

func NewRootCapManageRetention_getEventRetention_Params(s *capnp.Segment) (CapManageRetention_getEventRetention_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_getEventRetention_Params(st), err
}

func ReadRootCapManageRetention_getEventRetention_Params(msg *capnp.Message) (CapManageRetention_getEventRetention_Params, error) {
	root, err := msg.Root()
	return CapManageRetention_getEventRetention_Params(root.Struct()), err
}

func (s CapManageRetention_getEventRetention_Params) String() string {
	str, _ := text.Marshal(0xd04e1143cc533067, capnp.Struct(s))
	return str
}

func (s CapManageRetention_getEventRetention_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_getEventRetention_Params) DecodeFromPtr(p capnp.Ptr) CapManageRetention_getEventRetention_Params {
	return CapManageRetention_getEventRetention_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_getEventRetention_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_getEventRetention_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_getEventRetention_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_getEventRetention_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageRetention_getEventRetention_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapManageRetention_getEventRetention_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageRetention_getEventRetention_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapManageRetention_getEventRetention_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapManageRetention_getEventRetention_Params_List is a list of CapManageRetention_getEventRetention_Params.
type CapManageRetention_getEventRetention_Params_List = capnp.StructList[CapManageRetention_getEventRetention_Params]

// NewCapManageRetention_getEventRetention_Params creates a new list of CapManageRetention_getEventRetention_Params.
func NewCapManageRetention_getEventRetention_Params_List(s *capnp.Segment, sz int32) (CapManageRetention_getEventRetention_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageRetention_getEventRetention_Params](l), err
}

// CapManageRetention_getEventRetention_Params_Future is a wrapper for a CapManageRetention_getEventRetention_Params promised by a client call.
type CapManageRetention_getEventRetention_Params_Future struct{ *capnp.Future }

func (f CapManageRetention_getEventRetention_Params_Future) Struct() (CapManageRetention_getEventRetention_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_getEventRetention_Params(p.Struct()), err
}

type CapManageRetention_getEventRetention_Results capnp.Struct

// CapManageRetention_getEventRetention_Results_TypeID is the unique identifier for the type CapManageRetention_getEventRetention_Results.
const CapManageRetention_getEventRetention_Results_TypeID = 0xd2778faa7ff8eb3f

func NewCapManageRetention_getEventRetention_Results(s *capnp.Segment) (CapManageRetention_getEventRetention_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_getEventRetention_Results(st), err
}

func NewRootCapManageRetention_getEventRetention_Results(s *capnp.Segment) (CapManageRetention_getEventRetention_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_getEventRetention_Results(st), err
}

func ReadRootCapManageRetention_getEventRetention_Results(msg *capnp.Message) (CapManageRetention_getEventRetention_Results, error) {
	root, err := msg.Root()
	return CapManageRetention_getEventRetention_Results(root.Struct()), err
}

func (s CapManageRetention_getEventRetention_Results) String() string {
	str, _ := text.Marshal(0xd2778faa7ff8eb3f, capnp.Struct(s))
	return str
}

func (s CapManageRetention_getEventRetention_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_getEventRetention_Results) DecodeFromPtr(p capnp.Ptr) CapManageRetention_getEventRetention_Results {
	return CapManageRetention_getEventRetention_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_getEventRetention_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_getEventRetention_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_getEventRetention_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_getEventRetention_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageRetention_getEventRetention_Results) Ret() (EventRetention, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return EventRetention(p.Struct()), err
}

func (s CapManageRetention_getEventRetention_Results) HasRet() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageRetention_getEventRetention_Results) SetRet(v EventRetention) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRet sets the ret field to a newly
// allocated EventRetention struct, preferring placement in s's segment.
func (s CapManageRetention_getEventRetention_Results) NewRet() (EventRetention, error) {
	ss, err := NewEventRetention(capnp.Struct(s).Segment())
	if err != nil {
		return EventRetention{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapManageRetention_getEventRetention_Results_List is a list of CapManageRetention_getEventRetention_Results.
type CapManageRetention_getEventRetention_Results_List = capnp.StructList[CapManageRetention_getEventRetention_Results]

// NewCapManageRetention_getEventRetention_Results creates a new list of CapManageRetention_getEventRetention_Results.
func NewCapManageRetention_getEventRetention_Results_List(s *capnp.Segment, sz int32) (CapManageRetention_getEventRetention_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageRetention_getEventRetention_Results](l), err
}

// CapManageRetention_getEventRetention_Results_Future is a wrapper for a CapManageRetention_getEventRetention_Results promised by a client call.
type CapManageRetention_getEventRetention_Results_Future struct{ *capnp.Future }

func (f CapManageRetention_getEventRetention_Results_Future) Struct() (CapManageRetention_getEventRetention_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_getEventRetention_Results(p.Struct()), err
}
func (p CapManageRetention_getEventRetention_Results_Future) Ret() EventRetention_Future {
	return EventRetention_Future{Future: p.Future.Field(0, nil)}
}

type CapManageRetention_removeEventRetention_Params capnp.Struct

// CapManageRetention_removeEventRetention_Params_TypeID is the unique identifier for the type CapManageRetention_removeEventRetention_Params.
const CapManageRetention_removeEventRetention_Params_TypeID = 0xcf60bbf7431096a0

func NewCapManageRetention_removeEventRetention_Params(s *capnp.Segment) (CapManageRetention_removeEventRetention_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_removeEventRetention_Params(st), err
}

func NewRootCapManageRetention_removeEventRetention_Params(s *capnp.Segment) (CapManageRetention_removeEventRetention_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_removeEventRetention_Params(st), err
}

func ReadRootCapManageRetention_removeEventRetention_Params(msg *capnp.Message) (CapManageRetention_removeEventRetention_Params, error) {
	root, err := msg.Root()
	return CapManageRetention_removeEventRetention_Params(root.Struct()), err
}

func (s CapManageRetention_removeEventRetention_Params) String() string {
	str, _ := text.Marshal(0xcf60bbf7431096a0, capnp.Struct(s))
	return str
}

func (s CapManageRetention_removeEventRetention_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_removeEventRetention_Params) DecodeFromPtr(p capnp.Ptr) CapManageRetention_removeEventRetention_Params {
	return CapManageRetention_removeEventRetention_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_removeEventRetention_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_removeEventRetention_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_removeEventRetention_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_removeEventRetention_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageRetention_removeEventRetention_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapManageRetention_removeEventRetention_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageRetention_removeEventRetention_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapManageRetention_removeEventRetention_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapManageRetention_removeEventRetention_Params_List is a list of CapManageRetention_removeEventRetention_Params.
type CapManageRetention_removeEventRetention_Params_List = capnp.StructList[CapManageRetention_removeEventRetention_Params]

// NewCapManageRetention_removeEventRetention_Params creates a new list of CapManageRetention_removeEventRetention_Params.
func NewCapManageRetention_removeEventRetention_Params_List(s *capnp.Segment, sz int32) (CapManageRetention_removeEventRetention_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageRetention_removeEventRetention_Params](l), err
}

// CapManageRetention_removeEventRetention_Params_Future is a wrapper for a CapManageRetention_removeEventRetention_Params promised by a client call.
type CapManageRetention_removeEventRetention_Params_Future struct{ *capnp.Future }

func (f CapManageRetention_removeEventRetention_Params_Future) Struct() (CapManageRetention_removeEventRetention_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_removeEventRetention_Params(p.Struct()), err
}

type CapManageRetention_removeEventRetention_Results capnp.Struct

// CapManageRetention_removeEventRetention_Results_TypeID is the unique identifier for the type CapManageRetention_removeEventRetention_Results.
const CapManageRetention_removeEventRetention_Results_TypeID = 0xbaf76beaa0eaef07

func NewCapManageRetention_removeEventRetention_Results(s *capnp.Segment) (CapManageRetention_removeEventRetention_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageRetention_removeEventRetention_Results(st), err
}

func NewRootCapManageRetention_removeEventRetention_Results(s *capnp.Segment) (CapManageRetention_removeEventRetention_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageRetention_removeEventRetention_Results(st), err
}

func ReadRootCapManageRetention_removeEventRetention_Results(msg *capnp.Message) (CapManageRetention_removeEventRetention_Results, error) {
	root, err := msg.Root()
	return CapManageRetention_removeEventRetention_Results(root.Struct()), err
}

func (s CapManageRetention_removeEventRetention_Results) String() string {
	str, _ := text.Marshal(0xbaf76beaa0eaef07, capnp.Struct(s))
	return str
}

func (s CapManageRetention_removeEventRetention_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_removeEventRetention_Results) DecodeFromPtr(p capnp.Ptr) CapManageRetention_removeEventRetention_Results {
	return CapManageRetention_removeEventRetention_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_removeEventRetention_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_removeEventRetention_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_removeEventRetention_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_removeEventRetention_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapManageRetention_removeEventRetention_Results_List is a list of CapManageRetention_removeEventRetention_Results.
type CapManageRetention_removeEventRetention_Results_List = capnp.StructList[CapManageRetention_removeEventRetention_Results]

// NewCapManageRetention_removeEventRetention_Results creates a new list of CapManageRetention_removeEventRetention_Results.
func NewCapManageRetention_removeEventRetention_Results_List(s *capnp.Segment, sz int32) (CapManageRetention_removeEventRetention_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapManageRetention_removeEventRetention_Results](l), err
}

// CapManageRetention_removeEventRetention_Results_Future is a wrapper for a CapManageRetention_removeEventRetention_Results promised by a client call.
type CapManageRetention_removeEventRetention_Results_Future struct{ *capnp.Future }

func (f CapManageRetention_removeEventRetention_Results_Future) Struct() (CapManageRetention_removeEventRetention_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_removeEventRetention_Results(p.Struct()), err
}

type CapManageRetention_setEventRetention_Params capnp.Struct

// CapManageRetention_setEventRetention_Params_TypeID is the unique identifier for the type CapManageRetention_setEventRetention_Params.
const CapManageRetention_setEventRetention_Params_TypeID = 0xf1a3ef65a8704f35

func NewCapManageRetention_setEventRetention_Params(s *capnp.Segment) (CapManageRetention_setEventRetention_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_setEventRetention_Params(st), err
}

func NewRootCapManageRetention_setEventRetention_Params(s *capnp.Segment) (CapManageRetention_setEventRetention_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_setEventRetention_Params(st), err
}

func ReadRootCapManageRetention_setEventRetention_Params(msg *capnp.Message) (CapManageRetention_setEventRetention_Params, error) {
	root, err := msg.Root()
	return CapManageRetention_setEventRetention_Params(root.Struct()), err
}

func (s CapManageRetention_setEventRetention_Params) String() string {
	str, _ := text.Marshal(0xf1a3ef65a8704f35, capnp.Struct(s))
	return str
}

func (s CapManageRetention_setEventRetention_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_setEventRetention_Params) DecodeFromPtr(p capnp.Ptr) CapManageRetention_setEventRetention_Params {
	return CapManageRetention_setEventRetention_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_setEventRetention_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_setEventRetention_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_setEventRetention_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_setEventRetention_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageRetention_setEventRetention_Params) Ret() (EventRetention, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return EventRetention(p.Struct()), err
}

func (s CapManageRetention_setEventRetention_Params) HasRet() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageRetention_setEventRetention_Params) SetRet(v EventRetention) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRet sets the ret field to a newly
// allocated EventRetention struct, preferring placement in s's segment.
func (s CapManageRetention_setEventRetention_Params) NewRet() (EventRetention, error) {
	ss, err := NewEventRetention(capnp.Struct(s).Segment())
	if err != nil {
		return EventRetention{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapManageRetention_setEventRetention_Params_List is a list of CapManageRetention_setEventRetention_Params.
type CapManageRetention_setEventRetention_Params_List = capnp.StructList[CapManageRetention_setEventRetention_Params]

// NewCapManageRetention_setEventRetention_Params creates a new list of CapManageRetention_setEventRetention_Params.
func NewCapManageRetention_setEventRetention_Params_List(s *capnp.Segment, sz int32) (CapManageRetention_setEventRetention_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageRetention_setEventRetention_Params](l), err
}

// CapManageRetention_setEventRetention_Params_Future is a wrapper for a CapManageRetention_setEventRetention_Params promised by a client call.
type CapManageRetention_setEventRetention_Params_Future struct{ *capnp.Future }

func (f CapManageRetention_setEventRetention_Params_Future) Struct() (CapManageRetention_setEventRetention_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_setEventRetention_Params(p.Struct()), err
}
func (p CapManageRetention_setEventRetention_Params_Future) Ret() EventRetention_Future {
	return EventRetention_Future{Future: p.Future.Field(0, nil)}
}

type CapManageRetention_setEventRetention_Results capnp.Struct

// CapManageRetention_setEventRetention_Results_TypeID is the unique identifier for the type CapManageRetention_setEventRetention_Results.
const CapManageRetention_setEventRetention_Results_TypeID = 0xf9e91c3361bc207d

func NewCapManageRetention_setEventRetention_Results(s *capnp.Segment) (CapManageRetention_setEventRetention_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageRetention_setEventRetention_Results(st), err
}

func NewRootCapManageRetention_setEventRetention_Results(s *capnp.Segment) (CapManageRetention_setEventRetention_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageRetention_setEventRetention_Results(st), err
}

func ReadRootCapManageRetention_setEventRetention_Results(msg *capnp.Message) (CapManageRetention_setEventRetention_Results, error) {
	root, err := msg.Root()
	return CapManageRetention_setEventRetention_Results(root.Struct()), err
}

func (s CapManageRetention_setEventRetention_Results) String() string {
	str, _ := text.Marshal(0xf9e91c3361bc207d, capnp.Struct(s))
	return str
}

func (s CapManageRetention_setEventRetention_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_setEventRetention_Results) DecodeFromPtr(p capnp.Ptr) CapManageRetention_setEventRetention_Results {
	return CapManageRetention_setEventRetention_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_setEventRetention_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_setEventRetention_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_setEventRetention_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_setEventRetention_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapManageRetention_setEventRetention_Results_List is a list of CapManageRetention_setEventRetention_Results.
type CapManageRetention_setEventRetention_Results_List = capnp.StructList[CapManageRetention_setEventRetention_Results]

// NewCapManageRetention_setEventRetention_Results creates a new list of CapManageRetention_setEventRetention_Results.
func NewCapManageRetention_setEventRetention_Results_List(s *capnp.Segment, sz int32) (CapManageRetention_setEventRetention_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapManageRetention_setEventRetention_Results](l), err
}

// CapManageRetention_setEventRetention_Results_Future is a wrapper for a CapManageRetention_setEventRetention_Results promised by a client call.
type CapManageRetention_setEventRetention_Results_Future struct{ *capnp.Future }

func (f CapManageRetention_setEventRetention_Results_Future) Struct() (CapManageRetention_setEventRetention_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_setEventRetention_Results(p.Struct()), err
}

type CapManageRetention_testEvent_Params capnp.Struct

// CapManageRetention_testEvent_Params_TypeID is the unique identifier for the type CapManageRetention_testEvent_Params.
const CapManageRetention_testEvent_Params_TypeID = 0x843f3755e887cec2

func NewCapManageRetention_testEvent_Params(s *capnp.Segment) (CapManageRetention_testEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_testEvent_Params(st), err
}

func NewRootCapManageRetention_testEvent_Params(s *capnp.Segment) (CapManageRetention_testEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_testEvent_Params(st), err
}

func ReadRootCapManageRetention_testEvent_Params(msg *capnp.Message) (CapManageRetention_testEvent_Params, error) {
	root, err := msg.Root()
	return CapManageRetention_testEvent_Params(root.Struct()), err
}

func (s CapManageRetention_testEvent_Params) String() string {
	str, _ := text.Marshal(0x843f3755e887cec2, capnp.Struct(s))
	return str
}

func (s CapManageRetention_testEvent_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_testEvent_Params) DecodeFromPtr(p capnp.Ptr) CapManageRetention_testEvent_Params {
	return CapManageRetention_testEvent_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_testEvent_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_testEvent_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_testEvent_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_testEvent_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageRetention_testEvent_Params) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapManageRetention_testEvent_Params) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageRetention_testEvent_Params) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapManageRetention_testEvent_Params) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapManageRetention_testEvent_Params_List is a list of CapManageRetention_testEvent_Params.
type CapManageRetention_testEvent_Params_List = capnp.StructList[CapManageRetention_testEvent_Params]

// NewCapManageRetention_testEvent_Params creates a new list of CapManageRetention_testEvent_Params.
func NewCapManageRetention_testEvent_Params_List(s *capnp.Segment, sz int32) (CapManageRetention_testEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageRetention_testEvent_Params](l), err
}

// CapManageRetention_testEvent_Params_Future is a wrapper for a CapManageRetention_testEvent_Params promised by a client call.
type CapManageRetention_testEvent_Params_Future struct{ *capnp.Future }

func (f CapManageRetention_testEvent_Params_Future) Struct() (CapManageRetention_testEvent_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_testEvent_Params(p.Struct()), err
}
func (p CapManageRetention_testEvent_Params_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapManageRetention_testEvent_Results capnp.Struct

// CapManageRetention_testEvent_Results_TypeID is the unique identifier for the type CapManageRetention_testEvent_Results.
const CapManageRetention_testEvent_Results_TypeID = 0xbbd75d212e1f85e7

func NewCapManageRetention_testEvent_Results(s *capnp.Segment) (CapManageRetention_testEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapManageRetention_testEvent_Results(st), err
}

func NewRootCapManageRetention_testEvent_Results(s *capnp.Segment) (CapManageRetention_testEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapManageRetention_testEvent_Results(st), err
}

func ReadRootCapManageRetention_testEvent_Results(msg *capnp.Message) (CapManageRetention_testEvent_Results, error) {
	root, err := msg.Root()
	return CapManageRetention_testEvent_Results(root.Struct()), err
}

func (s CapManageRetention_testEvent_Results) String() string {
	str, _ := text.Marshal(0xbbd75d212e1f85e7, capnp.Struct(s))
	return str
}

func (s CapManageRetention_testEvent_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_testEvent_Results) DecodeFromPtr(p capnp.Ptr) CapManageRetention_testEvent_Results {
	return CapManageRetention_testEvent_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_testEvent_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_testEvent_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_testEvent_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_testEvent_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageRetention_testEvent_Results) Retained() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapManageRetention_testEvent_Results) SetRetained(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapManageRetention_testEvent_Results_List is a list of CapManageRetention_testEvent_Results.
type CapManageRetention_testEvent_Results_List = capnp.StructList[CapManageRetention_testEvent_Results]

// NewCapManageRetention_testEvent_Results creates a new list of CapManageRetention_testEvent_Results.
func NewCapManageRetention_testEvent_Results_List(s *capnp.Segment, sz int32) (CapManageRetention_testEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CapManageRetention_testEvent_Results](l), err
}

// CapManageRetention_testEvent_Results_Future is a wrapper for a CapManageRetention_testEvent_Results promised by a client call.
type CapManageRetention_testEvent_Results_Future struct{ *capnp.Future }

func (f CapManageRetention_testEvent_Results_Future) Struct() (CapManageRetention_testEvent_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_testEvent_Results(p.Struct()), err
}

type CapReadHistory capnp.Client

// CapReadHistory_TypeID is the unique identifier for the type CapReadHistory.
const CapReadHistory_TypeID = 0xadd9881ba4754f20

func (c CapReadHistory) GetEventHistory(ctx context.Context, params func(CapReadHistory_getEventHistory_Params) error) (CapReadHistory_getEventHistory_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xadd9881ba4754f20,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapReadHistory",
			MethodName:    "getEventHistory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapReadHistory_getEventHistory_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapReadHistory_getEventHistory_Results_Future{Future: ans.Future()}, release
}
func (c CapReadHistory) GetProperties(ctx context.Context, params func(CapReadHistory_getProperties_Params) error) (CapReadHistory_getProperties_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xadd9881ba4754f20,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapReadHistory",
			MethodName:    "getProperties",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapReadHistory_getProperties_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapReadHistory_getProperties_Results_Future{Future: ans.Future()}, release
}
func (c CapReadHistory) Info(ctx context.Context, params func(CapReadHistory_info_Params) error) (CapReadHistory_info_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xadd9881ba4754f20,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapReadHistory",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapReadHistory_info_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapReadHistory_info_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapReadHistory) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapReadHistory) AddRef() CapReadHistory {
	return CapReadHistory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapReadHistory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapReadHistory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapReadHistory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapReadHistory) DecodeFromPtr(p capnp.Ptr) CapReadHistory {
	return CapReadHistory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapReadHistory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapReadHistory) IsSame(other CapReadHistory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapReadHistory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapReadHistory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapReadHistory_Server is a CapReadHistory with a local implementation.
type CapReadHistory_Server interface {
	GetEventHistory(context.Context, CapReadHistory_getEventHistory) error

	GetProperties(context.Context, CapReadHistory_getProperties) error

	Info(context.Context, CapReadHistory_info) error
}

// CapReadHistory_NewServer creates a new Server from an implementation of CapReadHistory_Server.
func CapReadHistory_NewServer(s CapReadHistory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapReadHistory_Methods(nil, s), s, c)
}

// CapReadHistory_ServerToClient creates a new Client from an implementation of CapReadHistory_Server.
// The caller is responsible for calling Release on the returned Client.
func CapReadHistory_ServerToClient(s CapReadHistory_Server) CapReadHistory {
	return CapReadHistory(capnp.NewClient(CapReadHistory_NewServer(s)))
}

// CapReadHistory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapReadHistory_Methods(methods []server.Method, s CapReadHistory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xadd9881ba4754f20,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapReadHistory",
			MethodName:    "getEventHistory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetEventHistory(ctx, CapReadHistory_getEventHistory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xadd9881ba4754f20,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapReadHistory",
			MethodName:    "getProperties",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetProperties(ctx, CapReadHistory_getProperties{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xadd9881ba4754f20,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapReadHistory",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, CapReadHistory_info{call})
		},
	})

	return methods
}

// CapReadHistory_getEventHistory holds the state for a server call to CapReadHistory.getEventHistory.
// See server.Call for documentation.
type CapReadHistory_getEventHistory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapReadHistory_getEventHistory) Args() CapReadHistory_getEventHistory_Params {
	return CapReadHistory_getEventHistory_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapReadHistory_getEventHistory) AllocResults() (CapReadHistory_getEventHistory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_getEventHistory_Results(r), err
}

// CapReadHistory_getProperties holds the state for a server call to CapReadHistory.getProperties.
// See server.Call for documentation.
type CapReadHistory_getProperties struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapReadHistory_getProperties) Args() CapReadHistory_getProperties_Params {
	return CapReadHistory_getProperties_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapReadHistory_getProperties) AllocResults() (CapReadHistory_getProperties_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_getProperties_Results(r), err
}

// CapReadHistory_info holds the state for a server call to CapReadHistory.info.
// See server.Call for documentation.
type CapReadHistory_info struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapReadHistory_info) Args() CapReadHistory_info_Params {
	return CapReadHistory_info_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapReadHistory_info) AllocResults() (CapReadHistory_info_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_info_Results(r), err
}

// CapReadHistory_List is a list of CapReadHistory.
type CapReadHistory_List = capnp.CapList[CapReadHistory]

// NewCapReadHistory creates a new list of CapReadHistory.
func NewCapReadHistory_List(s *capnp.Segment, sz int32) (CapReadHistory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapReadHistory](l), err
}

type CapReadHistory_getEventHistory_Params capnp.Struct

// CapReadHistory_getEventHistory_Params_TypeID is the unique identifier for the type CapReadHistory_getEventHistory_Params.
const CapReadHistory_getEventHistory_Params_TypeID = 0xb400b2d098c85f04

func NewCapReadHistory_getEventHistory_Params(s *capnp.Segment) (CapReadHistory_getEventHistory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_getEventHistory_Params(st), err
}

func NewRootCapReadHistory_getEventHistory_Params(s *capnp.Segment) (CapReadHistory_getEventHistory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_getEventHistory_Params(st), err
}

func ReadRootCapReadHistory_getEventHistory_Params(msg *capnp.Message) (CapReadHistory_getEventHistory_Params, error) {
	root, err := msg.Root()
	return CapReadHistory_getEventHistory_Params(root.Struct()), err
}

func (s CapReadHistory_getEventHistory_Params) String() string {
	str, _ := text.Marshal(0xb400b2d098c85f04, capnp.Struct(s))
	return str
}

func (s CapReadHistory_getEventHistory_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapReadHistory_getEventHistory_Params) DecodeFromPtr(p capnp.Ptr) CapReadHistory_getEventHistory_Params {
	return CapReadHistory_getEventHistory_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapReadHistory_getEventHistory_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapReadHistory_getEventHistory_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapReadHistory_getEventHistory_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapReadHistory_getEventHistory_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapReadHistory_getEventHistory_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapReadHistory_getEventHistory_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapReadHistory_getEventHistory_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapReadHistory_getEventHistory_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapReadHistory_getEventHistory_Params_List is a list of CapReadHistory_getEventHistory_Params.
type CapReadHistory_getEventHistory_Params_List = capnp.StructList[CapReadHistory_getEventHistory_Params]

// NewCapReadHistory_getEventHistory_Params creates a new list of CapReadHistory_getEventHistory_Params.
func NewCapReadHistory_getEventHistory_Params_List(s *capnp.Segment, sz int32) (CapReadHistory_getEventHistory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapReadHistory_getEventHistory_Params](l), err
}

// CapReadHistory_getEventHistory_Params_Future is a wrapper for a CapReadHistory_getEventHistory_Params promised by a client call.
type CapReadHistory_getEventHistory_Params_Future struct{ *capnp.Future }

func (f CapReadHistory_getEventHistory_Params_Future) Struct() (CapReadHistory_getEventHistory_Params, error) {
	p, err := f.Future.Ptr()
	return CapReadHistory_getEventHistory_Params(p.Struct()), err
}

type CapReadHistory_getEventHistory_Results capnp.Struct

// CapReadHistory_getEventHistory_Results_TypeID is the unique identifier for the type CapReadHistory_getEventHistory_Results.
const CapReadHistory_getEventHistory_Results_TypeID = 0x9d6b3c5af51f3915

func NewCapReadHistory_getEventHistory_Results(s *capnp.Segment) (CapReadHistory_getEventHistory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_getEventHistory_Results(st), err
}

func NewRootCapReadHistory_getEventHistory_Results(s *capnp.Segment) (CapReadHistory_getEventHistory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_getEventHistory_Results(st), err
}

func ReadRootCapReadHistory_getEventHistory_Results(msg *capnp.Message) (CapReadHistory_getEventHistory_Results, error) {
	root, err := msg.Root()
	return CapReadHistory_getEventHistory_Results(root.Struct()), err
}

func (s CapReadHistory_getEventHistory_Results) String() string {
	str, _ := text.Marshal(0x9d6b3c5af51f3915, capnp.Struct(s))
	return str
}

func (s CapReadHistory_getEventHistory_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapReadHistory_getEventHistory_Results) DecodeFromPtr(p capnp.Ptr) CapReadHistory_getEventHistory_Results {
	return CapReadHistory_getEventHistory_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapReadHistory_getEventHistory_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapReadHistory_getEventHistory_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapReadHistory_getEventHistory_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapReadHistory_getEventHistory_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapReadHistory_getEventHistory_Results) Cursor() CapHistoryCursor {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapHistoryCursor(p.Interface().Client())
}

func (s CapReadHistory_getEventHistory_Results) HasCursor() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapReadHistory_getEventHistory_Results) SetCursor(v CapHistoryCursor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapReadHistory_getEventHistory_Results_List is a list of CapReadHistory_getEventHistory_Results.
type CapReadHistory_getEventHistory_Results_List = capnp.StructList[CapReadHistory_getEventHistory_Results]

// NewCapReadHistory_getEventHistory_Results creates a new list of CapReadHistory_getEventHistory_Results.
func NewCapReadHistory_getEventHistory_Results_List(s *capnp.Segment, sz int32) (CapReadHistory_getEventHistory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapReadHistory_getEventHistory_Results](l), err
}

// CapReadHistory_getEventHistory_Results_Future is a wrapper for a CapReadHistory_getEventHistory_Results promised by a client call.
type CapReadHistory_getEventHistory_Results_Future struct{ *capnp.Future }

func (f CapReadHistory_getEventHistory_Results_Future) Struct() (CapReadHistory_getEventHistory_Results, error) {
	p, err := f.Future.Ptr()
	return CapReadHistory_getEventHistory_Results(p.Struct()), err
}
func (p CapReadHistory_getEventHistory_Results_Future) Cursor() CapHistoryCursor {
	return CapHistoryCursor(p.Future.Field(0, nil).Client())
}

type CapReadHistory_getProperties_Params capnp.Struct

// CapReadHistory_getProperties_Params_TypeID is the unique identifier for the type CapReadHistory_getProperties_Params.
const CapReadHistory_getProperties_Params_TypeID = 0xcc69b73148363436

func NewCapReadHistory_getProperties_Params(s *capnp.Segment) (CapReadHistory_getProperties_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_getProperties_Params(st), err
}

func NewRootCapReadHistory_getProperties_Params(s *capnp.Segment) (CapReadHistory_getProperties_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_getProperties_Params(st), err
}

func ReadRootCapReadHistory_getProperties_Params(msg *capnp.Message) (CapReadHistory_getProperties_Params, error) {
	root, err := msg.Root()
	return CapReadHistory_getProperties_Params(root.Struct()), err
}

func (s CapReadHistory_getProperties_Params) String() string {
	str, _ := text.Marshal(0xcc69b73148363436, capnp.Struct(s))
	return str
}

func (s CapReadHistory_getProperties_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapReadHistory_getProperties_Params) DecodeFromPtr(p capnp.Ptr) CapReadHistory_getProperties_Params {
	return CapReadHistory_getProperties_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapReadHistory_getProperties_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapReadHistory_getProperties_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapReadHistory_getProperties_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapReadHistory_getProperties_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapReadHistory_getProperties_Params) Names() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s CapReadHistory_getProperties_Params) HasNames() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapReadHistory_getProperties_Params) SetNames(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewNames sets the names field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s CapReadHistory_getProperties_Params) NewNames(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapReadHistory_getProperties_Params_List is a list of CapReadHistory_getProperties_Params.
type CapReadHistory_getProperties_Params_List = capnp.StructList[CapReadHistory_getProperties_Params]

// NewCapReadHistory_getProperties_Params creates a new list of CapReadHistory_getProperties_Params.
func NewCapReadHistory_getProperties_Params_List(s *capnp.Segment, sz int32) (CapReadHistory_getProperties_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapReadHistory_getProperties_Params](l), err
}

// CapReadHistory_getProperties_Params_Future is a wrapper for a CapReadHistory_getProperties_Params promised by a client call.
type CapReadHistory_getProperties_Params_Future struct{ *capnp.Future }

func (f CapReadHistory_getProperties_Params_Future) Struct() (CapReadHistory_getProperties_Params, error) {
	p, err := f.Future.Ptr()
	return CapReadHistory_getProperties_Params(p.Struct()), err
}

type CapReadHistory_getProperties_Results capnp.Struct

// CapReadHistory_getProperties_Results_TypeID is the unique identifier for the type CapReadHistory_getProperties_Results.
const CapReadHistory_getProperties_Results_TypeID = 0xa9ea20731d3aa7a9

func NewCapReadHistory_getProperties_Results(s *capnp.Segment) (CapReadHistory_getProperties_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_getProperties_Results(st), err
}

func NewRootCapReadHistory_getProperties_Results(s *capnp.Segment) (CapReadHistory_getProperties_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_getProperties_Results(st), err
}

func ReadRootCapReadHistory_getProperties_Results(msg *capnp.Message) (CapReadHistory_getProperties_Results, error) {
	root, err := msg.Root()
	return CapReadHistory_getProperties_Results(root.Struct()), err
}

func (s CapReadHistory_getProperties_Results) String() string {
	str, _ := text.Marshal(0xa9ea20731d3aa7a9, capnp.Struct(s))
	return str
}

func (s CapReadHistory_getProperties_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapReadHistory_getProperties_Results) DecodeFromPtr(p capnp.Ptr) CapReadHistory_getProperties_Results {
	return CapReadHistory_getProperties_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapReadHistory_getProperties_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapReadHistory_getProperties_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapReadHistory_getProperties_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapReadHistory_getProperties_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapReadHistory_getProperties_Results) ValueList() (ThingValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue_List(p.List()), err
}

func (s CapReadHistory_getProperties_Results) HasValueList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapReadHistory_getProperties_Results) SetValueList(v ThingValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewValueList sets the valueList field to a newly
// allocated ThingValue_List, preferring placement in s's segment.
func (s CapReadHistory_getProperties_Results) NewValueList(n int32) (ThingValue_List, error) {
	l, err := NewThingValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ThingValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapReadHistory_getProperties_Results_List is a list of CapReadHistory_getProperties_Results.
type CapReadHistory_getProperties_Results_List = capnp.StructList[CapReadHistory_getProperties_Results]

// NewCapReadHistory_getProperties_Results creates a new list of CapReadHistory_getProperties_Results.
func NewCapReadHistory_getProperties_Results_List(s *capnp.Segment, sz int32) (CapReadHistory_getProperties_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapReadHistory_getProperties_Results](l), err
}

// CapReadHistory_getProperties_Results_Future is a wrapper for a CapReadHistory_getProperties_Results promised by a client call.
type CapReadHistory_getProperties_Results_Future struct{ *capnp.Future }

func (f CapReadHistory_getProperties_Results_Future) Struct() (CapReadHistory_getProperties_Results, error) {
	p, err := f.Future.Ptr()
	return CapReadHistory_getProperties_Results(p.Struct()), err
}

type CapReadHistory_info_Params capnp.Struct

// CapReadHistory_info_Params_TypeID is the unique identifier for the type CapReadHistory_info_Params.
const CapReadHistory_info_Params_TypeID = 0xfa5aa37101cf4521

func NewCapReadHistory_info_Params(s *capnp.Segment) (CapReadHistory_info_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapReadHistory_info_Params(st), err
}

func NewRootCapReadHistory_info_Params(s *capnp.Segment) (CapReadHistory_info_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapReadHistory_info_Params(st), err
}

func ReadRootCapReadHistory_info_Params(msg *capnp.Message) (CapReadHistory_info_Params, error) {
	root, err := msg.Root()
	return CapReadHistory_info_Params(root.Struct()), err
}

func (s CapReadHistory_info_Params) String() string {
	str, _ := text.Marshal(0xfa5aa37101cf4521, capnp.Struct(s))
	return str
}

func (s CapReadHistory_info_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapReadHistory_info_Params) DecodeFromPtr(p capnp.Ptr) CapReadHistory_info_Params {
	return CapReadHistory_info_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapReadHistory_info_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapReadHistory_info_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapReadHistory_info_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapReadHistory_info_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapReadHistory_info_Params_List is a list of CapReadHistory_info_Params.
type CapReadHistory_info_Params_List = capnp.StructList[CapReadHistory_info_Params]

// NewCapReadHistory_info_Params creates a new list of CapReadHistory_info_Params.
func NewCapReadHistory_info_Params_List(s *capnp.Segment, sz int32) (CapReadHistory_info_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapReadHistory_info_Params](l), err
}

// CapReadHistory_info_Params_Future is a wrapper for a CapReadHistory_info_Params promised by a client call.
type CapReadHistory_info_Params_Future struct{ *capnp.Future }

func (f CapReadHistory_info_Params_Future) Struct() (CapReadHistory_info_Params, error) {
	p, err := f.Future.Ptr()
	return CapReadHistory_info_Params(p.Struct()), err
}

type CapReadHistory_info_Results capnp.Struct

// CapReadHistory_info_Results_TypeID is the unique identifier for the type CapReadHistory_info_Results.
const CapReadHistory_info_Results_TypeID = 0xab3daf6000a44ed3

func NewCapReadHistory_info_Results(s *capnp.Segment) (CapReadHistory_info_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_info_Results(st), err
}

func NewRootCapReadHistory_info_Results(s *capnp.Segment) (CapReadHistory_info_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_info_Results(st), err
}

func ReadRootCapReadHistory_info_Results(msg *capnp.Message) (CapReadHistory_info_Results, error) {
	root, err := msg.Root()
	return CapReadHistory_info_Results(root.Struct()), err
}

func (s CapReadHistory_info_Results) String() string {
	str, _ := text.Marshal(0xab3daf6000a44ed3, capnp.Struct(s))
	return str
}

func (s CapReadHistory_info_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapReadHistory_info_Results) DecodeFromPtr(p capnp.Ptr) CapReadHistory_info_Results {
	return CapReadHistory_info_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapReadHistory_info_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapReadHistory_info_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapReadHistory_info_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapReadHistory_info_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapReadHistory_info_Results) Info() (BucketStoreInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BucketStoreInfo(p.Struct()), err
}

func (s CapReadHistory_info_Results) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapReadHistory_info_Results) SetInfo(v BucketStoreInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated BucketStoreInfo struct, preferring placement in s's segment.
func (s CapReadHistory_info_Results) NewInfo() (BucketStoreInfo, error) {
	ss, err := NewBucketStoreInfo(capnp.Struct(s).Segment())
	if err != nil {
		return BucketStoreInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapReadHistory_info_Results_List is a list of CapReadHistory_info_Results.
type CapReadHistory_info_Results_List = capnp.StructList[CapReadHistory_info_Results]

// NewCapReadHistory_info_Results creates a new list of CapReadHistory_info_Results.
func NewCapReadHistory_info_Results_List(s *capnp.Segment, sz int32) (CapReadHistory_info_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapReadHistory_info_Results](l), err
}

// CapReadHistory_info_Results_Future is a wrapper for a CapReadHistory_info_Results promised by a client call.
type CapReadHistory_info_Results_Future struct{ *capnp.Future }

func (f CapReadHistory_info_Results_Future) Struct() (CapReadHistory_info_Results, error) {
	p, err := f.Future.Ptr()
	return CapReadHistory_info_Results(p.Struct()), err
}
func (p CapReadHistory_info_Results_Future) Info() BucketStoreInfo_Future {
	return BucketStoreInfo_Future{Future: p.Future.Field(0, nil)}
}

type CapHistoryCursor capnp.Client

// CapHistoryCursor_TypeID is the unique identifier for the type CapHistoryCursor.
const CapHistoryCursor_TypeID = 0x9d62a769e5dd0281

func (c CapHistoryCursor) First(ctx context.Context, params func(CapHistoryCursor_first_Params) error) (CapHistoryCursor_first_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "first",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryCursor_first_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryCursor_first_Results_Future{Future: ans.Future()}, release
}
func (c CapHistoryCursor) Last(ctx context.Context, params func(CapHistoryCursor_last_Params) error) (CapHistoryCursor_last_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "last",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryCursor_last_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryCursor_last_Results_Future{Future: ans.Future()}, release
}
func (c CapHistoryCursor) Next(ctx context.Context, params func(CapHistoryCursor_next_Params) error) (CapHistoryCursor_next_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "next",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryCursor_next_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryCursor_next_Results_Future{Future: ans.Future()}, release
}
func (c CapHistoryCursor) NextN(ctx context.Context, params func(CapHistoryCursor_nextN_Params) error) (CapHistoryCursor_nextN_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      3,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "nextN",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryCursor_nextN_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryCursor_nextN_Results_Future{Future: ans.Future()}, release
}
func (c CapHistoryCursor) Prev(ctx context.Context, params func(CapHistoryCursor_prev_Params) error) (CapHistoryCursor_prev_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      4,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "prev",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryCursor_prev_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryCursor_prev_Results_Future{Future: ans.Future()}, release
}
func (c CapHistoryCursor) PrevN(ctx context.Context, params func(CapHistoryCursor_prevN_Params) error) (CapHistoryCursor_prevN_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      5,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "prevN",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryCursor_prevN_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryCursor_prevN_Results_Future{Future: ans.Future()}, release
}
func (c CapHistoryCursor) Seek(ctx context.Context, params func(CapHistoryCursor_seek_Params) error) (CapHistoryCursor_seek_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      6,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "seek",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryCursor_seek_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryCursor_seek_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapHistoryCursor) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapHistoryCursor) AddRef() CapHistoryCursor {
	return CapHistoryCursor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapHistoryCursor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapHistoryCursor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapHistoryCursor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapHistoryCursor) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor {
	return CapHistoryCursor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapHistoryCursor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapHistoryCursor) IsSame(other CapHistoryCursor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapHistoryCursor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapHistoryCursor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapHistoryCursor_Server is a CapHistoryCursor with a local implementation.
type CapHistoryCursor_Server interface {
	First(context.Context, CapHistoryCursor_first) error

	Last(context.Context, CapHistoryCursor_last) error

	Next(context.Context, CapHistoryCursor_next) error

	NextN(context.Context, CapHistoryCursor_nextN) error

	Prev(context.Context, CapHistoryCursor_prev) error

	PrevN(context.Context, CapHistoryCursor_prevN) error

	Seek(context.Context, CapHistoryCursor_seek) error
}

// CapHistoryCursor_NewServer creates a new Server from an implementation of CapHistoryCursor_Server.
func CapHistoryCursor_NewServer(s CapHistoryCursor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapHistoryCursor_Methods(nil, s), s, c)
}

// CapHistoryCursor_ServerToClient creates a new Client from an implementation of CapHistoryCursor_Server.
// The caller is responsible for calling Release on the returned Client.
func CapHistoryCursor_ServerToClient(s CapHistoryCursor_Server) CapHistoryCursor {
	return CapHistoryCursor(capnp.NewClient(CapHistoryCursor_NewServer(s)))
}

// CapHistoryCursor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapHistoryCursor_Methods(methods []server.Method, s CapHistoryCursor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 7)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "first",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.First(ctx, CapHistoryCursor_first{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "last",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Last(ctx, CapHistoryCursor_last{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "next",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Next(ctx, CapHistoryCursor_next{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      3,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "nextN",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NextN(ctx, CapHistoryCursor_nextN{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      4,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "prev",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Prev(ctx, CapHistoryCursor_prev{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      5,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "prevN",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PrevN(ctx, CapHistoryCursor_prevN{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      6,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "seek",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Seek(ctx, CapHistoryCursor_seek{call})
		},
	})

	return methods
}

// CapHistoryCursor_first holds the state for a server call to CapHistoryCursor.first.
// See server.Call for documentation.
type CapHistoryCursor_first struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryCursor_first) Args() CapHistoryCursor_first_Params {
	return CapHistoryCursor_first_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryCursor_first) AllocResults() (CapHistoryCursor_first_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_first_Results(r), err
}

// CapHistoryCursor_last holds the state for a server call to CapHistoryCursor.last.
// See server.Call for documentation.
type CapHistoryCursor_last struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryCursor_last) Args() CapHistoryCursor_last_Params {
	return CapHistoryCursor_last_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryCursor_last) AllocResults() (CapHistoryCursor_last_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_last_Results(r), err
}

// CapHistoryCursor_next holds the state for a server call to CapHistoryCursor.next.
// See server.Call for documentation.
type CapHistoryCursor_next struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryCursor_next) Args() CapHistoryCursor_next_Params {
	return CapHistoryCursor_next_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryCursor_next) AllocResults() (CapHistoryCursor_next_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_next_Results(r), err
}

// CapHistoryCursor_nextN holds the state for a server call to CapHistoryCursor.nextN.
// See server.Call for documentation.
type CapHistoryCursor_nextN struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryCursor_nextN) Args() CapHistoryCursor_nextN_Params {
	return CapHistoryCursor_nextN_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryCursor_nextN) AllocResults() (CapHistoryCursor_nextN_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_nextN_Results(r), err
}

// CapHistoryCursor_prev holds the state for a server call to CapHistoryCursor.prev.
// See server.Call for documentation.
type CapHistoryCursor_prev struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryCursor_prev) Args() CapHistoryCursor_prev_Params {
	return CapHistoryCursor_prev_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryCursor_prev) AllocResults() (CapHistoryCursor_prev_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_prev_Results(r), err
}

// CapHistoryCursor_prevN holds the state for a server call to CapHistoryCursor.prevN.
// See server.Call for documentation.
type CapHistoryCursor_prevN struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryCursor_prevN) Args() CapHistoryCursor_prevN_Params {
	return CapHistoryCursor_prevN_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryCursor_prevN) AllocResults() (CapHistoryCursor_prevN_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_prevN_Results(r), err
}

// CapHistoryCursor_seek holds the state for a server call to CapHistoryCursor.seek.
// See server.Call for documentation.
type CapHistoryCursor_seek struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryCursor_seek) Args() CapHistoryCursor_seek_Params {
	return CapHistoryCursor_seek_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryCursor_seek) AllocResults() (CapHistoryCursor_seek_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_seek_Results(r), err
}

// CapHistoryCursor_List is a list of CapHistoryCursor.
type CapHistoryCursor_List = capnp.CapList[CapHistoryCursor]

// NewCapHistoryCursor creates a new list of CapHistoryCursor.
func NewCapHistoryCursor_List(s *capnp.Segment, sz int32) (CapHistoryCursor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapHistoryCursor](l), err
}

type CapHistoryCursor_first_Params capnp.Struct

// CapHistoryCursor_first_Params_TypeID is the unique identifier for the type CapHistoryCursor_first_Params.
const CapHistoryCursor_first_Params_TypeID = 0xcf1afe8826feb5a0

func NewCapHistoryCursor_first_Params(s *capnp.Segment) (CapHistoryCursor_first_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHistoryCursor_first_Params(st), err
}

func NewRootCapHistoryCursor_first_Params(s *capnp.Segment) (CapHistoryCursor_first_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHistoryCursor_first_Params(st), err
}

func ReadRootCapHistoryCursor_first_Params(msg *capnp.Message) (CapHistoryCursor_first_Params, error) {
	root, err := msg.Root()
	return CapHistoryCursor_first_Params(root.Struct()), err
}

func (s CapHistoryCursor_first_Params) String() string {
	str, _ := text.Marshal(0xcf1afe8826feb5a0, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_first_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_first_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_first_Params {
	return CapHistoryCursor_first_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_first_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_first_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_first_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_first_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapHistoryCursor_first_Params_List is a list of CapHistoryCursor_first_Params.
type CapHistoryCursor_first_Params_List = capnp.StructList[CapHistoryCursor_first_Params]

// NewCapHistoryCursor_first_Params creates a new list of CapHistoryCursor_first_Params.
func NewCapHistoryCursor_first_Params_List(s *capnp.Segment, sz int32) (CapHistoryCursor_first_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapHistoryCursor_first_Params](l), err
}

// CapHistoryCursor_first_Params_Future is a wrapper for a CapHistoryCursor_first_Params promised by a client call.
type CapHistoryCursor_first_Params_Future struct{ *capnp.Future }

func (f CapHistoryCursor_first_Params_Future) Struct() (CapHistoryCursor_first_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_first_Params(p.Struct()), err
}

type CapHistoryCursor_first_Results capnp.Struct

// CapHistoryCursor_first_Results_TypeID is the unique identifier for the type CapHistoryCursor_first_Results.
const CapHistoryCursor_first_Results_TypeID = 0xf473c4c1fb580a07

func NewCapHistoryCursor_first_Results(s *capnp.Segment) (CapHistoryCursor_first_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_first_Results(st), err
}

func NewRootCapHistoryCursor_first_Results(s *capnp.Segment) (CapHistoryCursor_first_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_first_Results(st), err
}

func ReadRootCapHistoryCursor_first_Results(msg *capnp.Message) (CapHistoryCursor_first_Results, error) {
	root, err := msg.Root()
	return CapHistoryCursor_first_Results(root.Struct()), err
}

func (s CapHistoryCursor_first_Results) String() string {
	str, _ := text.Marshal(0xf473c4c1fb580a07, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_first_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_first_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_first_Results {
	return CapHistoryCursor_first_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_first_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_first_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_first_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_first_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_first_Results) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapHistoryCursor_first_Results) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryCursor_first_Results) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapHistoryCursor_first_Results) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CapHistoryCursor_first_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapHistoryCursor_first_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapHistoryCursor_first_Results_List is a list of CapHistoryCursor_first_Results.
type CapHistoryCursor_first_Results_List = capnp.StructList[CapHistoryCursor_first_Results]

// NewCapHistoryCursor_first_Results creates a new list of CapHistoryCursor_first_Results.
func NewCapHistoryCursor_first_Results_List(s *capnp.Segment, sz int32) (CapHistoryCursor_first_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryCursor_first_Results](l), err
}

// CapHistoryCursor_first_Results_Future is a wrapper for a CapHistoryCursor_first_Results promised by a client call.
type CapHistoryCursor_first_Results_Future struct{ *capnp.Future }

func (f CapHistoryCursor_first_Results_Future) Struct() (CapHistoryCursor_first_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_first_Results(p.Struct()), err
}
func (p CapHistoryCursor_first_Results_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapHistoryCursor_last_Params capnp.Struct

// CapHistoryCursor_last_Params_TypeID is the unique identifier for the type CapHistoryCursor_last_Params.
const CapHistoryCursor_last_Params_TypeID = 0xc986f64c6c14ca4f

func NewCapHistoryCursor_last_Params(s *capnp.Segment) (CapHistoryCursor_last_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHistoryCursor_last_Params(st), err
}

func NewRootCapHistoryCursor_last_Params(s *capnp.Segment) (CapHistoryCursor_last_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHistoryCursor_last_Params(st), err
}

func ReadRootCapHistoryCursor_last_Params(msg *capnp.Message) (CapHistoryCursor_last_Params, error) {
	root, err := msg.Root()
	return CapHistoryCursor_last_Params(root.Struct()), err
}

func (s CapHistoryCursor_last_Params) String() string {
	str, _ := text.Marshal(0xc986f64c6c14ca4f, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_last_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_last_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_last_Params {
	return CapHistoryCursor_last_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_last_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_last_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_last_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_last_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapHistoryCursor_last_Params_List is a list of CapHistoryCursor_last_Params.
type CapHistoryCursor_last_Params_List = capnp.StructList[CapHistoryCursor_last_Params]

// NewCapHistoryCursor_last_Params creates a new list of CapHistoryCursor_last_Params.
func NewCapHistoryCursor_last_Params_List(s *capnp.Segment, sz int32) (CapHistoryCursor_last_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapHistoryCursor_last_Params](l), err
}

// CapHistoryCursor_last_Params_Future is a wrapper for a CapHistoryCursor_last_Params promised by a client call.
type CapHistoryCursor_last_Params_Future struct{ *capnp.Future }

func (f CapHistoryCursor_last_Params_Future) Struct() (CapHistoryCursor_last_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_last_Params(p.Struct()), err
}

type CapHistoryCursor_last_Results capnp.Struct

// CapHistoryCursor_last_Results_TypeID is the unique identifier for the type CapHistoryCursor_last_Results.
const CapHistoryCursor_last_Results_TypeID = 0x9f1384ed24dccf37

func NewCapHistoryCursor_last_Results(s *capnp.Segment) (CapHistoryCursor_last_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_last_Results(st), err
}

func NewRootCapHistoryCursor_last_Results(s *capnp.Segment) (CapHistoryCursor_last_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_last_Results(st), err
}

func ReadRootCapHistoryCursor_last_Results(msg *capnp.Message) (CapHistoryCursor_last_Results, error) {
	root, err := msg.Root()
	return CapHistoryCursor_last_Results(root.Struct()), err
}

func (s CapHistoryCursor_last_Results) String() string {
	str, _ := text.Marshal(0x9f1384ed24dccf37, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_last_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_last_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_last_Results {
	return CapHistoryCursor_last_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_last_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_last_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_last_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_last_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_last_Results) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapHistoryCursor_last_Results) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryCursor_last_Results) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapHistoryCursor_last_Results) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CapHistoryCursor_last_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapHistoryCursor_last_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapHistoryCursor_last_Results_List is a list of CapHistoryCursor_last_Results.
type CapHistoryCursor_last_Results_List = capnp.StructList[CapHistoryCursor_last_Results]

// NewCapHistoryCursor_last_Results creates a new list of CapHistoryCursor_last_Results.
func NewCapHistoryCursor_last_Results_List(s *capnp.Segment, sz int32) (CapHistoryCursor_last_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryCursor_last_Results](l), err
}

// CapHistoryCursor_last_Results_Future is a wrapper for a CapHistoryCursor_last_Results promised by a client call.
type CapHistoryCursor_last_Results_Future struct{ *capnp.Future }

func (f CapHistoryCursor_last_Results_Future) Struct() (CapHistoryCursor_last_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_last_Results(p.Struct()), err
}
func (p CapHistoryCursor_last_Results_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapHistoryCursor_next_Params capnp.Struct

// CapHistoryCursor_next_Params_TypeID is the unique identifier for the type CapHistoryCursor_next_Params.
const CapHistoryCursor_next_Params_TypeID = 0xbdeae8c7974b47f8

func NewCapHistoryCursor_next_Params(s *capnp.Segment) (CapHistoryCursor_next_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHistoryCursor_next_Params(st), err
}

func NewRootCapHistoryCursor_next_Params(s *capnp.Segment) (CapHistoryCursor_next_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHistoryCursor_next_Params(st), err
}

func ReadRootCapHistoryCursor_next_Params(msg *capnp.Message) (CapHistoryCursor_next_Params, error) {
	root, err := msg.Root()
	return CapHistoryCursor_next_Params(root.Struct()), err
}

func (s CapHistoryCursor_next_Params) String() string {
	str, _ := text.Marshal(0xbdeae8c7974b47f8, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_next_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_next_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_next_Params {
	return CapHistoryCursor_next_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_next_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_next_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_next_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_next_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapHistoryCursor_next_Params_List is a list of CapHistoryCursor_next_Params.
type CapHistoryCursor_next_Params_List = capnp.StructList[CapHistoryCursor_next_Params]

// NewCapHistoryCursor_next_Params creates a new list of CapHistoryCursor_next_Params.
func NewCapHistoryCursor_next_Params_List(s *capnp.Segment, sz int32) (CapHistoryCursor_next_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapHistoryCursor_next_Params](l), err
}

// CapHistoryCursor_next_Params_Future is a wrapper for a CapHistoryCursor_next_Params promised by a client call.
type CapHistoryCursor_next_Params_Future struct{ *capnp.Future }

func (f CapHistoryCursor_next_Params_Future) Struct() (CapHistoryCursor_next_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_next_Params(p.Struct()), err
}

type CapHistoryCursor_next_Results capnp.Struct

// CapHistoryCursor_next_Results_TypeID is the unique identifier for the type CapHistoryCursor_next_Results.
const CapHistoryCursor_next_Results_TypeID = 0xfc5dac1667b5feb1

func NewCapHistoryCursor_next_Results(s *capnp.Segment) (CapHistoryCursor_next_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_next_Results(st), err
}

func NewRootCapHistoryCursor_next_Results(s *capnp.Segment) (CapHistoryCursor_next_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_next_Results(st), err
}

func ReadRootCapHistoryCursor_next_Results(msg *capnp.Message) (CapHistoryCursor_next_Results, error) {
	root, err := msg.Root()
	return CapHistoryCursor_next_Results(root.Struct()), err
}

func (s CapHistoryCursor_next_Results) String() string {
	str, _ := text.Marshal(0xfc5dac1667b5feb1, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_next_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_next_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_next_Results {
	return CapHistoryCursor_next_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_next_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_next_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_next_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_next_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_next_Results) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapHistoryCursor_next_Results) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryCursor_next_Results) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapHistoryCursor_next_Results) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CapHistoryCursor_next_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapHistoryCursor_next_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapHistoryCursor_next_Results_List is a list of CapHistoryCursor_next_Results.
type CapHistoryCursor_next_Results_List = capnp.StructList[CapHistoryCursor_next_Results]

// NewCapHistoryCursor_next_Results creates a new list of CapHistoryCursor_next_Results.
func NewCapHistoryCursor_next_Results_List(s *capnp.Segment, sz int32) (CapHistoryCursor_next_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryCursor_next_Results](l), err
}

// CapHistoryCursor_next_Results_Future is a wrapper for a CapHistoryCursor_next_Results promised by a client call.
type CapHistoryCursor_next_Results_Future struct{ *capnp.Future }

func (f CapHistoryCursor_next_Results_Future) Struct() (CapHistoryCursor_next_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_next_Results(p.Struct()), err
}
func (p CapHistoryCursor_next_Results_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapHistoryCursor_nextN_Params capnp.Struct

// CapHistoryCursor_nextN_Params_TypeID is the unique identifier for the type CapHistoryCursor_nextN_Params.
const CapHistoryCursor_nextN_Params_TypeID = 0xe46ac295853f5a28

func NewCapHistoryCursor_nextN_Params(s *capnp.Segment) (CapHistoryCursor_nextN_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapHistoryCursor_nextN_Params(st), err
}

func NewRootCapHistoryCursor_nextN_Params(s *capnp.Segment) (CapHistoryCursor_nextN_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapHistoryCursor_nextN_Params(st), err
}

func ReadRootCapHistoryCursor_nextN_Params(msg *capnp.Message) (CapHistoryCursor_nextN_Params, error) {
	root, err := msg.Root()
	return CapHistoryCursor_nextN_Params(root.Struct()), err
}

func (s CapHistoryCursor_nextN_Params) String() string {
	str, _ := text.Marshal(0xe46ac295853f5a28, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_nextN_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_nextN_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_nextN_Params {
	return CapHistoryCursor_nextN_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_nextN_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_nextN_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_nextN_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_nextN_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_nextN_Params) Steps() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s CapHistoryCursor_nextN_Params) SetSteps(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// CapHistoryCursor_nextN_Params_List is a list of CapHistoryCursor_nextN_Params.
type CapHistoryCursor_nextN_Params_List = capnp.StructList[CapHistoryCursor_nextN_Params]

// NewCapHistoryCursor_nextN_Params creates a new list of CapHistoryCursor_nextN_Params.
func NewCapHistoryCursor_nextN_Params_List(s *capnp.Segment, sz int32) (CapHistoryCursor_nextN_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CapHistoryCursor_nextN_Params](l), err
}

// CapHistoryCursor_nextN_Params_Future is a wrapper for a CapHistoryCursor_nextN_Params promised by a client call.
type CapHistoryCursor_nextN_Params_Future struct{ *capnp.Future }

func (f CapHistoryCursor_nextN_Params_Future) Struct() (CapHistoryCursor_nextN_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_nextN_Params(p.Struct()), err
}

type CapHistoryCursor_nextN_Results capnp.Struct

// CapHistoryCursor_nextN_Results_TypeID is the unique identifier for the type CapHistoryCursor_nextN_Results.
const CapHistoryCursor_nextN_Results_TypeID = 0xee77b061c9ba3ce9

func NewCapHistoryCursor_nextN_Results(s *capnp.Segment) (CapHistoryCursor_nextN_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_nextN_Results(st), err
}

func NewRootCapHistoryCursor_nextN_Results(s *capnp.Segment) (CapHistoryCursor_nextN_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_nextN_Results(st), err
}

func ReadRootCapHistoryCursor_nextN_Results(msg *capnp.Message) (CapHistoryCursor_nextN_Results, error) {
	root, err := msg.Root()
	return CapHistoryCursor_nextN_Results(root.Struct()), err
}

func (s CapHistoryCursor_nextN_Results) String() string {
	str, _ := text.Marshal(0xee77b061c9ba3ce9, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_nextN_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_nextN_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_nextN_Results {
	return CapHistoryCursor_nextN_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_nextN_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_nextN_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_nextN_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_nextN_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_nextN_Results) Batch() (ThingValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue_List(p.List()), err
}

func (s CapHistoryCursor_nextN_Results) HasBatch() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryCursor_nextN_Results) SetBatch(v ThingValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewBatch sets the batch field to a newly
// allocated ThingValue_List, preferring placement in s's segment.
func (s CapHistoryCursor_nextN_Results) NewBatch(n int32) (ThingValue_List, error) {
	l, err := NewThingValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ThingValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CapHistoryCursor_nextN_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapHistoryCursor_nextN_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapHistoryCursor_nextN_Results_List is a list of CapHistoryCursor_nextN_Results.
type CapHistoryCursor_nextN_Results_List = capnp.StructList[CapHistoryCursor_nextN_Results]

// NewCapHistoryCursor_nextN_Results creates a new list of CapHistoryCursor_nextN_Results.
func NewCapHistoryCursor_nextN_Results_List(s *capnp.Segment, sz int32) (CapHistoryCursor_nextN_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryCursor_nextN_Results](l), err
}

// CapHistoryCursor_nextN_Results_Future is a wrapper for a CapHistoryCursor_nextN_Results promised by a client call.
type CapHistoryCursor_nextN_Results_Future struct{ *capnp.Future }

func (f CapHistoryCursor_nextN_Results_Future) Struct() (CapHistoryCursor_nextN_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_nextN_Results(p.Struct()), err
}

type CapHistoryCursor_prev_Params capnp.Struct

// CapHistoryCursor_prev_Params_TypeID is the unique identifier for the type CapHistoryCursor_prev_Params.
const CapHistoryCursor_prev_Params_TypeID = 0xc6fd08f6df519d73

func NewCapHistoryCursor_prev_Params(s *capnp.Segment) (CapHistoryCursor_prev_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHistoryCursor_prev_Params(st), err
}

func NewRootCapHistoryCursor_prev_Params(s *capnp.Segment) (CapHistoryCursor_prev_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHistoryCursor_prev_Params(st), err
}

func ReadRootCapHistoryCursor_prev_Params(msg *capnp.Message) (CapHistoryCursor_prev_Params, error) {
	root, err := msg.Root()
	return CapHistoryCursor_prev_Params(root.Struct()), err
}

func (s CapHistoryCursor_prev_Params) String() string {
	str, _ := text.Marshal(0xc6fd08f6df519d73, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_prev_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_prev_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_prev_Params {
	return CapHistoryCursor_prev_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_prev_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_prev_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_prev_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_prev_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapHistoryCursor_prev_Params_List is a list of CapHistoryCursor_prev_Params.
type CapHistoryCursor_prev_Params_List = capnp.StructList[CapHistoryCursor_prev_Params]

// NewCapHistoryCursor_prev_Params creates a new list of CapHistoryCursor_prev_Params.
func NewCapHistoryCursor_prev_Params_List(s *capnp.Segment, sz int32) (CapHistoryCursor_prev_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapHistoryCursor_prev_Params](l), err
}

// CapHistoryCursor_prev_Params_Future is a wrapper for a CapHistoryCursor_prev_Params promised by a client call.
type CapHistoryCursor_prev_Params_Future struct{ *capnp.Future }

func (f CapHistoryCursor_prev_Params_Future) Struct() (CapHistoryCursor_prev_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_prev_Params(p.Struct()), err
}

type CapHistoryCursor_prev_Results capnp.Struct

// CapHistoryCursor_prev_Results_TypeID is the unique identifier for the type CapHistoryCursor_prev_Results.
const CapHistoryCursor_prev_Results_TypeID = 0xc68e1d3ad2dcac35

func NewCapHistoryCursor_prev_Results(s *capnp.Segment) (CapHistoryCursor_prev_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_prev_Results(st), err
}

func NewRootCapHistoryCursor_prev_Results(s *capnp.Segment) (CapHistoryCursor_prev_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_prev_Results(st), err
}

func ReadRootCapHistoryCursor_prev_Results(msg *capnp.Message) (CapHistoryCursor_prev_Results, error) {
	root, err := msg.Root()
	return CapHistoryCursor_prev_Results(root.Struct()), err
}

func (s CapHistoryCursor_prev_Results) String() string {
	str, _ := text.Marshal(0xc68e1d3ad2dcac35, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_prev_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_prev_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_prev_Results {
	return CapHistoryCursor_prev_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_prev_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_prev_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_prev_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_prev_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_prev_Results) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapHistoryCursor_prev_Results) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryCursor_prev_Results) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapHistoryCursor_prev_Results) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CapHistoryCursor_prev_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapHistoryCursor_prev_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapHistoryCursor_prev_Results_List is a list of CapHistoryCursor_prev_Results.
type CapHistoryCursor_prev_Results_List = capnp.StructList[CapHistoryCursor_prev_Results]

// NewCapHistoryCursor_prev_Results creates a new list of CapHistoryCursor_prev_Results.
func NewCapHistoryCursor_prev_Results_List(s *capnp.Segment, sz int32) (CapHistoryCursor_prev_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryCursor_prev_Results](l), err
}

// CapHistoryCursor_prev_Results_Future is a wrapper for a CapHistoryCursor_prev_Results promised by a client call.
type CapHistoryCursor_prev_Results_Future struct{ *capnp.Future }

func (f CapHistoryCursor_prev_Results_Future) Struct() (CapHistoryCursor_prev_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_prev_Results(p.Struct()), err
}
func (p CapHistoryCursor_prev_Results_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapHistoryCursor_prevN_Params capnp.Struct

// CapHistoryCursor_prevN_Params_TypeID is the unique identifier for the type CapHistoryCursor_prevN_Params.
const CapHistoryCursor_prevN_Params_TypeID = 0xa6fcb2009f6f5277

func NewCapHistoryCursor_prevN_Params(s *capnp.Segment) (CapHistoryCursor_prevN_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapHistoryCursor_prevN_Params(st), err
}

func NewRootCapHistoryCursor_prevN_Params(s *capnp.Segment) (CapHistoryCursor_prevN_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapHistoryCursor_prevN_Params(st), err
}

func ReadRootCapHistoryCursor_prevN_Params(msg *capnp.Message) (CapHistoryCursor_prevN_Params, error) {
	root, err := msg.Root()
	return CapHistoryCursor_prevN_Params(root.Struct()), err
}

func (s CapHistoryCursor_prevN_Params) String() string {
	str, _ := text.Marshal(0xa6fcb2009f6f5277, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_prevN_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_prevN_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_prevN_Params {
	return CapHistoryCursor_prevN_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_prevN_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_prevN_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_prevN_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_prevN_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_prevN_Params) Steps() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s CapHistoryCursor_prevN_Params) SetSteps(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// CapHistoryCursor_prevN_Params_List is a list of CapHistoryCursor_prevN_Params.
type CapHistoryCursor_prevN_Params_List = capnp.StructList[CapHistoryCursor_prevN_Params]

// NewCapHistoryCursor_prevN_Params creates a new list of CapHistoryCursor_prevN_Params.
func NewCapHistoryCursor_prevN_Params_List(s *capnp.Segment, sz int32) (CapHistoryCursor_prevN_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CapHistoryCursor_prevN_Params](l), err
}

// CapHistoryCursor_prevN_Params_Future is a wrapper for a CapHistoryCursor_prevN_Params promised by a client call.
type CapHistoryCursor_prevN_Params_Future struct{ *capnp.Future }

func (f CapHistoryCursor_prevN_Params_Future) Struct() (CapHistoryCursor_prevN_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_prevN_Params(p.Struct()), err
}

type CapHistoryCursor_prevN_Results capnp.Struct

// CapHistoryCursor_prevN_Results_TypeID is the unique identifier for the type CapHistoryCursor_prevN_Results.
const CapHistoryCursor_prevN_Results_TypeID = 0xb1731fa2fac2190d

func NewCapHistoryCursor_prevN_Results(s *capnp.Segment) (CapHistoryCursor_prevN_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_prevN_Results(st), err
}

func NewRootCapHistoryCursor_prevN_Results(s *capnp.Segment) (CapHistoryCursor_prevN_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_prevN_Results(st), err
}

func ReadRootCapHistoryCursor_prevN_Results(msg *capnp.Message) (CapHistoryCursor_prevN_Results, error) {
	root, err := msg.Root()
	return CapHistoryCursor_prevN_Results(root.Struct()), err
}

func (s CapHistoryCursor_prevN_Results) String() string {
	str, _ := text.Marshal(0xb1731fa2fac2190d, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_prevN_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_prevN_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_prevN_Results {
	return CapHistoryCursor_prevN_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_prevN_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_prevN_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_prevN_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_prevN_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_prevN_Results) Batch() (ThingValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue_List(p.List()), err
}

func (s CapHistoryCursor_prevN_Results) HasBatch() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryCursor_prevN_Results) SetBatch(v ThingValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewBatch sets the batch field to a newly
// allocated ThingValue_List, preferring placement in s's segment.
func (s CapHistoryCursor_prevN_Results) NewBatch(n int32) (ThingValue_List, error) {
	l, err := NewThingValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ThingValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CapHistoryCursor_prevN_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapHistoryCursor_prevN_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapHistoryCursor_prevN_Results_List is a list of CapHistoryCursor_prevN_Results.
type CapHistoryCursor_prevN_Results_List = capnp.StructList[CapHistoryCursor_prevN_Results]

// NewCapHistoryCursor_prevN_Results creates a new list of CapHistoryCursor_prevN_Results.
func NewCapHistoryCursor_prevN_Results_List(s *capnp.Segment, sz int32) (CapHistoryCursor_prevN_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryCursor_prevN_Results](l), err
}

// CapHistoryCursor_prevN_Results_Future is a wrapper for a CapHistoryCursor_prevN_Results promised by a client call.
type CapHistoryCursor_prevN_Results_Future struct{ *capnp.Future }

func (f CapHistoryCursor_prevN_Results_Future) Struct() (CapHistoryCursor_prevN_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_prevN_Results(p.Struct()), err
}

type CapHistoryCursor_seek_Params capnp.Struct

// CapHistoryCursor_seek_Params_TypeID is the unique identifier for the type CapHistoryCursor_seek_Params.
const CapHistoryCursor_seek_Params_TypeID = 0xc3ef318bca0bb7b4

func NewCapHistoryCursor_seek_Params(s *capnp.Segment) (CapHistoryCursor_seek_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryCursor_seek_Params(st), err
}

func NewRootCapHistoryCursor_seek_Params(s *capnp.Segment) (CapHistoryCursor_seek_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryCursor_seek_Params(st), err
}

func ReadRootCapHistoryCursor_seek_Params(msg *capnp.Message) (CapHistoryCursor_seek_Params, error) {
	root, err := msg.Root()
	return CapHistoryCursor_seek_Params(root.Struct()), err
}

func (s CapHistoryCursor_seek_Params) String() string {
	str, _ := text.Marshal(0xc3ef318bca0bb7b4, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_seek_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_seek_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_seek_Params {
	return CapHistoryCursor_seek_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_seek_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_seek_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_seek_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_seek_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_seek_Params) IsoTimestamp() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapHistoryCursor_seek_Params) HasIsoTimestamp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryCursor_seek_Params) IsoTimestampBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapHistoryCursor_seek_Params) SetIsoTimestamp(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapHistoryCursor_seek_Params_List is a list of CapHistoryCursor_seek_Params.
type CapHistoryCursor_seek_Params_List = capnp.StructList[CapHistoryCursor_seek_Params]

// NewCapHistoryCursor_seek_Params creates a new list of CapHistoryCursor_seek_Params.
func NewCapHistoryCursor_seek_Params_List(s *capnp.Segment, sz int32) (CapHistoryCursor_seek_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryCursor_seek_Params](l), err
}

// CapHistoryCursor_seek_Params_Future is a wrapper for a CapHistoryCursor_seek_Params promised by a client call.
type CapHistoryCursor_seek_Params_Future struct{ *capnp.Future }

func (f CapHistoryCursor_seek_Params_Future) Struct() (CapHistoryCursor_seek_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_seek_Params(p.Struct()), err
}

type CapHistoryCursor_seek_Results capnp.Struct

// CapHistoryCursor_seek_Results_TypeID is the unique identifier for the type CapHistoryCursor_seek_Results.
const CapHistoryCursor_seek_Results_TypeID = 0x88f56e7efe394a20

func NewCapHistoryCursor_seek_Results(s *capnp.Segment) (CapHistoryCursor_seek_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_seek_Results(st), err
}

func NewRootCapHistoryCursor_seek_Results(s *capnp.Segment) (CapHistoryCursor_seek_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_seek_Results(st), err
}

func ReadRootCapHistoryCursor_seek_Results(msg *capnp.Message) (CapHistoryCursor_seek_Results, error) {
	root, err := msg.Root()
	return CapHistoryCursor_seek_Results(root.Struct()), err
}

func (s CapHistoryCursor_seek_Results) String() string {
	str, _ := text.Marshal(0x88f56e7efe394a20, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_seek_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_seek_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_seek_Results {
	return CapHistoryCursor_seek_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_seek_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_seek_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_seek_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_seek_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_seek_Results) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapHistoryCursor_seek_Results) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryCursor_seek_Results) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapHistoryCursor_seek_Results) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CapHistoryCursor_seek_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapHistoryCursor_seek_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapHistoryCursor_seek_Results_List is a list of CapHistoryCursor_seek_Results.
type CapHistoryCursor_seek_Results_List = capnp.StructList[CapHistoryCursor_seek_Results]

// NewCapHistoryCursor_seek_Results creates a new list of CapHistoryCursor_seek_Results.
func NewCapHistoryCursor_seek_Results_List(s *capnp.Segment, sz int32) (CapHistoryCursor_seek_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryCursor_seek_Results](l), err
}

// CapHistoryCursor_seek_Results_Future is a wrapper for a CapHistoryCursor_seek_Results promised by a client call.
type CapHistoryCursor_seek_Results_Future struct{ *capnp.Future }

func (f CapHistoryCursor_seek_Results_Future) Struct() (CapHistoryCursor_seek_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_seek_Results(p.Struct()), err
}
func (p CapHistoryCursor_seek_Results_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

const schema_f1bd301f7c12caab = "x\xda\xccY\x7fpT\xd5\xf5?\xe7\xbd\x0d/\x86M" +
	"v/o\x13\x14a\x16\xf9F\x05fD\x92\x88|I" +
	"\x8d\x1bB2BJb^\"3\xca\xe8\xe8K\xf2L" +
	"\x9e&\xbb\xeb\xbeM \x8e\x880D\xd16\xedH\xc1" +
	"\x0a\x9aQQ\xab\x10\xe3\xafB\xadXF\xb1j\x1aF" +
	"\x8b`\xabc\xc7X\xd1\xa2\x12E\x901\"*\xbc\xce" +
	"\xbdo\xef\xdb\xb7\x9b\x0d\x9bH\xad\xfd+y\xf7\x9es" +
	"\xcf\x8f{>\xe7~\xee\xdd\xd932K]\x05\xd9\x8f" +
	"\xf9@P\x8ed\x8c3\x8b|\xeb\xe6\xf4\x0e\\\xb8\x0a" +
	"H\xae\xcb\xec\xd9=\xe1\x16\xff\xec\x9d_\x02`\xd1\xbc" +
	"\xac2\x94\x17eI\x00u\xe5Y\"\xd6\xd5d\x09\x08" +
	"`N\x0et-\xef\xea^\xbf\x1a\x94\\\xc4\xb8B\x86" +
	"K\x02(\xaa\xc8\x9a\x86\xf2\x12\xaaS\xa4d\xf9\x11\xd0" +
	"|\xf9\xafw|\xbadn`\x0d\x90\xe9\x08\x90\x81t" +
	"j\xe3\xf8\xdd\x08(\xf7\x8e\x0f\x00\x9aS+\xe7\x9d\xbc" +
	"58\xb4\x16\x94\xf3\xd0\x96xc\xfc&*10~" +
	"\x19\xa0y\xa4\xff\xd2\x80K\xb8\xe8. \xe7\xdb\x02\xf3" +
	"\xdcG\xa9@\x95\x9b.\xf1\xc1\xcf\xc6\xf5\xcd}\xa9\xf2" +
	"7@r\xc5\x84\x10Z\xdd\xc5(\xafpK\x00r\x87" +
	"\xbbO\xc6l\x09\xc0\xfc\xe8\x96\xe0\xa6U\xf7\x0d\xad\xb7" +
	"<bn\x1ft\xefFp\x99s\xeb\xfc\xefh\xb7\xe7" +
	"n\x00\xf2\x7f|f\xc0\xbd\x95\xce\xec\xbb\xba3t\xd7" +
	"\xae\xe2\xfb\x1d3o\xb87\xd3\x99U\xc2\xc0\x01\xfd\xb1" +
	"\xfa\xeea\xb6w\xba\x0bQ~\x83\xda.\xeaw\xf7\xa1" +
	"\xbc\x9f\x19\xcf\x9d\xe7\x1fZz\xc9\x8d\xdd@\xf2\xedX" +
	"\xfa\xb3?d\xc1f\xd3X\xe6\xeey/\xff\xd0\x1a\xf9" +
	"\x81\x84t\x9c\xc8f\xe9\xc8\xceY\x06xxYm\xe8" +
	"\x81g\xbf\xff\x9d5\xcf\\\xd1s\xd8tG\x0e]`" +
	"\xcbc\xc5S\x8c\xa9\x83[\x9c\x166\xe6\xecc\x09g" +
	"\x027\x90I\xfe+B\xe3\xb6:b\xd9\x9fC\xa3<" +
	"\xf6V\xf5#\xd7=U\xd2\xe3P\xdc\x9bs\x17U\xdc" +
	"\xcf\x14\xa7^\xde\xf6\xc8\xd9k\xdf\xed\x1d\x16*z\xa6" +
	"\xa1L<4\xcd\xd9\x9e>\xb9\x8b\xfew\xe2\x8b\xae\x82" +
	"\xab\xbf;\xf4d\xb2l\x9bg\x12\xca\x9dLv\x95\xa7" +
	"O\xce\xf0\xd2\xacd\x9f\xf5\xf2\xb7\x9b\xfd\xc63\x09A" +
	"\x1f\xf2l\xa6\xb6Oxh\x0d\x9c\xd1\xd33i\x87{" +
	"\xf3\xef-\xa7-\x01\xdd\xcb\x04:\xbc\x01\xc0\x17]\xd7" +
	"\xfe\xe5\xde7\x9f\xdd\xe6\xf0}\x8b\xf7\x1ftz'\x9d" +
	"6\xbf[^\xf9\xfc\x91]\xf7\xfeaX\x95\x0fx\xcb" +
	"P>D\xbd\xa8\xfb\xd4+b\xddW^V\xe5\xd2\xe1" +
	"\xc1\x07\x07o<\xb6\xc3Q$\x87\xbc3\x05p\x99\x9f" +
	"t\xfag\x9ds\xcd;/\x802\xdd\xde\x80\x03^\x96" +
	"\xdf\xe3\xcc\xd47\x97\xfd\xfc\xb7}\x9f\x0e\xee\x04r\x1e" +
	"\x9f\x9fB\xd6\xd1Z\xd9\xf6\xdc\xf8\xdd\xbf(8\xfcg" +
	"k\xc6\xf22\x9bN\xa1<\x85P\xd59O\xbc\xb7\xaf" +
	"x\xca\xaf^K\xc8\xc3|\xc2vW!4\x0fF\xb7" +
	"\xf2\xcf\xaf3O\xbc\xe6X\xbc\xd7Z\xfc\xf2\xdd\xbe\x96" +
	"\xc5_\xdf\xde\xef\x98\xe9\xb6f.\xbe\xe8\xe2\x85\x05\xcf" +
	"\xe9\xaf;+\xa2\x8b0\x08>\xc4\xcc>\xb8\xfd\xe4y" +
	"kON\xda\xe3P\xddK\x8d\xba\xcc\x07\xef\xf1.8" +
	"\xf6\xc2u{\x9c\xe8\xddE\xa6\x09\x80\xf2\xbbL\xb5i" +
	"v\xdd\xeb\x0bH\xf5\x9bN\x81\xe3$\x8b\x0a\x90\x09T" +
	" \xf0\xd97+\xb7\xfez\xd9>\xa7@\xc1\x84\x09T" +
	"`\x11\x13\xd8\xf0\xd4\xa5\x1b\x9a\xef\xb9\xf3\xad\x84\x9d\x9d" +
	"`\x154\x13\x98\xbe4\xd0\xb9\xe1\xe5\x1b\xfe\x05\x8e\x8a" +
	"\xdfh\x09la\x02\x13\xe7\x9c\xf5\xfe\xe0\xab\xde\x8f\x9d" +
	"\xfd\xa1\xdf2\xb1\x9f\x09\x08\xe7wzn5n\xfd\x04" +
	"\x94\xf3\xe3iE\x99\xa1.W\xa6i=sh[\xe3" +
	"\x92\xb9Y\x07\x87\x95G\x87\\\x8fr\x97L\xcbc\xad" +
	",b\xddz\x99\x95\xc7\xa6\xd5/^\xbf\xc3\xff\xfe\xa0" +
	"3\xaa\xbbeV\x04\x8f\xca\xd4d\xde\xc9\xcf\x8eT\x1c" +
	"\xf0}>l\xc1\xbf\xcb\xc5(\x1f`\x0b~@\x17\xfc" +
	"\xdcZ\xf0\xe0%;\xfa\xd5\xa7\x97}\x91\xb0\xf3\x07d" +
	"V\xe0C\xcc\xc59\x97\x87\x1f\xd7\x0e?\xfc\xa5\xd3\xa4" +
	"\xeac\x99\xee\xf0Q\x93{o\xba\xcf\xb8C\xcb<:" +
	"\x0c\x9e\x1b}e(o\xf1Q\x85G}\x97\xa1\xdc\x95" +
	"K1\xf7\xd0\x19\xaaTU\xfd\xe6Qg\xde\xdbr\x99" +
	"\xc1\xce\\\xba\x9e\x94u\xe5w\xbb^1\xbeJp\xe9" +
	"QKb{.u\xa9\xe2h\xdf\xdbWV\x9d=\x14" +
	"K\xbcH\x05H\xde \x1587\xef)@s\xe7\xfa" +
	"\x0f\xbf\xd9>8\xf9\x98sg^\xcdc>\x0f\xe4Q" +
	"\x1b+\xa6\xfeI-\x9a|\xf0\xb8\x03f8q\x02\x85" +
	"\xd99\x15{\xf0\xa6\x87\x97~k\x15-\x9b9\x9e\xb7" +
	"\x9a\xd6\xe43'\xb77\xe5=q\xcd\xf7\x89\xa9\xcac" +
	"\x051\x94G\xfd\xda\xf6Q\xcf\xd3=\xcf\xfd\xcdt\x9a" +
	"U&2\xbf\xb4\x89\x01\xb8\xcaln\xabW\xc3\xfa\x85" +
	"\x0b]\xba\x11\x0dE:f5\xa8\xe1`\xb8\xb8\xd9\xfa" +
	"\xaa\xd3\"\xedz\x83V\xad\xb6jP\x83\x88n\x10\xd0" +
	"\x0d@\xb0leL\xc2\xd6\x17\x13\xf4+\xda\xb5`\xb4" +
	"V\x8bj\xc1\xa8\xa4\x87\x825\x88\x8aOt\x01\xb8\x10" +
	"\x80\xac\x98\x09\xa0,\x17QY# A\xf4Q\xd7\xc9" +
	"\xaa\xa5\x00\xcam\"*\xf7\x0bH\x04\xc1\x87\x02\x00\xd9" +
	"X\x0c\xa0\xac\x17QyZ@\"\x8a>\x14\x01Ho" +
	"\x19\x80\xf2\xb8\x88\xca+\x02\xa2\xcb\x87.\x00\xb2+\x02" +
	"\xa0\xbc$\xa2\xf2\xba\x80\x9e\xa0\xda\xaa\xc5\\E3\xdc" +
	"V\xdf\xa2\x1b\xcd\x1a\x88\x11\x03s\x00kD+\x8c\x1c" +
	"\xc0@\xb4Y\x0f6%\x8f\xae\xd4\x967\xb4\xb45j" +
	"I\xc3f\x84E\xa3\x87\xc0\x1f,W;\x0ct\x81\x80" +
	".@;\x01\xe3\x12\x12\xb0@\x0dW\xa9A\xb5I\xab" +
	"\x8d\xa9\x05gE5#\xca\xf2\x92_\xa3F\xd4V\x03" +
	"@q\xd99\xc9\x9e\x04\xa0d\x8a\xa8\xf8\x04\x14\xa3\xed" +
	"\xe85\xd7\xddv\xcf\x1f\xbb?~\xfb>\x00D\xaf\xc3" +
	"NF\xb2\x9d\x85\xd6\xc0\x82\xb6\x88\x11\x8a\xcc24\xed" +
	"\xc6\xfcZ\xcdhk\x11\xa3\x86\x92i\x1b\x98A\x0d\xe4" +
	"\x8b\xa8\xcc\x16\x90\xe7\xfc\x82B\x00e\xba\x88\xcaE#" +
	"\x18\xf5\xb7\xab-z#\"\x08\x88\xa7\x0auaB\xb9" +
	"\xd0\xf1ZMm\x8c\x8d\xe6\xd7j~\xa3\xad%j8" +
	"\xc3\x9d\x16\x0fWjP\xc3H\xe2G* \x12\x871" +
	"q$c\x01\xcb\x1a\xad-\xb7\x98\x01`\xf76\xe4E" +
	"O\x94\x08\x08d\x91\x84q\xf8!\xef\x90\xa4d\x13\x08" +
	"d\x9e\x84\x82\x8d]\xe4\xec\x8a\\p3\x08\xe4\\\xc9" +
	"lP\xc3\xf3\x1b\x1b\x17\xea\xe0g&K\x91\x8e\xb0}" +
	"E\xbe\xb1b(h\x0d\xb3\x88!\xa0\xc7$kp\x0c" +
	"\xa5\xd1\xa4Y\x95a\xd8\xa51\xf2v3\x87\xac1\xb5" +
	"\xb11\xa6V\xab\x19\x1e\x9a\xe21\xa9\xb12\x91\x9cZ" +
	"#\xe5z\x81\x9f\x15\x17M\xf5d\x96j~L\"\xef" +
	"\x8cdo!\x08\xe4U\x9aj~\xfa\"\xe7o\xe4\xf9" +
	"\x99 \x90^\x9ajN\x08\x90w.\xf2\x10\x9d\xdb " +
	"\xa1h\x1fn\xc8\x0f\x00r']s\x85\x84.\xfb\xac" +
	"GN\x0b\xc8MTO\x930\x83\x93\xc08s\"W" +
	"Q\xbd*\x09\xc7\xd94\x039\xb5&\xf3\xa9\xde\x1c\xc9" +
	"\x7f\xbd\x1e1\xa2\xa5\xe8iQ\xd9\x9f\xa0\xb6<Z\x8a" +
	"~\xfa\xa7\xba\x14=\xe1\x88\xd6^\x8a~\xfa\x87~R" +
	"P\xa5\xd9RG\xc1\xdb\xdb\x19\x07\x80\x95g'\x00\x8a" +
	"\xe3\x00\x084\xb0\xec\"\x893\xe8$\x0c\xa4\xc1<\x8d" +
	"\xe1\xc7\xc6|\x1a\x17X\xa6X\xf5\x8a\xad\x09q\x16\xc6" +
	"\xe3\xf4\x1bQ-l`&\x08\x98\x09\xa3OeM$" +
	"\x14\xd6\"Q]3\xac\x18\xa3\x98`\xa0\x16@q\x8b" +
	"\xa8L\x17\xd0lW[\xda\xb4\xc5\xba\x01\x18\xe5\xed;" +
	"1\xbe\x9cSE\x94\x08\x91\xf9\x0d\x14\x9a\xa3@\x96\xd3" +
	"]=x}(\xe6eR\x7f\x9f\x19\xcf\x83\x87J\xa1" +
	"\xd7,y\xb7\xec\xc9\x8b\xaf]\xf3\xcb\xe4\x0e/\x8ed" +
	"A\x0aE:\xecv\xc7i\xbe\xe3\x1e\xa5\xac\xe6\xed\x8e" +
	"\xf3\\\xe4W R\x12au\x8f\x82M'\xf0\xad\xea" +
	"G\x80]rfPLL\x91L^\xb7\x18\x0b\x07J" +
	"\xd1\xe4\x1b\x00~\xb6\x05\xa5\x96\xf7\x89`\x10G\xca\xa4" +
	"\xe8\xf0\xd7fY\xc8o]D\xa9\xe5\xfer\xe6\x8b\xfc" +
	"vIJ*\xb9\xbf\xfc\xbe\x83\xfcNJfP\xbds" +
	"$\x93\xef\x12 \xed\xc1\xbc\xad\x01\x80\xf3\x0b\x8dDg" +
	"GU\xc86b\x1d`*\x8c\x81\xa94\x0e\xa6\x12:" +
	"\xf6\xff\"*\xe5\x02\xfa\xeb\xd5hC\xf3\x88e7Z" +
	"X\xa5l\xef5jDR\x13q\xc5\xf9B\xbe\x05\xe3" +
	"\xb4\xd5>\xa6\x86\x95\x02\xc7\xce\xfaM X\xa9\x09d" +
	"\x83\x1a\xa6\xac\xd1a$\x91@\xde<\xec\xc8\xb4\x17\x92" +
	"\xd2\x9d\x96\x11\xad5\xd4\xae9(fJ\x9c\x8e\x81\x8f" +
	"\xa5j+\x95\xb1\xb6r\xa6\xc0\xa8\x9f\xaa\x07\xb5F\xa0" +
	"I\x1d[_\xa4\x07\x8au\xa8\xa31&\x0a\x17\xd3q" +
	"\xbat\x83\xc3%\xdd\x08]\xa1\xb7j\x06x\xa2jk" +
	"x\xd8f\x8c\xa2\xc8\xff\x07\x0e\x8c\xb1&\x86\x9ds\xc9" +
	":c8>R\xf1\xee\xc28\x8e\xfc\xb4\xae\x93\xaf\x03" +
	"\xa3\xf5\x8d\xf1\x09\x0e\x9c\xd3\xac\xe5\x14pO\x0b?i" +
	"\xb4\x1c3\xc1\xcc\xb0t\xfc\x18vR\xc1\xcb\xc9\xff#" +
	"Z\x14\xbd\xf1\xc7\xd4t\xf7\x9dTL6E\xc3\xfaO" +
	"]\xa8\x18%\xfca\xccFJ\x7fOJ\xca^\xda\\" +
	"Yw%\xfb}#\x89'\x8e\xe2b\x16\xcf\x9e]f" +
	"\x0e\xfcW\xc6\xb1\xce\xf1_\xb0\x1a@\x99-\xa2r\x89" +
	"\x80fC\x8b\xae\x05\xa3\x8b\xcai'\xe4\x95\xa17\x05" +
	"C\x11\xadV\xc3X\x0c\xc3{d\xca\xa3\xc1\x19y\xec" +
	"\x8d ~<lJy\xd1\xfa!\x17\xaaT\x09-\x8b" +
	"c~eD\x8b.\xd6\x0d\x07]t\xd6a\xce\x88\xac" +
	",\x16\x04\xcdf\xec\xfcJ\xf0?\x92|u\x1c[\xb5" +
	"\xfd\xd7\xe8GZ4\x1b\xa3\xea\x1a\xa3G\xb3+\x8dA" +
	"\xb0\x9e\x8a2\x1c?N \x7fa$wS\xdew'" +
	"\xe5\x8b\xfc\xad\x15\xf9\x9b*Y\xb1\x0e\x04\xd2A\xf9\"" +
	"\x7f\xa8E\xfepMZ\xb7\x82@tz\xc7\xe4/\x87" +
	"\xc8_\xdb\xc85T\xef*z\xc7\xe4?\xcf \x7f\xd6" +
	"&U\xd4^E\x9c\x173.\x19g\xc9\xdci\xc6>" +
	"y#G\x9e,\x0f\x0d\xa7\x14M#\xa58'\x1f\x80" +
	"\xd14\xf44\xe5\xad\xe4\x14\x84\xf0t\xfb\x9du\x90\xa5" +
	"\xaa\xc0\x9f\xee\x05\xa9F\xf5\xd0\xa2S\xdc\xb63\x15\xb4" +
	"S\x95\x8b\xa8\xd48\xde\x10\xab\xea\x01\x94\xc5\"*W" +
	":\xde\x10\x97P\xb4\xd7\x88\xa8\\=B\xff\xb2_\x08" +
	"\xa5\xc8\xa2r>\xba\x92\xbd\x0d\xc6\xbfO\xa7\xa7\xa7B" +
	"\x8c\x93^\xa6r\xea4\x00\xca;\x9e\xbd\xc6\xf8\xb47" +
	"\xd6\x98\x87\\a\x14\x94\xf6\xa7\x7fat\x1cd\x9c\xfb" +
	"\x9f\xf2\xd0\xe4\xbf\xc2YG\xe6\xbf\x03\x00\x00\xff\xffZ" +
	"\xa0\xce\x88"

func init() {
	schemas.Register(schema_f1bd301f7c12caab,
		0x812fddad35921433,
		0x82949d8d788d3f1c,
		0x843f3755e887cec2,
		0x88f56e7efe394a20,
		0x8a3402043f3ec9f0,
		0x934ac037c7063be0,
		0x94f59b819a6e7ce3,
		0x95158665d71f5337,
		0x9c3ac18a6f855cd2,
		0x9d62a769e5dd0281,
		0x9d6b3c5af51f3915,
		0x9f1384ed24dccf37,
		0xa6fcb2009f6f5277,
		0xa9ea20731d3aa7a9,
		0xaa066f541f1a116a,
		0xab3daf6000a44ed3,
		0xadd9881ba4754f20,
		0xaeedfb5c318d00ee,
		0xb1731fa2fac2190d,
		0xb3a20cba1aabab09,
		0xb400b2d098c85f04,
		0xb698c1f0b94a78fb,
		0xbaf76beaa0eaef07,
		0xbbd75d212e1f85e7,
		0xbdeae8c7974b47f8,
		0xc3ef318bca0bb7b4,
		0xc68e1d3ad2dcac35,
		0xc6fd08f6df519d73,
		0xc986f64c6c14ca4f,
		0xcc69b73148363436,
		0xcf1afe8826feb5a0,
		0xcf60bbf7431096a0,
		0xd04e1143cc533067,
		0xd2778faa7ff8eb3f,
		0xd3899668953eaf95,
		0xe46ac295853f5a28,
		0xe610c5eade193517,
		0xe77e737e0f852702,
		0xe90a375564b4f518,
		0xeade1fba66bf829a,
		0xec14e545f0ebfe16,
		0xee77b061c9ba3ce9,
		0xf1a3ef65a8704f35,
		0xf2086587739b71d1,
		0xf2d04e4d076109a1,
		0xf473c4c1fb580a07,
		0xf51b4d58d6c7f245,
		0xf71ceab5f8e294bd,
		0xf9e91c3361bc207d,
		0xfa5aa37101cf4521,
		0xfc5dac1667b5feb1,
		0xffd4b7abb0abe3b4)
}

// Code generated by capnpc-go. DO NOT EDIT.

package hubapi

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

// Constants defined in History.capnp.
const (
	HistoryServiceName     = "history"
	CapNameAddHistory      = "capAddHistory"
	CapNameManageRetention = "capManageRetention"
	CapNameReadHistory     = "capReadHistory"
)

type EventRetention capnp.Struct

// EventRetention_TypeID is the unique identifier for the type EventRetention.
const EventRetention_TypeID = 0x82949d8d788d3f1c

func NewEventRetention(s *capnp.Segment) (EventRetention, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return EventRetention(st), err
}

func NewRootEventRetention(s *capnp.Segment) (EventRetention, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return EventRetention(st), err
}

func ReadRootEventRetention(msg *capnp.Message) (EventRetention, error) {
	root, err := msg.Root()
	return EventRetention(root.Struct()), err
}

func (s EventRetention) String() string {
	str, _ := text.Marshal(0x82949d8d788d3f1c, capnp.Struct(s))
	return str
}

func (s EventRetention) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EventRetention) DecodeFromPtr(p capnp.Ptr) EventRetention {
	return EventRetention(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EventRetention) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EventRetention) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EventRetention) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EventRetention) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EventRetention) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EventRetention) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EventRetention) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EventRetention) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s EventRetention) Publishers() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s EventRetention) HasPublishers() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s EventRetention) SetPublishers(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewPublishers sets the publishers field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s EventRetention) NewPublishers(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s EventRetention) Things() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s EventRetention) HasThings() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s EventRetention) SetThings(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewThings sets the things field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s EventRetention) NewThings(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s EventRetention) Exclude() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.TextList(p.List()), err
}

func (s EventRetention) HasExclude() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s EventRetention) SetExclude(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewExclude sets the exclude field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s EventRetention) NewExclude(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s EventRetention) RetentionDays() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s EventRetention) SetRetentionDays(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// EventRetention_List is a list of EventRetention.
type EventRetention_List = capnp.StructList[EventRetention]

// NewEventRetention creates a new list of EventRetention.
func NewEventRetention_List(s *capnp.Segment, sz int32) (EventRetention_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[EventRetention](l), err
}

// EventRetention_Future is a wrapper for a EventRetention promised by a client call.
type EventRetention_Future struct{ *capnp.Future }

func (f EventRetention_Future) Struct() (EventRetention, error) {
	p, err := f.Future.Ptr()
	return EventRetention(p.Struct()), err
}

type CapHistoryService capnp.Client

// CapHistoryService_TypeID is the unique identifier for the type CapHistoryService.
const CapHistoryService_TypeID = 0x934ac037c7063be0

func (c CapHistoryService) CapAddHistory(ctx context.Context, params func(CapHistoryService_capAddHistory_Params) error) (CapHistoryService_capAddHistory_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x934ac037c7063be0,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapHistoryService",
			MethodName:    "capAddHistory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryService_capAddHistory_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryService_capAddHistory_Results_Future{Future: ans.Future()}, release
}
func (c CapHistoryService) CapManageRetention(ctx context.Context, params func(CapHistoryService_capManageRetention_Params) error) (CapHistoryService_capManageRetention_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x934ac037c7063be0,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapHistoryService",
			MethodName:    "capManageRetention",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryService_capManageRetention_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryService_capManageRetention_Results_Future{Future: ans.Future()}, release
}
func (c CapHistoryService) CapReadHistory(ctx context.Context, params func(CapHistoryService_capReadHistory_Params) error) (CapHistoryService_capReadHistory_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x934ac037c7063be0,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapHistoryService",
			MethodName:    "capReadHistory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryService_capReadHistory_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryService_capReadHistory_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapHistoryService) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapHistoryService) AddRef() CapHistoryService {
	return CapHistoryService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapHistoryService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapHistoryService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapHistoryService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapHistoryService) DecodeFromPtr(p capnp.Ptr) CapHistoryService {
	return CapHistoryService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapHistoryService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapHistoryService) IsSame(other CapHistoryService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapHistoryService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapHistoryService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapHistoryService_Server is a CapHistoryService with a local implementation.
type CapHistoryService_Server interface {
	CapAddHistory(context.Context, CapHistoryService_capAddHistory) error

	CapManageRetention(context.Context, CapHistoryService_capManageRetention) error

	CapReadHistory(context.Context, CapHistoryService_capReadHistory) error
}

// CapHistoryService_NewServer creates a new Server from an implementation of CapHistoryService_Server.
func CapHistoryService_NewServer(s CapHistoryService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapHistoryService_Methods(nil, s), s, c)
}

// CapHistoryService_ServerToClient creates a new Client from an implementation of CapHistoryService_Server.
// The caller is responsible for calling Release on the returned Client.
func CapHistoryService_ServerToClient(s CapHistoryService_Server) CapHistoryService {
	return CapHistoryService(capnp.NewClient(CapHistoryService_NewServer(s)))
}

// CapHistoryService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapHistoryService_Methods(methods []server.Method, s CapHistoryService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x934ac037c7063be0,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapHistoryService",
			MethodName:    "capAddHistory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapAddHistory(ctx, CapHistoryService_capAddHistory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x934ac037c7063be0,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapHistoryService",
			MethodName:    "capManageRetention",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapManageRetention(ctx, CapHistoryService_capManageRetention{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x934ac037c7063be0,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapHistoryService",
			MethodName:    "capReadHistory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapReadHistory(ctx, CapHistoryService_capReadHistory{call})
		},
	})

	return methods
}

// CapHistoryService_capAddHistory holds the state for a server call to CapHistoryService.capAddHistory.
// See server.Call for documentation.
type CapHistoryService_capAddHistory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryService_capAddHistory) Args() CapHistoryService_capAddHistory_Params {
	return CapHistoryService_capAddHistory_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryService_capAddHistory) AllocResults() (CapHistoryService_capAddHistory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capAddHistory_Results(r), err
}

// CapHistoryService_capManageRetention holds the state for a server call to CapHistoryService.capManageRetention.
// See server.Call for documentation.
type CapHistoryService_capManageRetention struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryService_capManageRetention) Args() CapHistoryService_capManageRetention_Params {
	return CapHistoryService_capManageRetention_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryService_capManageRetention) AllocResults() (CapHistoryService_capManageRetention_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capManageRetention_Results(r), err
}

// CapHistoryService_capReadHistory holds the state for a server call to CapHistoryService.capReadHistory.
// See server.Call for documentation.
type CapHistoryService_capReadHistory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryService_capReadHistory) Args() CapHistoryService_capReadHistory_Params {
	return CapHistoryService_capReadHistory_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryService_capReadHistory) AllocResults() (CapHistoryService_capReadHistory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capReadHistory_Results(r), err
}

// CapHistoryService_List is a list of CapHistoryService.
type CapHistoryService_List = capnp.CapList[CapHistoryService]

// NewCapHistoryService creates a new list of CapHistoryService.
func NewCapHistoryService_List(s *capnp.Segment, sz int32) (CapHistoryService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapHistoryService](l), err
}

type CapHistoryService_capAddHistory_Params capnp.Struct

// CapHistoryService_capAddHistory_Params_TypeID is the unique identifier for the type CapHistoryService_capAddHistory_Params.
const CapHistoryService_capAddHistory_Params_TypeID = 0xe77e737e0f852702

func NewCapHistoryService_capAddHistory_Params(s *capnp.Segment) (CapHistoryService_capAddHistory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryService_capAddHistory_Params(st), err
}

func NewRootCapHistoryService_capAddHistory_Params(s *capnp.Segment) (CapHistoryService_capAddHistory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryService_capAddHistory_Params(st), err
}

func ReadRootCapHistoryService_capAddHistory_Params(msg *capnp.Message) (CapHistoryService_capAddHistory_Params, error) {
	root, err := msg.Root()
	return CapHistoryService_capAddHistory_Params(root.Struct()), err
}

func (s CapHistoryService_capAddHistory_Params) String() string {
	str, _ := text.Marshal(0xe77e737e0f852702, capnp.Struct(s))
	return str
}

func (s CapHistoryService_capAddHistory_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryService_capAddHistory_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryService_capAddHistory_Params {
	return CapHistoryService_capAddHistory_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryService_capAddHistory_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryService_capAddHistory_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryService_capAddHistory_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryService_capAddHistory_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryService_capAddHistory_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapHistoryService_capAddHistory_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryService_capAddHistory_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapHistoryService_capAddHistory_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapHistoryService_capAddHistory_Params) IgnoreRetention() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapHistoryService_capAddHistory_Params) SetIgnoreRetention(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapHistoryService_capAddHistory_Params_List is a list of CapHistoryService_capAddHistory_Params.
type CapHistoryService_capAddHistory_Params_List = capnp.StructList[CapHistoryService_capAddHistory_Params]

// NewCapHistoryService_capAddHistory_Params creates a new list of CapHistoryService_capAddHistory_Params.
func NewCapHistoryService_capAddHistory_Params_List(s *capnp.Segment, sz int32) (CapHistoryService_capAddHistory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryService_capAddHistory_Params](l), err
}

// CapHistoryService_capAddHistory_Params_Future is a wrapper for a CapHistoryService_capAddHistory_Params promised by a client call.
type CapHistoryService_capAddHistory_Params_Future struct{ *capnp.Future }

func (f CapHistoryService_capAddHistory_Params_Future) Struct() (CapHistoryService_capAddHistory_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryService_capAddHistory_Params(p.Struct()), err
}

type CapHistoryService_capAddHistory_Results capnp.Struct

// CapHistoryService_capAddHistory_Results_TypeID is the unique identifier for the type CapHistoryService_capAddHistory_Results.
const CapHistoryService_capAddHistory_Results_TypeID = 0xffd4b7abb0abe3b4

func NewCapHistoryService_capAddHistory_Results(s *capnp.Segment) (CapHistoryService_capAddHistory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capAddHistory_Results(st), err
}

func NewRootCapHistoryService_capAddHistory_Results(s *capnp.Segment) (CapHistoryService_capAddHistory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capAddHistory_Results(st), err
}

func ReadRootCapHistoryService_capAddHistory_Results(msg *capnp.Message) (CapHistoryService_capAddHistory_Results, error) {
	root, err := msg.Root()
	return CapHistoryService_capAddHistory_Results(root.Struct()), err
}

func (s CapHistoryService_capAddHistory_Results) String() string {
	str, _ := text.Marshal(0xffd4b7abb0abe3b4, capnp.Struct(s))
	return str
}

func (s CapHistoryService_capAddHistory_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryService_capAddHistory_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryService_capAddHistory_Results {
	return CapHistoryService_capAddHistory_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryService_capAddHistory_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryService_capAddHistory_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryService_capAddHistory_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryService_capAddHistory_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryService_capAddHistory_Results) Cap() CapAddHistory {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapAddHistory(p.Interface().Client())
}

func (s CapHistoryService_capAddHistory_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryService_capAddHistory_Results) SetCap(v CapAddHistory) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapHistoryService_capAddHistory_Results_List is a list of CapHistoryService_capAddHistory_Results.
type CapHistoryService_capAddHistory_Results_List = capnp.StructList[CapHistoryService_capAddHistory_Results]

// NewCapHistoryService_capAddHistory_Results creates a new list of CapHistoryService_capAddHistory_Results.
func NewCapHistoryService_capAddHistory_Results_List(s *capnp.Segment, sz int32) (CapHistoryService_capAddHistory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryService_capAddHistory_Results](l), err
}

// CapHistoryService_capAddHistory_Results_Future is a wrapper for a CapHistoryService_capAddHistory_Results promised by a client call.
type CapHistoryService_capAddHistory_Results_Future struct{ *capnp.Future }

func (f CapHistoryService_capAddHistory_Results_Future) Struct() (CapHistoryService_capAddHistory_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryService_capAddHistory_Results(p.Struct()), err
}
func (p CapHistoryService_capAddHistory_Results_Future) Cap() CapAddHistory {
	return CapAddHistory(p.Future.Field(0, nil).Client())
}

type CapHistoryService_capManageRetention_Params capnp.Struct

// CapHistoryService_capManageRetention_Params_TypeID is the unique identifier for the type CapHistoryService_capManageRetention_Params.
const CapHistoryService_capManageRetention_Params_TypeID = 0xf71ceab5f8e294bd

func NewCapHistoryService_capManageRetention_Params(s *capnp.Segment) (CapHistoryService_capManageRetention_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capManageRetention_Params(st), err
}

func NewRootCapHistoryService_capManageRetention_Params(s *capnp.Segment) (CapHistoryService_capManageRetention_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capManageRetention_Params(st), err
}

func ReadRootCapHistoryService_capManageRetention_Params(msg *capnp.Message) (CapHistoryService_capManageRetention_Params, error) {
	root, err := msg.Root()
	return CapHistoryService_capManageRetention_Params(root.Struct()), err
}

func (s CapHistoryService_capManageRetention_Params) String() string {
	str, _ := text.Marshal(0xf71ceab5f8e294bd, capnp.Struct(s))
	return str
}

func (s CapHistoryService_capManageRetention_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryService_capManageRetention_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryService_capManageRetention_Params {
	return CapHistoryService_capManageRetention_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryService_capManageRetention_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryService_capManageRetention_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryService_capManageRetention_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryService_capManageRetention_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryService_capManageRetention_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapHistoryService_capManageRetention_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryService_capManageRetention_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapHistoryService_capManageRetention_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapHistoryService_capManageRetention_Params_List is a list of CapHistoryService_capManageRetention_Params.
type CapHistoryService_capManageRetention_Params_List = capnp.StructList[CapHistoryService_capManageRetention_Params]

// NewCapHistoryService_capManageRetention_Params creates a new list of CapHistoryService_capManageRetention_Params.
func NewCapHistoryService_capManageRetention_Params_List(s *capnp.Segment, sz int32) (CapHistoryService_capManageRetention_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryService_capManageRetention_Params](l), err
}

// CapHistoryService_capManageRetention_Params_Future is a wrapper for a CapHistoryService_capManageRetention_Params promised by a client call.
type CapHistoryService_capManageRetention_Params_Future struct{ *capnp.Future }

func (f CapHistoryService_capManageRetention_Params_Future) Struct() (CapHistoryService_capManageRetention_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryService_capManageRetention_Params(p.Struct()), err
}

type CapHistoryService_capManageRetention_Results capnp.Struct

// CapHistoryService_capManageRetention_Results_TypeID is the unique identifier for the type CapHistoryService_capManageRetention_Results.
const CapHistoryService_capManageRetention_Results_TypeID = 0xe610c5eade193517

func NewCapHistoryService_capManageRetention_Results(s *capnp.Segment) (CapHistoryService_capManageRetention_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capManageRetention_Results(st), err
}

func NewRootCapHistoryService_capManageRetention_Results(s *capnp.Segment) (CapHistoryService_capManageRetention_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capManageRetention_Results(st), err
}

func ReadRootCapHistoryService_capManageRetention_Results(msg *capnp.Message) (CapHistoryService_capManageRetention_Results, error) {
	root, err := msg.Root()
	return CapHistoryService_capManageRetention_Results(root.Struct()), err
}

func (s CapHistoryService_capManageRetention_Results) String() string {
	str, _ := text.Marshal(0xe610c5eade193517, capnp.Struct(s))
	return str
}

func (s CapHistoryService_capManageRetention_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryService_capManageRetention_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryService_capManageRetention_Results {
	return CapHistoryService_capManageRetention_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryService_capManageRetention_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryService_capManageRetention_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryService_capManageRetention_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryService_capManageRetention_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryService_capManageRetention_Results) Cap() CapManageRetention {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapManageRetention(p.Interface().Client())
}

func (s CapHistoryService_capManageRetention_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryService_capManageRetention_Results) SetCap(v CapManageRetention) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapHistoryService_capManageRetention_Results_List is a list of CapHistoryService_capManageRetention_Results.
type CapHistoryService_capManageRetention_Results_List = capnp.StructList[CapHistoryService_capManageRetention_Results]

// NewCapHistoryService_capManageRetention_Results creates a new list of CapHistoryService_capManageRetention_Results.
func NewCapHistoryService_capManageRetention_Results_List(s *capnp.Segment, sz int32) (CapHistoryService_capManageRetention_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryService_capManageRetention_Results](l), err
}

// CapHistoryService_capManageRetention_Results_Future is a wrapper for a CapHistoryService_capManageRetention_Results promised by a client call.
type CapHistoryService_capManageRetention_Results_Future struct{ *capnp.Future }

func (f CapHistoryService_capManageRetention_Results_Future) Struct() (CapHistoryService_capManageRetention_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryService_capManageRetention_Results(p.Struct()), err
}
func (p CapHistoryService_capManageRetention_Results_Future) Cap() CapManageRetention {
	return CapManageRetention(p.Future.Field(0, nil).Client())
}

type CapHistoryService_capReadHistory_Params capnp.Struct

// CapHistoryService_capReadHistory_Params_TypeID is the unique identifier for the type CapHistoryService_capReadHistory_Params.
const CapHistoryService_capReadHistory_Params_TypeID = 0xf51b4d58d6c7f245

func NewCapHistoryService_capReadHistory_Params(s *capnp.Segment) (CapHistoryService_capReadHistory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capReadHistory_Params(st), err
}

func NewRootCapHistoryService_capReadHistory_Params(s *capnp.Segment) (CapHistoryService_capReadHistory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capReadHistory_Params(st), err
}

func ReadRootCapHistoryService_capReadHistory_Params(msg *capnp.Message) (CapHistoryService_capReadHistory_Params, error) {
	root, err := msg.Root()
	return CapHistoryService_capReadHistory_Params(root.Struct()), err
}

func (s CapHistoryService_capReadHistory_Params) String() string {
	str, _ := text.Marshal(0xf51b4d58d6c7f245, capnp.Struct(s))
	return str
}

func (s CapHistoryService_capReadHistory_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryService_capReadHistory_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryService_capReadHistory_Params {
	return CapHistoryService_capReadHistory_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryService_capReadHistory_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryService_capReadHistory_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryService_capReadHistory_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryService_capReadHistory_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryService_capReadHistory_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapHistoryService_capReadHistory_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryService_capReadHistory_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapHistoryService_capReadHistory_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapHistoryService_capReadHistory_Params_List is a list of CapHistoryService_capReadHistory_Params.
type CapHistoryService_capReadHistory_Params_List = capnp.StructList[CapHistoryService_capReadHistory_Params]

// NewCapHistoryService_capReadHistory_Params creates a new list of CapHistoryService_capReadHistory_Params.
func NewCapHistoryService_capReadHistory_Params_List(s *capnp.Segment, sz int32) (CapHistoryService_capReadHistory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryService_capReadHistory_Params](l), err
}

// CapHistoryService_capReadHistory_Params_Future is a wrapper for a CapHistoryService_capReadHistory_Params promised by a client call.
type CapHistoryService_capReadHistory_Params_Future struct{ *capnp.Future }

func (f CapHistoryService_capReadHistory_Params_Future) Struct() (CapHistoryService_capReadHistory_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryService_capReadHistory_Params(p.Struct()), err
}

type CapHistoryService_capReadHistory_Results capnp.Struct

// CapHistoryService_capReadHistory_Results_TypeID is the unique identifier for the type CapHistoryService_capReadHistory_Results.
const CapHistoryService_capReadHistory_Results_TypeID = 0x8a3402043f3ec9f0

func NewCapHistoryService_capReadHistory_Results(s *capnp.Segment) (CapHistoryService_capReadHistory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capReadHistory_Results(st), err
}

func NewRootCapHistoryService_capReadHistory_Results(s *capnp.Segment) (CapHistoryService_capReadHistory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryService_capReadHistory_Results(st), err
}

func ReadRootCapHistoryService_capReadHistory_Results(msg *capnp.Message) (CapHistoryService_capReadHistory_Results, error) {
	root, err := msg.Root()
	return CapHistoryService_capReadHistory_Results(root.Struct()), err
}

func (s CapHistoryService_capReadHistory_Results) String() string {
	str, _ := text.Marshal(0x8a3402043f3ec9f0, capnp.Struct(s))
	return str
}

func (s CapHistoryService_capReadHistory_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryService_capReadHistory_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryService_capReadHistory_Results {
	return CapHistoryService_capReadHistory_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryService_capReadHistory_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryService_capReadHistory_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryService_capReadHistory_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryService_capReadHistory_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryService_capReadHistory_Results) Cap() CapReadHistory {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapReadHistory(p.Interface().Client())
}

func (s CapHistoryService_capReadHistory_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryService_capReadHistory_Results) SetCap(v CapReadHistory) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapHistoryService_capReadHistory_Results_List is a list of CapHistoryService_capReadHistory_Results.
type CapHistoryService_capReadHistory_Results_List = capnp.StructList[CapHistoryService_capReadHistory_Results]

// NewCapHistoryService_capReadHistory_Results creates a new list of CapHistoryService_capReadHistory_Results.
func NewCapHistoryService_capReadHistory_Results_List(s *capnp.Segment, sz int32) (CapHistoryService_capReadHistory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryService_capReadHistory_Results](l), err
}

// CapHistoryService_capReadHistory_Results_Future is a wrapper for a CapHistoryService_capReadHistory_Results promised by a client call.
type CapHistoryService_capReadHistory_Results_Future struct{ *capnp.Future }

func (f CapHistoryService_capReadHistory_Results_Future) Struct() (CapHistoryService_capReadHistory_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryService_capReadHistory_Results(p.Struct()), err
}
func (p CapHistoryService_capReadHistory_Results_Future) Cap() CapReadHistory {
	return CapReadHistory(p.Future.Field(0, nil).Client())
}

type CapAddHistory capnp.Client

// CapAddHistory_TypeID is the unique identifier for the type CapAddHistory.
const CapAddHistory_TypeID = 0xaeedfb5c318d00ee

func (c CapAddHistory) AddAction(ctx context.Context, params func(CapAddHistory_addAction_Params) error) (CapAddHistory_addAction_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaeedfb5c318d00ee,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapAddHistory",
			MethodName:    "addAction",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapAddHistory_addAction_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapAddHistory_addAction_Results_Future{Future: ans.Future()}, release
}
func (c CapAddHistory) AddEvent(ctx context.Context, params func(CapAddHistory_addEvent_Params) error) (CapAddHistory_addEvent_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaeedfb5c318d00ee,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapAddHistory",
			MethodName:    "addEvent",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapAddHistory_addEvent_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapAddHistory_addEvent_Results_Future{Future: ans.Future()}, release
}
func (c CapAddHistory) AddEvents(ctx context.Context, params func(CapAddHistory_addEvents_Params) error) (CapAddHistory_addEvents_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaeedfb5c318d00ee,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapAddHistory",
			MethodName:    "addEvents",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapAddHistory_addEvents_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapAddHistory_addEvents_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapAddHistory) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapAddHistory) AddRef() CapAddHistory {
	return CapAddHistory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapAddHistory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapAddHistory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapAddHistory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapAddHistory) DecodeFromPtr(p capnp.Ptr) CapAddHistory {
	return CapAddHistory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapAddHistory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapAddHistory) IsSame(other CapAddHistory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapAddHistory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapAddHistory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapAddHistory_Server is a CapAddHistory with a local implementation.
type CapAddHistory_Server interface {
	AddAction(context.Context, CapAddHistory_addAction) error

	AddEvent(context.Context, CapAddHistory_addEvent) error

	AddEvents(context.Context, CapAddHistory_addEvents) error
}

// CapAddHistory_NewServer creates a new Server from an implementation of CapAddHistory_Server.
func CapAddHistory_NewServer(s CapAddHistory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapAddHistory_Methods(nil, s), s, c)
}

// CapAddHistory_ServerToClient creates a new Client from an implementation of CapAddHistory_Server.
// The caller is responsible for calling Release on the returned Client.
func CapAddHistory_ServerToClient(s CapAddHistory_Server) CapAddHistory {
	return CapAddHistory(capnp.NewClient(CapAddHistory_NewServer(s)))
}

// CapAddHistory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapAddHistory_Methods(methods []server.Method, s CapAddHistory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaeedfb5c318d00ee,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapAddHistory",
			MethodName:    "addAction",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddAction(ctx, CapAddHistory_addAction{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaeedfb5c318d00ee,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapAddHistory",
			MethodName:    "addEvent",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddEvent(ctx, CapAddHistory_addEvent{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaeedfb5c318d00ee,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapAddHistory",
			MethodName:    "addEvents",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddEvents(ctx, CapAddHistory_addEvents{call})
		},
	})

	return methods
}

// CapAddHistory_addAction holds the state for a server call to CapAddHistory.addAction.
// See server.Call for documentation.
type CapAddHistory_addAction struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapAddHistory_addAction) Args() CapAddHistory_addAction_Params {
	return CapAddHistory_addAction_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapAddHistory_addAction) AllocResults() (CapAddHistory_addAction_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addAction_Results(r), err
}

// CapAddHistory_addEvent holds the state for a server call to CapAddHistory.addEvent.
// See server.Call for documentation.
type CapAddHistory_addEvent struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapAddHistory_addEvent) Args() CapAddHistory_addEvent_Params {
	return CapAddHistory_addEvent_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapAddHistory_addEvent) AllocResults() (CapAddHistory_addEvent_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addEvent_Results(r), err
}

// CapAddHistory_addEvents holds the state for a server call to CapAddHistory.addEvents.
// See server.Call for documentation.
type CapAddHistory_addEvents struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapAddHistory_addEvents) Args() CapAddHistory_addEvents_Params {
	return CapAddHistory_addEvents_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapAddHistory_addEvents) AllocResults() (CapAddHistory_addEvents_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addEvents_Results(r), err
}

// CapAddHistory_List is a list of CapAddHistory.
type CapAddHistory_List = capnp.CapList[CapAddHistory]

// NewCapAddHistory creates a new list of CapAddHistory.
func NewCapAddHistory_List(s *capnp.Segment, sz int32) (CapAddHistory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapAddHistory](l), err
}

type CapAddHistory_addAction_Params capnp.Struct

// CapAddHistory_addAction_Params_TypeID is the unique identifier for the type CapAddHistory_addAction_Params.
const CapAddHistory_addAction_Params_TypeID = 0xf2d04e4d076109a1

func NewCapAddHistory_addAction_Params(s *capnp.Segment) (CapAddHistory_addAction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAddHistory_addAction_Params(st), err
}

func NewRootCapAddHistory_addAction_Params(s *capnp.Segment) (CapAddHistory_addAction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAddHistory_addAction_Params(st), err
}

func ReadRootCapAddHistory_addAction_Params(msg *capnp.Message) (CapAddHistory_addAction_Params, error) {
	root, err := msg.Root()
	return CapAddHistory_addAction_Params(root.Struct()), err
}

func (s CapAddHistory_addAction_Params) String() string {
	str, _ := text.Marshal(0xf2d04e4d076109a1, capnp.Struct(s))
	return str
}

func (s CapAddHistory_addAction_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAddHistory_addAction_Params) DecodeFromPtr(p capnp.Ptr) CapAddHistory_addAction_Params {
	return CapAddHistory_addAction_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAddHistory_addAction_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAddHistory_addAction_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAddHistory_addAction_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAddHistory_addAction_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapAddHistory_addAction_Params) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapAddHistory_addAction_Params) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapAddHistory_addAction_Params) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapAddHistory_addAction_Params) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapAddHistory_addAction_Params_List is a list of CapAddHistory_addAction_Params.
type CapAddHistory_addAction_Params_List = capnp.StructList[CapAddHistory_addAction_Params]

// NewCapAddHistory_addAction_Params creates a new list of CapAddHistory_addAction_Params.
func NewCapAddHistory_addAction_Params_List(s *capnp.Segment, sz int32) (CapAddHistory_addAction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapAddHistory_addAction_Params](l), err
}

// CapAddHistory_addAction_Params_Future is a wrapper for a CapAddHistory_addAction_Params promised by a client call.
type CapAddHistory_addAction_Params_Future struct{ *capnp.Future }

func (f CapAddHistory_addAction_Params_Future) Struct() (CapAddHistory_addAction_Params, error) {
	p, err := f.Future.Ptr()
	return CapAddHistory_addAction_Params(p.Struct()), err
}
func (p CapAddHistory_addAction_Params_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapAddHistory_addAction_Results capnp.Struct

// CapAddHistory_addAction_Results_TypeID is the unique identifier for the type CapAddHistory_addAction_Results.
const CapAddHistory_addAction_Results_TypeID = 0xaa066f541f1a116a

func NewCapAddHistory_addAction_Results(s *capnp.Segment) (CapAddHistory_addAction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addAction_Results(st), err
}

func NewRootCapAddHistory_addAction_Results(s *capnp.Segment) (CapAddHistory_addAction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addAction_Results(st), err
}

func ReadRootCapAddHistory_addAction_Results(msg *capnp.Message) (CapAddHistory_addAction_Results, error) {
	root, err := msg.Root()
	return CapAddHistory_addAction_Results(root.Struct()), err
}

func (s CapAddHistory_addAction_Results) String() string {
	str, _ := text.Marshal(0xaa066f541f1a116a, capnp.Struct(s))
	return str
}

func (s CapAddHistory_addAction_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAddHistory_addAction_Results) DecodeFromPtr(p capnp.Ptr) CapAddHistory_addAction_Results {
	return CapAddHistory_addAction_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAddHistory_addAction_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAddHistory_addAction_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAddHistory_addAction_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAddHistory_addAction_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapAddHistory_addAction_Results_List is a list of CapAddHistory_addAction_Results.
type CapAddHistory_addAction_Results_List = capnp.StructList[CapAddHistory_addAction_Results]

// NewCapAddHistory_addAction_Results creates a new list of CapAddHistory_addAction_Results.
func NewCapAddHistory_addAction_Results_List(s *capnp.Segment, sz int32) (CapAddHistory_addAction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapAddHistory_addAction_Results](l), err
}

// CapAddHistory_addAction_Results_Future is a wrapper for a CapAddHistory_addAction_Results promised by a client call.
type CapAddHistory_addAction_Results_Future struct{ *capnp.Future }

func (f CapAddHistory_addAction_Results_Future) Struct() (CapAddHistory_addAction_Results, error) {
	p, err := f.Future.Ptr()
	return CapAddHistory_addAction_Results(p.Struct()), err
}

type CapAddHistory_addEvent_Params capnp.Struct

// CapAddHistory_addEvent_Params_TypeID is the unique identifier for the type CapAddHistory_addEvent_Params.
const CapAddHistory_addEvent_Params_TypeID = 0xd3899668953eaf95

func NewCapAddHistory_addEvent_Params(s *capnp.Segment) (CapAddHistory_addEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAddHistory_addEvent_Params(st), err
}

func NewRootCapAddHistory_addEvent_Params(s *capnp.Segment) (CapAddHistory_addEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAddHistory_addEvent_Params(st), err
}

func ReadRootCapAddHistory_addEvent_Params(msg *capnp.Message) (CapAddHistory_addEvent_Params, error) {
	root, err := msg.Root()
	return CapAddHistory_addEvent_Params(root.Struct()), err
}

func (s CapAddHistory_addEvent_Params) String() string {
	str, _ := text.Marshal(0xd3899668953eaf95, capnp.Struct(s))
	return str
}

func (s CapAddHistory_addEvent_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAddHistory_addEvent_Params) DecodeFromPtr(p capnp.Ptr) CapAddHistory_addEvent_Params {
	return CapAddHistory_addEvent_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAddHistory_addEvent_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAddHistory_addEvent_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAddHistory_addEvent_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAddHistory_addEvent_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapAddHistory_addEvent_Params) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapAddHistory_addEvent_Params) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapAddHistory_addEvent_Params) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapAddHistory_addEvent_Params) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapAddHistory_addEvent_Params_List is a list of CapAddHistory_addEvent_Params.
type CapAddHistory_addEvent_Params_List = capnp.StructList[CapAddHistory_addEvent_Params]

// NewCapAddHistory_addEvent_Params creates a new list of CapAddHistory_addEvent_Params.
func NewCapAddHistory_addEvent_Params_List(s *capnp.Segment, sz int32) (CapAddHistory_addEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapAddHistory_addEvent_Params](l), err
}

// CapAddHistory_addEvent_Params_Future is a wrapper for a CapAddHistory_addEvent_Params promised by a client call.
type CapAddHistory_addEvent_Params_Future struct{ *capnp.Future }

func (f CapAddHistory_addEvent_Params_Future) Struct() (CapAddHistory_addEvent_Params, error) {
	p, err := f.Future.Ptr()
	return CapAddHistory_addEvent_Params(p.Struct()), err
}
func (p CapAddHistory_addEvent_Params_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapAddHistory_addEvent_Results capnp.Struct

// CapAddHistory_addEvent_Results_TypeID is the unique identifier for the type CapAddHistory_addEvent_Results.
const CapAddHistory_addEvent_Results_TypeID = 0x9c3ac18a6f855cd2

func NewCapAddHistory_addEvent_Results(s *capnp.Segment) (CapAddHistory_addEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addEvent_Results(st), err
}

func NewRootCapAddHistory_addEvent_Results(s *capnp.Segment) (CapAddHistory_addEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addEvent_Results(st), err
}

func ReadRootCapAddHistory_addEvent_Results(msg *capnp.Message) (CapAddHistory_addEvent_Results, error) {
	root, err := msg.Root()
	return CapAddHistory_addEvent_Results(root.Struct()), err
}

func (s CapAddHistory_addEvent_Results) String() string {
	str, _ := text.Marshal(0x9c3ac18a6f855cd2, capnp.Struct(s))
	return str
}

func (s CapAddHistory_addEvent_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAddHistory_addEvent_Results) DecodeFromPtr(p capnp.Ptr) CapAddHistory_addEvent_Results {
	return CapAddHistory_addEvent_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAddHistory_addEvent_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAddHistory_addEvent_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAddHistory_addEvent_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAddHistory_addEvent_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapAddHistory_addEvent_Results_List is a list of CapAddHistory_addEvent_Results.
type CapAddHistory_addEvent_Results_List = capnp.StructList[CapAddHistory_addEvent_Results]

// NewCapAddHistory_addEvent_Results creates a new list of CapAddHistory_addEvent_Results.
func NewCapAddHistory_addEvent_Results_List(s *capnp.Segment, sz int32) (CapAddHistory_addEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapAddHistory_addEvent_Results](l), err
}

// CapAddHistory_addEvent_Results_Future is a wrapper for a CapAddHistory_addEvent_Results promised by a client call.
type CapAddHistory_addEvent_Results_Future struct{ *capnp.Future }

func (f CapAddHistory_addEvent_Results_Future) Struct() (CapAddHistory_addEvent_Results, error) {
	p, err := f.Future.Ptr()
	return CapAddHistory_addEvent_Results(p.Struct()), err
}

type CapAddHistory_addEvents_Params capnp.Struct

// CapAddHistory_addEvents_Params_TypeID is the unique identifier for the type CapAddHistory_addEvents_Params.
const CapAddHistory_addEvents_Params_TypeID = 0xb3a20cba1aabab09

func NewCapAddHistory_addEvents_Params(s *capnp.Segment) (CapAddHistory_addEvents_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAddHistory_addEvents_Params(st), err
}

func NewRootCapAddHistory_addEvents_Params(s *capnp.Segment) (CapAddHistory_addEvents_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapAddHistory_addEvents_Params(st), err
}

func ReadRootCapAddHistory_addEvents_Params(msg *capnp.Message) (CapAddHistory_addEvents_Params, error) {
	root, err := msg.Root()
	return CapAddHistory_addEvents_Params(root.Struct()), err
}

func (s CapAddHistory_addEvents_Params) String() string {
	str, _ := text.Marshal(0xb3a20cba1aabab09, capnp.Struct(s))
	return str
}

func (s CapAddHistory_addEvents_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAddHistory_addEvents_Params) DecodeFromPtr(p capnp.Ptr) CapAddHistory_addEvents_Params {
	return CapAddHistory_addEvents_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAddHistory_addEvents_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAddHistory_addEvents_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAddHistory_addEvents_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAddHistory_addEvents_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapAddHistory_addEvents_Params) Tv() (ThingValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue_List(p.List()), err
}

func (s CapAddHistory_addEvents_Params) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapAddHistory_addEvents_Params) SetTv(v ThingValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue_List, preferring placement in s's segment.
func (s CapAddHistory_addEvents_Params) NewTv(n int32) (ThingValue_List, error) {
	l, err := NewThingValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ThingValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapAddHistory_addEvents_Params_List is a list of CapAddHistory_addEvents_Params.
type CapAddHistory_addEvents_Params_List = capnp.StructList[CapAddHistory_addEvents_Params]

// NewCapAddHistory_addEvents_Params creates a new list of CapAddHistory_addEvents_Params.
func NewCapAddHistory_addEvents_Params_List(s *capnp.Segment, sz int32) (CapAddHistory_addEvents_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapAddHistory_addEvents_Params](l), err
}

// CapAddHistory_addEvents_Params_Future is a wrapper for a CapAddHistory_addEvents_Params promised by a client call.
type CapAddHistory_addEvents_Params_Future struct{ *capnp.Future }

func (f CapAddHistory_addEvents_Params_Future) Struct() (CapAddHistory_addEvents_Params, error) {
	p, err := f.Future.Ptr()
	return CapAddHistory_addEvents_Params(p.Struct()), err
}

type CapAddHistory_addEvents_Results capnp.Struct

// CapAddHistory_addEvents_Results_TypeID is the unique identifier for the type CapAddHistory_addEvents_Results.
const CapAddHistory_addEvents_Results_TypeID = 0x95158665d71f5337

func NewCapAddHistory_addEvents_Results(s *capnp.Segment) (CapAddHistory_addEvents_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addEvents_Results(st), err
}

func NewRootCapAddHistory_addEvents_Results(s *capnp.Segment) (CapAddHistory_addEvents_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapAddHistory_addEvents_Results(st), err
}

func ReadRootCapAddHistory_addEvents_Results(msg *capnp.Message) (CapAddHistory_addEvents_Results, error) {
	root, err := msg.Root()
	return CapAddHistory_addEvents_Results(root.Struct()), err
}

func (s CapAddHistory_addEvents_Results) String() string {
	str, _ := text.Marshal(0x95158665d71f5337, capnp.Struct(s))
	return str
}

func (s CapAddHistory_addEvents_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapAddHistory_addEvents_Results) DecodeFromPtr(p capnp.Ptr) CapAddHistory_addEvents_Results {
	return CapAddHistory_addEvents_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapAddHistory_addEvents_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapAddHistory_addEvents_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapAddHistory_addEvents_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapAddHistory_addEvents_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapAddHistory_addEvents_Results_List is a list of CapAddHistory_addEvents_Results.
type CapAddHistory_addEvents_Results_List = capnp.StructList[CapAddHistory_addEvents_Results]

// NewCapAddHistory_addEvents_Results creates a new list of CapAddHistory_addEvents_Results.
func NewCapAddHistory_addEvents_Results_List(s *capnp.Segment, sz int32) (CapAddHistory_addEvents_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapAddHistory_addEvents_Results](l), err
}

// CapAddHistory_addEvents_Results_Future is a wrapper for a CapAddHistory_addEvents_Results promised by a client call.
type CapAddHistory_addEvents_Results_Future struct{ *capnp.Future }

func (f CapAddHistory_addEvents_Results_Future) Struct() (CapAddHistory_addEvents_Results, error) {
	p, err := f.Future.Ptr()
	return CapAddHistory_addEvents_Results(p.Struct()), err
}

type CapManageRetention capnp.Client

// CapManageRetention_TypeID is the unique identifier for the type CapManageRetention.
const CapManageRetention_TypeID = 0xf2086587739b71d1

func (c CapManageRetention) GetEvents(ctx context.Context, params func(CapManageRetention_getEvents_Params) error) (CapManageRetention_getEvents_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "getEvents",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageRetention_getEvents_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageRetention_getEvents_Results_Future{Future: ans.Future()}, release
}
func (c CapManageRetention) GetEventRetention(ctx context.Context, params func(CapManageRetention_getEventRetention_Params) error) (CapManageRetention_getEventRetention_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "getEventRetention",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageRetention_getEventRetention_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageRetention_getEventRetention_Results_Future{Future: ans.Future()}, release
}
func (c CapManageRetention) RemoveEventRetention(ctx context.Context, params func(CapManageRetention_removeEventRetention_Params) error) (CapManageRetention_removeEventRetention_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "removeEventRetention",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageRetention_removeEventRetention_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageRetention_removeEventRetention_Results_Future{Future: ans.Future()}, release
}
func (c CapManageRetention) SetEventRetention(ctx context.Context, params func(CapManageRetention_setEventRetention_Params) error) (CapManageRetention_setEventRetention_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      3,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "setEventRetention",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageRetention_setEventRetention_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageRetention_setEventRetention_Results_Future{Future: ans.Future()}, release
}
func (c CapManageRetention) TestEvent(ctx context.Context, params func(CapManageRetention_testEvent_Params) error) (CapManageRetention_testEvent_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      4,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "testEvent",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageRetention_testEvent_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageRetention_testEvent_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapManageRetention) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapManageRetention) AddRef() CapManageRetention {
	return CapManageRetention(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapManageRetention) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapManageRetention) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapManageRetention) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapManageRetention) DecodeFromPtr(p capnp.Ptr) CapManageRetention {
	return CapManageRetention(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapManageRetention) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapManageRetention) IsSame(other CapManageRetention) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapManageRetention) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapManageRetention) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapManageRetention_Server is a CapManageRetention with a local implementation.
type CapManageRetention_Server interface {
	GetEvents(context.Context, CapManageRetention_getEvents) error

	GetEventRetention(context.Context, CapManageRetention_getEventRetention) error

	RemoveEventRetention(context.Context, CapManageRetention_removeEventRetention) error

	SetEventRetention(context.Context, CapManageRetention_setEventRetention) error

	TestEvent(context.Context, CapManageRetention_testEvent) error
}

// CapManageRetention_NewServer creates a new Server from an implementation of CapManageRetention_Server.
func CapManageRetention_NewServer(s CapManageRetention_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapManageRetention_Methods(nil, s), s, c)
}

// CapManageRetention_ServerToClient creates a new Client from an implementation of CapManageRetention_Server.
// The caller is responsible for calling Release on the returned Client.
func CapManageRetention_ServerToClient(s CapManageRetention_Server) CapManageRetention {
	return CapManageRetention(capnp.NewClient(CapManageRetention_NewServer(s)))
}

// CapManageRetention_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapManageRetention_Methods(methods []server.Method, s CapManageRetention_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "getEvents",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetEvents(ctx, CapManageRetention_getEvents{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "getEventRetention",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetEventRetention(ctx, CapManageRetention_getEventRetention{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "removeEventRetention",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveEventRetention(ctx, CapManageRetention_removeEventRetention{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      3,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "setEventRetention",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetEventRetention(ctx, CapManageRetention_setEventRetention{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf2086587739b71d1,
			MethodID:      4,
			InterfaceName: "hubapi/History.capnp:CapManageRetention",
			MethodName:    "testEvent",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.TestEvent(ctx, CapManageRetention_testEvent{call})
		},
	})

	return methods
}

// CapManageRetention_getEvents holds the state for a server call to CapManageRetention.getEvents.
// See server.Call for documentation.
type CapManageRetention_getEvents struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageRetention_getEvents) Args() CapManageRetention_getEvents_Params {
	return CapManageRetention_getEvents_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageRetention_getEvents) AllocResults() (CapManageRetention_getEvents_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_getEvents_Results(r), err
}

// CapManageRetention_getEventRetention holds the state for a server call to CapManageRetention.getEventRetention.
// See server.Call for documentation.
type CapManageRetention_getEventRetention struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageRetention_getEventRetention) Args() CapManageRetention_getEventRetention_Params {
	return CapManageRetention_getEventRetention_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageRetention_getEventRetention) AllocResults() (CapManageRetention_getEventRetention_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_getEventRetention_Results(r), err
}

// CapManageRetention_removeEventRetention holds the state for a server call to CapManageRetention.removeEventRetention.
// See server.Call for documentation.
type CapManageRetention_removeEventRetention struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageRetention_removeEventRetention) Args() CapManageRetention_removeEventRetention_Params {
	return CapManageRetention_removeEventRetention_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageRetention_removeEventRetention) AllocResults() (CapManageRetention_removeEventRetention_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageRetention_removeEventRetention_Results(r), err
}

// CapManageRetention_setEventRetention holds the state for a server call to CapManageRetention.setEventRetention.
// See server.Call for documentation.
type CapManageRetention_setEventRetention struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageRetention_setEventRetention) Args() CapManageRetention_setEventRetention_Params {
	return CapManageRetention_setEventRetention_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageRetention_setEventRetention) AllocResults() (CapManageRetention_setEventRetention_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageRetention_setEventRetention_Results(r), err
}

// CapManageRetention_testEvent holds the state for a server call to CapManageRetention.testEvent.
// See server.Call for documentation.
type CapManageRetention_testEvent struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageRetention_testEvent) Args() CapManageRetention_testEvent_Params {
	return CapManageRetention_testEvent_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageRetention_testEvent) AllocResults() (CapManageRetention_testEvent_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapManageRetention_testEvent_Results(r), err
}

// CapManageRetention_List is a list of CapManageRetention.
type CapManageRetention_List = capnp.CapList[CapManageRetention]

// NewCapManageRetention creates a new list of CapManageRetention.
func NewCapManageRetention_List(s *capnp.Segment, sz int32) (CapManageRetention_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapManageRetention](l), err
}

type CapManageRetention_getEvents_Params capnp.Struct

// CapManageRetention_getEvents_Params_TypeID is the unique identifier for the type CapManageRetention_getEvents_Params.
const CapManageRetention_getEvents_Params_TypeID = 0x94f59b819a6e7ce3

func NewCapManageRetention_getEvents_Params(s *capnp.Segment) (CapManageRetention_getEvents_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageRetention_getEvents_Params(st), err
}

func NewRootCapManageRetention_getEvents_Params(s *capnp.Segment) (CapManageRetention_getEvents_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageRetention_getEvents_Params(st), err
}

func ReadRootCapManageRetention_getEvents_Params(msg *capnp.Message) (CapManageRetention_getEvents_Params, error) {
	root, err := msg.Root()
	return CapManageRetention_getEvents_Params(root.Struct()), err
}

func (s CapManageRetention_getEvents_Params) String() string {
	str, _ := text.Marshal(0x94f59b819a6e7ce3, capnp.Struct(s))
	return str
}

func (s CapManageRetention_getEvents_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_getEvents_Params) DecodeFromPtr(p capnp.Ptr) CapManageRetention_getEvents_Params {
	return CapManageRetention_getEvents_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_getEvents_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_getEvents_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_getEvents_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_getEvents_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapManageRetention_getEvents_Params_List is a list of CapManageRetention_getEvents_Params.
type CapManageRetention_getEvents_Params_List = capnp.StructList[CapManageRetention_getEvents_Params]

// NewCapManageRetention_getEvents_Params creates a new list of CapManageRetention_getEvents_Params.
func NewCapManageRetention_getEvents_Params_List(s *capnp.Segment, sz int32) (CapManageRetention_getEvents_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapManageRetention_getEvents_Params](l), err
}

// CapManageRetention_getEvents_Params_Future is a wrapper for a CapManageRetention_getEvents_Params promised by a client call.
type CapManageRetention_getEvents_Params_Future struct{ *capnp.Future }

func (f CapManageRetention_getEvents_Params_Future) Struct() (CapManageRetention_getEvents_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_getEvents_Params(p.Struct()), err
}

type CapManageRetention_getEvents_Results capnp.Struct

// CapManageRetention_getEvents_Results_TypeID is the unique identifier for the type CapManageRetention_getEvents_Results.
const CapManageRetention_getEvents_Results_TypeID = 0xeade1fba66bf829a

func NewCapManageRetention_getEvents_Results(s *capnp.Segment) (CapManageRetention_getEvents_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_getEvents_Results(st), err
}

func NewRootCapManageRetention_getEvents_Results(s *capnp.Segment) (CapManageRetention_getEvents_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_getEvents_Results(st), err
}

func ReadRootCapManageRetention_getEvents_Results(msg *capnp.Message) (CapManageRetention_getEvents_Results, error) {
	root, err := msg.Root()
	return CapManageRetention_getEvents_Results(root.Struct()), err
}

func (s CapManageRetention_getEvents_Results) String() string {
	str, _ := text.Marshal(0xeade1fba66bf829a, capnp.Struct(s))
	return str
}

func (s CapManageRetention_getEvents_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_getEvents_Results) DecodeFromPtr(p capnp.Ptr) CapManageRetention_getEvents_Results {
	return CapManageRetention_getEvents_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_getEvents_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_getEvents_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_getEvents_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_getEvents_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageRetention_getEvents_Results) RetList() (EventRetention_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return EventRetention_List(p.List()), err
}

func (s CapManageRetention_getEvents_Results) HasRetList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageRetention_getEvents_Results) SetRetList(v EventRetention_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewRetList sets the retList field to a newly
// allocated EventRetention_List, preferring placement in s's segment.
func (s CapManageRetention_getEvents_Results) NewRetList(n int32) (EventRetention_List, error) {
	l, err := NewEventRetention_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return EventRetention_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapManageRetention_getEvents_Results_List is a list of CapManageRetention_getEvents_Results.
type CapManageRetention_getEvents_Results_List = capnp.StructList[CapManageRetention_getEvents_Results]

// NewCapManageRetention_getEvents_Results creates a new list of CapManageRetention_getEvents_Results.
func NewCapManageRetention_getEvents_Results_List(s *capnp.Segment, sz int32) (CapManageRetention_getEvents_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageRetention_getEvents_Results](l), err
}

// CapManageRetention_getEvents_Results_Future is a wrapper for a CapManageRetention_getEvents_Results promised by a client call.
type CapManageRetention_getEvents_Results_Future struct{ *capnp.Future }

func (f CapManageRetention_getEvents_Results_Future) Struct() (CapManageRetention_getEvents_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_getEvents_Results(p.Struct()), err
}

type CapManageRetention_getEventRetention_Params capnp.Struct

// CapManageRetention_getEventRetention_Params_TypeID is the unique identifier for the type CapManageRetention_getEventRetention_Params.
const CapManageRetention_getEventRetention_Params_TypeID = 0xd04e1143cc533067

func NewCapManageRetention_getEventRetention_Params(s *capnp.Segment) (CapManageRetention_getEventRetention_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_getEventRetention_Params(st), err
}

func NewRootCapManageRetention_getEventRetention_Params(s *capnp.Segment) (CapManageRetention_getEventRetention_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_getEventRetention_Params(st), err
}

func ReadRootCapManageRetention_getEventRetention_Params(msg *capnp.Message) (CapManageRetention_getEventRetention_Params, error) {
	root, err := msg.Root()
	return CapManageRetention_getEventRetention_Params(root.Struct()), err
}

func (s CapManageRetention_getEventRetention_Params) String() string {
	str, _ := text.Marshal(0xd04e1143cc533067, capnp.Struct(s))
	return str
}

func (s CapManageRetention_getEventRetention_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_getEventRetention_Params) DecodeFromPtr(p capnp.Ptr) CapManageRetention_getEventRetention_Params {
	return CapManageRetention_getEventRetention_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_getEventRetention_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_getEventRetention_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_getEventRetention_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_getEventRetention_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageRetention_getEventRetention_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapManageRetention_getEventRetention_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageRetention_getEventRetention_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapManageRetention_getEventRetention_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapManageRetention_getEventRetention_Params_List is a list of CapManageRetention_getEventRetention_Params.
type CapManageRetention_getEventRetention_Params_List = capnp.StructList[CapManageRetention_getEventRetention_Params]

// NewCapManageRetention_getEventRetention_Params creates a new list of CapManageRetention_getEventRetention_Params.
func NewCapManageRetention_getEventRetention_Params_List(s *capnp.Segment, sz int32) (CapManageRetention_getEventRetention_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageRetention_getEventRetention_Params](l), err
}

// CapManageRetention_getEventRetention_Params_Future is a wrapper for a CapManageRetention_getEventRetention_Params promised by a client call.
type CapManageRetention_getEventRetention_Params_Future struct{ *capnp.Future }

func (f CapManageRetention_getEventRetention_Params_Future) Struct() (CapManageRetention_getEventRetention_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_getEventRetention_Params(p.Struct()), err
}

type CapManageRetention_getEventRetention_Results capnp.Struct

// CapManageRetention_getEventRetention_Results_TypeID is the unique identifier for the type CapManageRetention_getEventRetention_Results.
const CapManageRetention_getEventRetention_Results_TypeID = 0xd2778faa7ff8eb3f

func NewCapManageRetention_getEventRetention_Results(s *capnp.Segment) (CapManageRetention_getEventRetention_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_getEventRetention_Results(st), err
}

func NewRootCapManageRetention_getEventRetention_Results(s *capnp.Segment) (CapManageRetention_getEventRetention_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_getEventRetention_Results(st), err
}

func ReadRootCapManageRetention_getEventRetention_Results(msg *capnp.Message) (CapManageRetention_getEventRetention_Results, error) {
	root, err := msg.Root()
	return CapManageRetention_getEventRetention_Results(root.Struct()), err
}

func (s CapManageRetention_getEventRetention_Results) String() string {
	str, _ := text.Marshal(0xd2778faa7ff8eb3f, capnp.Struct(s))
	return str
}

func (s CapManageRetention_getEventRetention_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_getEventRetention_Results) DecodeFromPtr(p capnp.Ptr) CapManageRetention_getEventRetention_Results {
	return CapManageRetention_getEventRetention_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_getEventRetention_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_getEventRetention_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_getEventRetention_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_getEventRetention_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageRetention_getEventRetention_Results) Ret() (EventRetention, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return EventRetention(p.Struct()), err
}

func (s CapManageRetention_getEventRetention_Results) HasRet() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageRetention_getEventRetention_Results) SetRet(v EventRetention) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRet sets the ret field to a newly
// allocated EventRetention struct, preferring placement in s's segment.
func (s CapManageRetention_getEventRetention_Results) NewRet() (EventRetention, error) {
	ss, err := NewEventRetention(capnp.Struct(s).Segment())
	if err != nil {
		return EventRetention{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapManageRetention_getEventRetention_Results_List is a list of CapManageRetention_getEventRetention_Results.
type CapManageRetention_getEventRetention_Results_List = capnp.StructList[CapManageRetention_getEventRetention_Results]

// NewCapManageRetention_getEventRetention_Results creates a new list of CapManageRetention_getEventRetention_Results.
func NewCapManageRetention_getEventRetention_Results_List(s *capnp.Segment, sz int32) (CapManageRetention_getEventRetention_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageRetention_getEventRetention_Results](l), err
}

// CapManageRetention_getEventRetention_Results_Future is a wrapper for a CapManageRetention_getEventRetention_Results promised by a client call.
type CapManageRetention_getEventRetention_Results_Future struct{ *capnp.Future }

func (f CapManageRetention_getEventRetention_Results_Future) Struct() (CapManageRetention_getEventRetention_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_getEventRetention_Results(p.Struct()), err
}
func (p CapManageRetention_getEventRetention_Results_Future) Ret() EventRetention_Future {
	return EventRetention_Future{Future: p.Future.Field(0, nil)}
}

type CapManageRetention_removeEventRetention_Params capnp.Struct

// CapManageRetention_removeEventRetention_Params_TypeID is the unique identifier for the type CapManageRetention_removeEventRetention_Params.
const CapManageRetention_removeEventRetention_Params_TypeID = 0xcf60bbf7431096a0

func NewCapManageRetention_removeEventRetention_Params(s *capnp.Segment) (CapManageRetention_removeEventRetention_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_removeEventRetention_Params(st), err
}

func NewRootCapManageRetention_removeEventRetention_Params(s *capnp.Segment) (CapManageRetention_removeEventRetention_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_removeEventRetention_Params(st), err
}

func ReadRootCapManageRetention_removeEventRetention_Params(msg *capnp.Message) (CapManageRetention_removeEventRetention_Params, error) {
	root, err := msg.Root()
	return CapManageRetention_removeEventRetention_Params(root.Struct()), err
}

func (s CapManageRetention_removeEventRetention_Params) String() string {
	str, _ := text.Marshal(0xcf60bbf7431096a0, capnp.Struct(s))
	return str
}

func (s CapManageRetention_removeEventRetention_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_removeEventRetention_Params) DecodeFromPtr(p capnp.Ptr) CapManageRetention_removeEventRetention_Params {
	return CapManageRetention_removeEventRetention_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_removeEventRetention_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_removeEventRetention_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_removeEventRetention_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_removeEventRetention_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageRetention_removeEventRetention_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapManageRetention_removeEventRetention_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageRetention_removeEventRetention_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapManageRetention_removeEventRetention_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapManageRetention_removeEventRetention_Params_List is a list of CapManageRetention_removeEventRetention_Params.
type CapManageRetention_removeEventRetention_Params_List = capnp.StructList[CapManageRetention_removeEventRetention_Params]

// NewCapManageRetention_removeEventRetention_Params creates a new list of CapManageRetention_removeEventRetention_Params.
func NewCapManageRetention_removeEventRetention_Params_List(s *capnp.Segment, sz int32) (CapManageRetention_removeEventRetention_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageRetention_removeEventRetention_Params](l), err
}

// CapManageRetention_removeEventRetention_Params_Future is a wrapper for a CapManageRetention_removeEventRetention_Params promised by a client call.
type CapManageRetention_removeEventRetention_Params_Future struct{ *capnp.Future }

func (f CapManageRetention_removeEventRetention_Params_Future) Struct() (CapManageRetention_removeEventRetention_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_removeEventRetention_Params(p.Struct()), err
}

type CapManageRetention_removeEventRetention_Results capnp.Struct

// CapManageRetention_removeEventRetention_Results_TypeID is the unique identifier for the type CapManageRetention_removeEventRetention_Results.
const CapManageRetention_removeEventRetention_Results_TypeID = 0xbaf76beaa0eaef07

func NewCapManageRetention_removeEventRetention_Results(s *capnp.Segment) (CapManageRetention_removeEventRetention_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageRetention_removeEventRetention_Results(st), err
}

func NewRootCapManageRetention_removeEventRetention_Results(s *capnp.Segment) (CapManageRetention_removeEventRetention_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageRetention_removeEventRetention_Results(st), err
}

func ReadRootCapManageRetention_removeEventRetention_Results(msg *capnp.Message) (CapManageRetention_removeEventRetention_Results, error) {
	root, err := msg.Root()
	return CapManageRetention_removeEventRetention_Results(root.Struct()), err
}

func (s CapManageRetention_removeEventRetention_Results) String() string {
	str, _ := text.Marshal(0xbaf76beaa0eaef07, capnp.Struct(s))
	return str
}

func (s CapManageRetention_removeEventRetention_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_removeEventRetention_Results) DecodeFromPtr(p capnp.Ptr) CapManageRetention_removeEventRetention_Results {
	return CapManageRetention_removeEventRetention_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_removeEventRetention_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_removeEventRetention_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_removeEventRetention_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_removeEventRetention_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapManageRetention_removeEventRetention_Results_List is a list of CapManageRetention_removeEventRetention_Results.
type CapManageRetention_removeEventRetention_Results_List = capnp.StructList[CapManageRetention_removeEventRetention_Results]

// NewCapManageRetention_removeEventRetention_Results creates a new list of CapManageRetention_removeEventRetention_Results.
func NewCapManageRetention_removeEventRetention_Results_List(s *capnp.Segment, sz int32) (CapManageRetention_removeEventRetention_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapManageRetention_removeEventRetention_Results](l), err
}

// CapManageRetention_removeEventRetention_Results_Future is a wrapper for a CapManageRetention_removeEventRetention_Results promised by a client call.
type CapManageRetention_removeEventRetention_Results_Future struct{ *capnp.Future }

func (f CapManageRetention_removeEventRetention_Results_Future) Struct() (CapManageRetention_removeEventRetention_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_removeEventRetention_Results(p.Struct()), err
}

type CapManageRetention_setEventRetention_Params capnp.Struct

// CapManageRetention_setEventRetention_Params_TypeID is the unique identifier for the type CapManageRetention_setEventRetention_Params.
const CapManageRetention_setEventRetention_Params_TypeID = 0xf1a3ef65a8704f35

func NewCapManageRetention_setEventRetention_Params(s *capnp.Segment) (CapManageRetention_setEventRetention_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_setEventRetention_Params(st), err
}

func NewRootCapManageRetention_setEventRetention_Params(s *capnp.Segment) (CapManageRetention_setEventRetention_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_setEventRetention_Params(st), err
}

func ReadRootCapManageRetention_setEventRetention_Params(msg *capnp.Message) (CapManageRetention_setEventRetention_Params, error) {
	root, err := msg.Root()
	return CapManageRetention_setEventRetention_Params(root.Struct()), err
}

func (s CapManageRetention_setEventRetention_Params) String() string {
	str, _ := text.Marshal(0xf1a3ef65a8704f35, capnp.Struct(s))
	return str
}

func (s CapManageRetention_setEventRetention_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_setEventRetention_Params) DecodeFromPtr(p capnp.Ptr) CapManageRetention_setEventRetention_Params {
	return CapManageRetention_setEventRetention_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_setEventRetention_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_setEventRetention_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_setEventRetention_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_setEventRetention_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageRetention_setEventRetention_Params) Ret() (EventRetention, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return EventRetention(p.Struct()), err
}

func (s CapManageRetention_setEventRetention_Params) HasRet() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageRetention_setEventRetention_Params) SetRet(v EventRetention) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRet sets the ret field to a newly
// allocated EventRetention struct, preferring placement in s's segment.
func (s CapManageRetention_setEventRetention_Params) NewRet() (EventRetention, error) {
	ss, err := NewEventRetention(capnp.Struct(s).Segment())
	if err != nil {
		return EventRetention{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapManageRetention_setEventRetention_Params_List is a list of CapManageRetention_setEventRetention_Params.
type CapManageRetention_setEventRetention_Params_List = capnp.StructList[CapManageRetention_setEventRetention_Params]

// NewCapManageRetention_setEventRetention_Params creates a new list of CapManageRetention_setEventRetention_Params.
func NewCapManageRetention_setEventRetention_Params_List(s *capnp.Segment, sz int32) (CapManageRetention_setEventRetention_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageRetention_setEventRetention_Params](l), err
}

// CapManageRetention_setEventRetention_Params_Future is a wrapper for a CapManageRetention_setEventRetention_Params promised by a client call.
type CapManageRetention_setEventRetention_Params_Future struct{ *capnp.Future }

func (f CapManageRetention_setEventRetention_Params_Future) Struct() (CapManageRetention_setEventRetention_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_setEventRetention_Params(p.Struct()), err
}
func (p CapManageRetention_setEventRetention_Params_Future) Ret() EventRetention_Future {
	return EventRetention_Future{Future: p.Future.Field(0, nil)}
}

type CapManageRetention_setEventRetention_Results capnp.Struct

// CapManageRetention_setEventRetention_Results_TypeID is the unique identifier for the type CapManageRetention_setEventRetention_Results.
const CapManageRetention_setEventRetention_Results_TypeID = 0xf9e91c3361bc207d

func NewCapManageRetention_setEventRetention_Results(s *capnp.Segment) (CapManageRetention_setEventRetention_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageRetention_setEventRetention_Results(st), err
}

func NewRootCapManageRetention_setEventRetention_Results(s *capnp.Segment) (CapManageRetention_setEventRetention_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageRetention_setEventRetention_Results(st), err
}

func ReadRootCapManageRetention_setEventRetention_Results(msg *capnp.Message) (CapManageRetention_setEventRetention_Results, error) {
	root, err := msg.Root()
	return CapManageRetention_setEventRetention_Results(root.Struct()), err
}

func (s CapManageRetention_setEventRetention_Results) String() string {
	str, _ := text.Marshal(0xf9e91c3361bc207d, capnp.Struct(s))
	return str
}

func (s CapManageRetention_setEventRetention_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_setEventRetention_Results) DecodeFromPtr(p capnp.Ptr) CapManageRetention_setEventRetention_Results {
	return CapManageRetention_setEventRetention_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_setEventRetention_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_setEventRetention_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_setEventRetention_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_setEventRetention_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapManageRetention_setEventRetention_Results_List is a list of CapManageRetention_setEventRetention_Results.
type CapManageRetention_setEventRetention_Results_List = capnp.StructList[CapManageRetention_setEventRetention_Results]

// NewCapManageRetention_setEventRetention_Results creates a new list of CapManageRetention_setEventRetention_Results.
func NewCapManageRetention_setEventRetention_Results_List(s *capnp.Segment, sz int32) (CapManageRetention_setEventRetention_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapManageRetention_setEventRetention_Results](l), err
}

// CapManageRetention_setEventRetention_Results_Future is a wrapper for a CapManageRetention_setEventRetention_Results promised by a client call.
type CapManageRetention_setEventRetention_Results_Future struct{ *capnp.Future }

func (f CapManageRetention_setEventRetention_Results_Future) Struct() (CapManageRetention_setEventRetention_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_setEventRetention_Results(p.Struct()), err
}

type CapManageRetention_testEvent_Params capnp.Struct

// CapManageRetention_testEvent_Params_TypeID is the unique identifier for the type CapManageRetention_testEvent_Params.
const CapManageRetention_testEvent_Params_TypeID = 0x843f3755e887cec2

func NewCapManageRetention_testEvent_Params(s *capnp.Segment) (CapManageRetention_testEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_testEvent_Params(st), err
}

func NewRootCapManageRetention_testEvent_Params(s *capnp.Segment) (CapManageRetention_testEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageRetention_testEvent_Params(st), err
}

func ReadRootCapManageRetention_testEvent_Params(msg *capnp.Message) (CapManageRetention_testEvent_Params, error) {
	root, err := msg.Root()
	return CapManageRetention_testEvent_Params(root.Struct()), err
}

func (s CapManageRetention_testEvent_Params) String() string {
	str, _ := text.Marshal(0x843f3755e887cec2, capnp.Struct(s))
	return str
}

func (s CapManageRetention_testEvent_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_testEvent_Params) DecodeFromPtr(p capnp.Ptr) CapManageRetention_testEvent_Params {
	return CapManageRetention_testEvent_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_testEvent_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_testEvent_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_testEvent_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_testEvent_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageRetention_testEvent_Params) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapManageRetention_testEvent_Params) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageRetention_testEvent_Params) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapManageRetention_testEvent_Params) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapManageRetention_testEvent_Params_List is a list of CapManageRetention_testEvent_Params.
type CapManageRetention_testEvent_Params_List = capnp.StructList[CapManageRetention_testEvent_Params]

// NewCapManageRetention_testEvent_Params creates a new list of CapManageRetention_testEvent_Params.
func NewCapManageRetention_testEvent_Params_List(s *capnp.Segment, sz int32) (CapManageRetention_testEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageRetention_testEvent_Params](l), err
}

// CapManageRetention_testEvent_Params_Future is a wrapper for a CapManageRetention_testEvent_Params promised by a client call.
type CapManageRetention_testEvent_Params_Future struct{ *capnp.Future }

func (f CapManageRetention_testEvent_Params_Future) Struct() (CapManageRetention_testEvent_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_testEvent_Params(p.Struct()), err
}
func (p CapManageRetention_testEvent_Params_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapManageRetention_testEvent_Results capnp.Struct

// CapManageRetention_testEvent_Results_TypeID is the unique identifier for the type CapManageRetention_testEvent_Results.
const CapManageRetention_testEvent_Results_TypeID = 0xbbd75d212e1f85e7

func NewCapManageRetention_testEvent_Results(s *capnp.Segment) (CapManageRetention_testEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapManageRetention_testEvent_Results(st), err
}

func NewRootCapManageRetention_testEvent_Results(s *capnp.Segment) (CapManageRetention_testEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapManageRetention_testEvent_Results(st), err
}

func ReadRootCapManageRetention_testEvent_Results(msg *capnp.Message) (CapManageRetention_testEvent_Results, error) {
	root, err := msg.Root()
	return CapManageRetention_testEvent_Results(root.Struct()), err
}

func (s CapManageRetention_testEvent_Results) String() string {
	str, _ := text.Marshal(0xbbd75d212e1f85e7, capnp.Struct(s))
	return str
}

func (s CapManageRetention_testEvent_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageRetention_testEvent_Results) DecodeFromPtr(p capnp.Ptr) CapManageRetention_testEvent_Results {
	return CapManageRetention_testEvent_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageRetention_testEvent_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageRetention_testEvent_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageRetention_testEvent_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageRetention_testEvent_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageRetention_testEvent_Results) Retained() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapManageRetention_testEvent_Results) SetRetained(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapManageRetention_testEvent_Results_List is a list of CapManageRetention_testEvent_Results.
type CapManageRetention_testEvent_Results_List = capnp.StructList[CapManageRetention_testEvent_Results]

// NewCapManageRetention_testEvent_Results creates a new list of CapManageRetention_testEvent_Results.
func NewCapManageRetention_testEvent_Results_List(s *capnp.Segment, sz int32) (CapManageRetention_testEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CapManageRetention_testEvent_Results](l), err
}

// CapManageRetention_testEvent_Results_Future is a wrapper for a CapManageRetention_testEvent_Results promised by a client call.
type CapManageRetention_testEvent_Results_Future struct{ *capnp.Future }

func (f CapManageRetention_testEvent_Results_Future) Struct() (CapManageRetention_testEvent_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageRetention_testEvent_Results(p.Struct()), err
}

type CapReadHistory capnp.Client

// CapReadHistory_TypeID is the unique identifier for the type CapReadHistory.
const CapReadHistory_TypeID = 0xadd9881ba4754f20

func (c CapReadHistory) GetEventHistory(ctx context.Context, params func(CapReadHistory_getEventHistory_Params) error) (CapReadHistory_getEventHistory_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xadd9881ba4754f20,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapReadHistory",
			MethodName:    "getEventHistory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapReadHistory_getEventHistory_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapReadHistory_getEventHistory_Results_Future{Future: ans.Future()}, release
}
func (c CapReadHistory) GetProperties(ctx context.Context, params func(CapReadHistory_getProperties_Params) error) (CapReadHistory_getProperties_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xadd9881ba4754f20,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapReadHistory",
			MethodName:    "getProperties",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapReadHistory_getProperties_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapReadHistory_getProperties_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapReadHistory) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapReadHistory) AddRef() CapReadHistory {
	return CapReadHistory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapReadHistory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapReadHistory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapReadHistory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapReadHistory) DecodeFromPtr(p capnp.Ptr) CapReadHistory {
	return CapReadHistory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapReadHistory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapReadHistory) IsSame(other CapReadHistory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapReadHistory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapReadHistory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapReadHistory_Server is a CapReadHistory with a local implementation.
type CapReadHistory_Server interface {
	GetEventHistory(context.Context, CapReadHistory_getEventHistory) error

	GetProperties(context.Context, CapReadHistory_getProperties) error
}

// CapReadHistory_NewServer creates a new Server from an implementation of CapReadHistory_Server.
func CapReadHistory_NewServer(s CapReadHistory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapReadHistory_Methods(nil, s), s, c)
}

// CapReadHistory_ServerToClient creates a new Client from an implementation of CapReadHistory_Server.
// The caller is responsible for calling Release on the returned Client.
func CapReadHistory_ServerToClient(s CapReadHistory_Server) CapReadHistory {
	return CapReadHistory(capnp.NewClient(CapReadHistory_NewServer(s)))
}

// CapReadHistory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapReadHistory_Methods(methods []server.Method, s CapReadHistory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xadd9881ba4754f20,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapReadHistory",
			MethodName:    "getEventHistory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetEventHistory(ctx, CapReadHistory_getEventHistory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xadd9881ba4754f20,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapReadHistory",
			MethodName:    "getProperties",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetProperties(ctx, CapReadHistory_getProperties{call})
		},
	})

	return methods
}

// CapReadHistory_getEventHistory holds the state for a server call to CapReadHistory.getEventHistory.
// See server.Call for documentation.
type CapReadHistory_getEventHistory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapReadHistory_getEventHistory) Args() CapReadHistory_getEventHistory_Params {
	return CapReadHistory_getEventHistory_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapReadHistory_getEventHistory) AllocResults() (CapReadHistory_getEventHistory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_getEventHistory_Results(r), err
}

// CapReadHistory_getProperties holds the state for a server call to CapReadHistory.getProperties.
// See server.Call for documentation.
type CapReadHistory_getProperties struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapReadHistory_getProperties) Args() CapReadHistory_getProperties_Params {
	return CapReadHistory_getProperties_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapReadHistory_getProperties) AllocResults() (CapReadHistory_getProperties_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_getProperties_Results(r), err
}

// CapReadHistory_List is a list of CapReadHistory.
type CapReadHistory_List = capnp.CapList[CapReadHistory]

// NewCapReadHistory creates a new list of CapReadHistory.
func NewCapReadHistory_List(s *capnp.Segment, sz int32) (CapReadHistory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapReadHistory](l), err
}

type CapReadHistory_getEventHistory_Params capnp.Struct

// CapReadHistory_getEventHistory_Params_TypeID is the unique identifier for the type CapReadHistory_getEventHistory_Params.
const CapReadHistory_getEventHistory_Params_TypeID = 0xb400b2d098c85f04

func NewCapReadHistory_getEventHistory_Params(s *capnp.Segment) (CapReadHistory_getEventHistory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapReadHistory_getEventHistory_Params(st), err
}

func NewRootCapReadHistory_getEventHistory_Params(s *capnp.Segment) (CapReadHistory_getEventHistory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapReadHistory_getEventHistory_Params(st), err
}

func ReadRootCapReadHistory_getEventHistory_Params(msg *capnp.Message) (CapReadHistory_getEventHistory_Params, error) {
	root, err := msg.Root()
	return CapReadHistory_getEventHistory_Params(root.Struct()), err
}

func (s CapReadHistory_getEventHistory_Params) String() string {
	str, _ := text.Marshal(0xb400b2d098c85f04, capnp.Struct(s))
	return str
}

func (s CapReadHistory_getEventHistory_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapReadHistory_getEventHistory_Params) DecodeFromPtr(p capnp.Ptr) CapReadHistory_getEventHistory_Params {
	return CapReadHistory_getEventHistory_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapReadHistory_getEventHistory_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapReadHistory_getEventHistory_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapReadHistory_getEventHistory_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapReadHistory_getEventHistory_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapReadHistory_getEventHistory_Params) PublisherID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapReadHistory_getEventHistory_Params) HasPublisherID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapReadHistory_getEventHistory_Params) PublisherIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapReadHistory_getEventHistory_Params) SetPublisherID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapReadHistory_getEventHistory_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapReadHistory_getEventHistory_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapReadHistory_getEventHistory_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapReadHistory_getEventHistory_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapReadHistory_getEventHistory_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CapReadHistory_getEventHistory_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapReadHistory_getEventHistory_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CapReadHistory_getEventHistory_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// CapReadHistory_getEventHistory_Params_List is a list of CapReadHistory_getEventHistory_Params.
type CapReadHistory_getEventHistory_Params_List = capnp.StructList[CapReadHistory_getEventHistory_Params]

// NewCapReadHistory_getEventHistory_Params creates a new list of CapReadHistory_getEventHistory_Params.
func NewCapReadHistory_getEventHistory_Params_List(s *capnp.Segment, sz int32) (CapReadHistory_getEventHistory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[CapReadHistory_getEventHistory_Params](l), err
}

// CapReadHistory_getEventHistory_Params_Future is a wrapper for a CapReadHistory_getEventHistory_Params promised by a client call.
type CapReadHistory_getEventHistory_Params_Future struct{ *capnp.Future }

func (f CapReadHistory_getEventHistory_Params_Future) Struct() (CapReadHistory_getEventHistory_Params, error) {
	p, err := f.Future.Ptr()
	return CapReadHistory_getEventHistory_Params(p.Struct()), err
}

type CapReadHistory_getEventHistory_Results capnp.Struct

// CapReadHistory_getEventHistory_Results_TypeID is the unique identifier for the type CapReadHistory_getEventHistory_Results.
const CapReadHistory_getEventHistory_Results_TypeID = 0x9d6b3c5af51f3915

func NewCapReadHistory_getEventHistory_Results(s *capnp.Segment) (CapReadHistory_getEventHistory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_getEventHistory_Results(st), err
}

func NewRootCapReadHistory_getEventHistory_Results(s *capnp.Segment) (CapReadHistory_getEventHistory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_getEventHistory_Results(st), err
}

func ReadRootCapReadHistory_getEventHistory_Results(msg *capnp.Message) (CapReadHistory_getEventHistory_Results, error) {
	root, err := msg.Root()
	return CapReadHistory_getEventHistory_Results(root.Struct()), err
}

func (s CapReadHistory_getEventHistory_Results) String() string {
	str, _ := text.Marshal(0x9d6b3c5af51f3915, capnp.Struct(s))
	return str
}

func (s CapReadHistory_getEventHistory_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapReadHistory_getEventHistory_Results) DecodeFromPtr(p capnp.Ptr) CapReadHistory_getEventHistory_Results {
	return CapReadHistory_getEventHistory_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapReadHistory_getEventHistory_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapReadHistory_getEventHistory_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapReadHistory_getEventHistory_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapReadHistory_getEventHistory_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapReadHistory_getEventHistory_Results) Cursor() CapHistoryCursor {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapHistoryCursor(p.Interface().Client())
}

func (s CapReadHistory_getEventHistory_Results) HasCursor() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapReadHistory_getEventHistory_Results) SetCursor(v CapHistoryCursor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapReadHistory_getEventHistory_Results_List is a list of CapReadHistory_getEventHistory_Results.
type CapReadHistory_getEventHistory_Results_List = capnp.StructList[CapReadHistory_getEventHistory_Results]

// NewCapReadHistory_getEventHistory_Results creates a new list of CapReadHistory_getEventHistory_Results.
func NewCapReadHistory_getEventHistory_Results_List(s *capnp.Segment, sz int32) (CapReadHistory_getEventHistory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapReadHistory_getEventHistory_Results](l), err
}

// CapReadHistory_getEventHistory_Results_Future is a wrapper for a CapReadHistory_getEventHistory_Results promised by a client call.
type CapReadHistory_getEventHistory_Results_Future struct{ *capnp.Future }

func (f CapReadHistory_getEventHistory_Results_Future) Struct() (CapReadHistory_getEventHistory_Results, error) {
	p, err := f.Future.Ptr()
	return CapReadHistory_getEventHistory_Results(p.Struct()), err
}
func (p CapReadHistory_getEventHistory_Results_Future) Cursor() CapHistoryCursor {
	return CapHistoryCursor(p.Future.Field(0, nil).Client())
}

type CapReadHistory_getProperties_Params capnp.Struct

// CapReadHistory_getProperties_Params_TypeID is the unique identifier for the type CapReadHistory_getProperties_Params.
const CapReadHistory_getProperties_Params_TypeID = 0xcc69b73148363436

func NewCapReadHistory_getProperties_Params(s *capnp.Segment) (CapReadHistory_getProperties_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapReadHistory_getProperties_Params(st), err
}

func NewRootCapReadHistory_getProperties_Params(s *capnp.Segment) (CapReadHistory_getProperties_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapReadHistory_getProperties_Params(st), err
}

func ReadRootCapReadHistory_getProperties_Params(msg *capnp.Message) (CapReadHistory_getProperties_Params, error) {
	root, err := msg.Root()
	return CapReadHistory_getProperties_Params(root.Struct()), err
}

func (s CapReadHistory_getProperties_Params) String() string {
	str, _ := text.Marshal(0xcc69b73148363436, capnp.Struct(s))
	return str
}

func (s CapReadHistory_getProperties_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapReadHistory_getProperties_Params) DecodeFromPtr(p capnp.Ptr) CapReadHistory_getProperties_Params {
	return CapReadHistory_getProperties_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapReadHistory_getProperties_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapReadHistory_getProperties_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapReadHistory_getProperties_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapReadHistory_getProperties_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapReadHistory_getProperties_Params) PublisherID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapReadHistory_getProperties_Params) HasPublisherID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapReadHistory_getProperties_Params) PublisherIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapReadHistory_getProperties_Params) SetPublisherID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapReadHistory_getProperties_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapReadHistory_getProperties_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapReadHistory_getProperties_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapReadHistory_getProperties_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapReadHistory_getProperties_Params) Names() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s CapReadHistory_getProperties_Params) HasNames() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapReadHistory_getProperties_Params) SetNames(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewNames sets the names field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s CapReadHistory_getProperties_Params) NewNames(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// CapReadHistory_getProperties_Params_List is a list of CapReadHistory_getProperties_Params.
type CapReadHistory_getProperties_Params_List = capnp.StructList[CapReadHistory_getProperties_Params]

// NewCapReadHistory_getProperties_Params creates a new list of CapReadHistory_getProperties_Params.
func NewCapReadHistory_getProperties_Params_List(s *capnp.Segment, sz int32) (CapReadHistory_getProperties_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[CapReadHistory_getProperties_Params](l), err
}

// CapReadHistory_getProperties_Params_Future is a wrapper for a CapReadHistory_getProperties_Params promised by a client call.
type CapReadHistory_getProperties_Params_Future struct{ *capnp.Future }

func (f CapReadHistory_getProperties_Params_Future) Struct() (CapReadHistory_getProperties_Params, error) {
	p, err := f.Future.Ptr()
	return CapReadHistory_getProperties_Params(p.Struct()), err
}

type CapReadHistory_getProperties_Results capnp.Struct

// CapReadHistory_getProperties_Results_TypeID is the unique identifier for the type CapReadHistory_getProperties_Results.
const CapReadHistory_getProperties_Results_TypeID = 0xa9ea20731d3aa7a9

func NewCapReadHistory_getProperties_Results(s *capnp.Segment) (CapReadHistory_getProperties_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_getProperties_Results(st), err
}

func NewRootCapReadHistory_getProperties_Results(s *capnp.Segment) (CapReadHistory_getProperties_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadHistory_getProperties_Results(st), err
}

func ReadRootCapReadHistory_getProperties_Results(msg *capnp.Message) (CapReadHistory_getProperties_Results, error) {
	root, err := msg.Root()
	return CapReadHistory_getProperties_Results(root.Struct()), err
}

func (s CapReadHistory_getProperties_Results) String() string {
	str, _ := text.Marshal(0xa9ea20731d3aa7a9, capnp.Struct(s))
	return str
}

func (s CapReadHistory_getProperties_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapReadHistory_getProperties_Results) DecodeFromPtr(p capnp.Ptr) CapReadHistory_getProperties_Results {
	return CapReadHistory_getProperties_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapReadHistory_getProperties_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapReadHistory_getProperties_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapReadHistory_getProperties_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapReadHistory_getProperties_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapReadHistory_getProperties_Results) ValueList() (ThingValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue_List(p.List()), err
}

func (s CapReadHistory_getProperties_Results) HasValueList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapReadHistory_getProperties_Results) SetValueList(v ThingValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewValueList sets the valueList field to a newly
// allocated ThingValue_List, preferring placement in s's segment.
func (s CapReadHistory_getProperties_Results) NewValueList(n int32) (ThingValue_List, error) {
	l, err := NewThingValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ThingValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapReadHistory_getProperties_Results_List is a list of CapReadHistory_getProperties_Results.
type CapReadHistory_getProperties_Results_List = capnp.StructList[CapReadHistory_getProperties_Results]

// NewCapReadHistory_getProperties_Results creates a new list of CapReadHistory_getProperties_Results.
func NewCapReadHistory_getProperties_Results_List(s *capnp.Segment, sz int32) (CapReadHistory_getProperties_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapReadHistory_getProperties_Results](l), err
}

// CapReadHistory_getProperties_Results_Future is a wrapper for a CapReadHistory_getProperties_Results promised by a client call.
type CapReadHistory_getProperties_Results_Future struct{ *capnp.Future }

func (f CapReadHistory_getProperties_Results_Future) Struct() (CapReadHistory_getProperties_Results, error) {
	p, err := f.Future.Ptr()
	return CapReadHistory_getProperties_Results(p.Struct()), err
}

type CapHistoryCursor capnp.Client

// CapHistoryCursor_TypeID is the unique identifier for the type CapHistoryCursor.
const CapHistoryCursor_TypeID = 0x9d62a769e5dd0281

func (c CapHistoryCursor) First(ctx context.Context, params func(CapHistoryCursor_first_Params) error) (CapHistoryCursor_first_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "first",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryCursor_first_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryCursor_first_Results_Future{Future: ans.Future()}, release
}
func (c CapHistoryCursor) Last(ctx context.Context, params func(CapHistoryCursor_last_Params) error) (CapHistoryCursor_last_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "last",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryCursor_last_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryCursor_last_Results_Future{Future: ans.Future()}, release
}
func (c CapHistoryCursor) Next(ctx context.Context, params func(CapHistoryCursor_next_Params) error) (CapHistoryCursor_next_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "next",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryCursor_next_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryCursor_next_Results_Future{Future: ans.Future()}, release
}
func (c CapHistoryCursor) NextN(ctx context.Context, params func(CapHistoryCursor_nextN_Params) error) (CapHistoryCursor_nextN_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      3,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "nextN",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryCursor_nextN_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryCursor_nextN_Results_Future{Future: ans.Future()}, release
}
func (c CapHistoryCursor) Prev(ctx context.Context, params func(CapHistoryCursor_prev_Params) error) (CapHistoryCursor_prev_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      4,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "prev",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryCursor_prev_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryCursor_prev_Results_Future{Future: ans.Future()}, release
}
func (c CapHistoryCursor) PrevN(ctx context.Context, params func(CapHistoryCursor_prevN_Params) error) (CapHistoryCursor_prevN_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      5,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "prevN",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryCursor_prevN_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryCursor_prevN_Results_Future{Future: ans.Future()}, release
}
func (c CapHistoryCursor) Seek(ctx context.Context, params func(CapHistoryCursor_seek_Params) error) (CapHistoryCursor_seek_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      6,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "seek",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHistoryCursor_seek_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapHistoryCursor_seek_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapHistoryCursor) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapHistoryCursor) AddRef() CapHistoryCursor {
	return CapHistoryCursor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapHistoryCursor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapHistoryCursor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapHistoryCursor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapHistoryCursor) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor {
	return CapHistoryCursor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapHistoryCursor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapHistoryCursor) IsSame(other CapHistoryCursor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapHistoryCursor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapHistoryCursor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapHistoryCursor_Server is a CapHistoryCursor with a local implementation.
type CapHistoryCursor_Server interface {
	First(context.Context, CapHistoryCursor_first) error

	Last(context.Context, CapHistoryCursor_last) error

	Next(context.Context, CapHistoryCursor_next) error

	NextN(context.Context, CapHistoryCursor_nextN) error

	Prev(context.Context, CapHistoryCursor_prev) error

	PrevN(context.Context, CapHistoryCursor_prevN) error

	Seek(context.Context, CapHistoryCursor_seek) error
}

// CapHistoryCursor_NewServer creates a new Server from an implementation of CapHistoryCursor_Server.
func CapHistoryCursor_NewServer(s CapHistoryCursor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapHistoryCursor_Methods(nil, s), s, c)
}

// CapHistoryCursor_ServerToClient creates a new Client from an implementation of CapHistoryCursor_Server.
// The caller is responsible for calling Release on the returned Client.
func CapHistoryCursor_ServerToClient(s CapHistoryCursor_Server) CapHistoryCursor {
	return CapHistoryCursor(capnp.NewClient(CapHistoryCursor_NewServer(s)))
}

// CapHistoryCursor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapHistoryCursor_Methods(methods []server.Method, s CapHistoryCursor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 7)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      0,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "first",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.First(ctx, CapHistoryCursor_first{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      1,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "last",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Last(ctx, CapHistoryCursor_last{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      2,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "next",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Next(ctx, CapHistoryCursor_next{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      3,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "nextN",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NextN(ctx, CapHistoryCursor_nextN{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      4,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "prev",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Prev(ctx, CapHistoryCursor_prev{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      5,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "prevN",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PrevN(ctx, CapHistoryCursor_prevN{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9d62a769e5dd0281,
			MethodID:      6,
			InterfaceName: "hubapi/History.capnp:CapHistoryCursor",
			MethodName:    "seek",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Seek(ctx, CapHistoryCursor_seek{call})
		},
	})

	return methods
}

// CapHistoryCursor_first holds the state for a server call to CapHistoryCursor.first.
// See server.Call for documentation.
type CapHistoryCursor_first struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryCursor_first) Args() CapHistoryCursor_first_Params {
	return CapHistoryCursor_first_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryCursor_first) AllocResults() (CapHistoryCursor_first_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_first_Results(r), err
}

// CapHistoryCursor_last holds the state for a server call to CapHistoryCursor.last.
// See server.Call for documentation.
type CapHistoryCursor_last struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryCursor_last) Args() CapHistoryCursor_last_Params {
	return CapHistoryCursor_last_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryCursor_last) AllocResults() (CapHistoryCursor_last_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_last_Results(r), err
}

// CapHistoryCursor_next holds the state for a server call to CapHistoryCursor.next.
// See server.Call for documentation.
type CapHistoryCursor_next struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryCursor_next) Args() CapHistoryCursor_next_Params {
	return CapHistoryCursor_next_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryCursor_next) AllocResults() (CapHistoryCursor_next_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_next_Results(r), err
}

// CapHistoryCursor_nextN holds the state for a server call to CapHistoryCursor.nextN.
// See server.Call for documentation.
type CapHistoryCursor_nextN struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryCursor_nextN) Args() CapHistoryCursor_nextN_Params {
	return CapHistoryCursor_nextN_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryCursor_nextN) AllocResults() (CapHistoryCursor_nextN_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_nextN_Results(r), err
}

// CapHistoryCursor_prev holds the state for a server call to CapHistoryCursor.prev.
// See server.Call for documentation.
type CapHistoryCursor_prev struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryCursor_prev) Args() CapHistoryCursor_prev_Params {
	return CapHistoryCursor_prev_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryCursor_prev) AllocResults() (CapHistoryCursor_prev_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_prev_Results(r), err
}

// CapHistoryCursor_prevN holds the state for a server call to CapHistoryCursor.prevN.
// See server.Call for documentation.
type CapHistoryCursor_prevN struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryCursor_prevN) Args() CapHistoryCursor_prevN_Params {
	return CapHistoryCursor_prevN_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryCursor_prevN) AllocResults() (CapHistoryCursor_prevN_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_prevN_Results(r), err
}

// CapHistoryCursor_seek holds the state for a server call to CapHistoryCursor.seek.
// See server.Call for documentation.
type CapHistoryCursor_seek struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHistoryCursor_seek) Args() CapHistoryCursor_seek_Params {
	return CapHistoryCursor_seek_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapHistoryCursor_seek) AllocResults() (CapHistoryCursor_seek_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_seek_Results(r), err
}

// CapHistoryCursor_List is a list of CapHistoryCursor.
type CapHistoryCursor_List = capnp.CapList[CapHistoryCursor]

// NewCapHistoryCursor creates a new list of CapHistoryCursor.
func NewCapHistoryCursor_List(s *capnp.Segment, sz int32) (CapHistoryCursor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapHistoryCursor](l), err
}

type CapHistoryCursor_first_Params capnp.Struct

// CapHistoryCursor_first_Params_TypeID is the unique identifier for the type CapHistoryCursor_first_Params.
const CapHistoryCursor_first_Params_TypeID = 0xcf1afe8826feb5a0

func NewCapHistoryCursor_first_Params(s *capnp.Segment) (CapHistoryCursor_first_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHistoryCursor_first_Params(st), err
}

func NewRootCapHistoryCursor_first_Params(s *capnp.Segment) (CapHistoryCursor_first_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHistoryCursor_first_Params(st), err
}

func ReadRootCapHistoryCursor_first_Params(msg *capnp.Message) (CapHistoryCursor_first_Params, error) {
	root, err := msg.Root()
	return CapHistoryCursor_first_Params(root.Struct()), err
}

func (s CapHistoryCursor_first_Params) String() string {
	str, _ := text.Marshal(0xcf1afe8826feb5a0, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_first_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_first_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_first_Params {
	return CapHistoryCursor_first_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_first_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_first_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_first_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_first_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapHistoryCursor_first_Params_List is a list of CapHistoryCursor_first_Params.
type CapHistoryCursor_first_Params_List = capnp.StructList[CapHistoryCursor_first_Params]

// NewCapHistoryCursor_first_Params creates a new list of CapHistoryCursor_first_Params.
func NewCapHistoryCursor_first_Params_List(s *capnp.Segment, sz int32) (CapHistoryCursor_first_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapHistoryCursor_first_Params](l), err
}

// CapHistoryCursor_first_Params_Future is a wrapper for a CapHistoryCursor_first_Params promised by a client call.
type CapHistoryCursor_first_Params_Future struct{ *capnp.Future }

func (f CapHistoryCursor_first_Params_Future) Struct() (CapHistoryCursor_first_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_first_Params(p.Struct()), err
}

type CapHistoryCursor_first_Results capnp.Struct

// CapHistoryCursor_first_Results_TypeID is the unique identifier for the type CapHistoryCursor_first_Results.
const CapHistoryCursor_first_Results_TypeID = 0xf473c4c1fb580a07

func NewCapHistoryCursor_first_Results(s *capnp.Segment) (CapHistoryCursor_first_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_first_Results(st), err
}

func NewRootCapHistoryCursor_first_Results(s *capnp.Segment) (CapHistoryCursor_first_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_first_Results(st), err
}

func ReadRootCapHistoryCursor_first_Results(msg *capnp.Message) (CapHistoryCursor_first_Results, error) {
	root, err := msg.Root()
	return CapHistoryCursor_first_Results(root.Struct()), err
}

func (s CapHistoryCursor_first_Results) String() string {
	str, _ := text.Marshal(0xf473c4c1fb580a07, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_first_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_first_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_first_Results {
	return CapHistoryCursor_first_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_first_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_first_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_first_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_first_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_first_Results) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapHistoryCursor_first_Results) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryCursor_first_Results) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapHistoryCursor_first_Results) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CapHistoryCursor_first_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapHistoryCursor_first_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapHistoryCursor_first_Results_List is a list of CapHistoryCursor_first_Results.
type CapHistoryCursor_first_Results_List = capnp.StructList[CapHistoryCursor_first_Results]

// NewCapHistoryCursor_first_Results creates a new list of CapHistoryCursor_first_Results.
func NewCapHistoryCursor_first_Results_List(s *capnp.Segment, sz int32) (CapHistoryCursor_first_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryCursor_first_Results](l), err
}

// CapHistoryCursor_first_Results_Future is a wrapper for a CapHistoryCursor_first_Results promised by a client call.
type CapHistoryCursor_first_Results_Future struct{ *capnp.Future }

func (f CapHistoryCursor_first_Results_Future) Struct() (CapHistoryCursor_first_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_first_Results(p.Struct()), err
}
func (p CapHistoryCursor_first_Results_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapHistoryCursor_last_Params capnp.Struct

// CapHistoryCursor_last_Params_TypeID is the unique identifier for the type CapHistoryCursor_last_Params.
const CapHistoryCursor_last_Params_TypeID = 0xc986f64c6c14ca4f

func NewCapHistoryCursor_last_Params(s *capnp.Segment) (CapHistoryCursor_last_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHistoryCursor_last_Params(st), err
}

func NewRootCapHistoryCursor_last_Params(s *capnp.Segment) (CapHistoryCursor_last_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHistoryCursor_last_Params(st), err
}

func ReadRootCapHistoryCursor_last_Params(msg *capnp.Message) (CapHistoryCursor_last_Params, error) {
	root, err := msg.Root()
	return CapHistoryCursor_last_Params(root.Struct()), err
}

func (s CapHistoryCursor_last_Params) String() string {
	str, _ := text.Marshal(0xc986f64c6c14ca4f, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_last_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_last_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_last_Params {
	return CapHistoryCursor_last_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_last_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_last_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_last_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_last_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapHistoryCursor_last_Params_List is a list of CapHistoryCursor_last_Params.
type CapHistoryCursor_last_Params_List = capnp.StructList[CapHistoryCursor_last_Params]

// NewCapHistoryCursor_last_Params creates a new list of CapHistoryCursor_last_Params.
func NewCapHistoryCursor_last_Params_List(s *capnp.Segment, sz int32) (CapHistoryCursor_last_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapHistoryCursor_last_Params](l), err
}

// CapHistoryCursor_last_Params_Future is a wrapper for a CapHistoryCursor_last_Params promised by a client call.
type CapHistoryCursor_last_Params_Future struct{ *capnp.Future }

func (f CapHistoryCursor_last_Params_Future) Struct() (CapHistoryCursor_last_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_last_Params(p.Struct()), err
}

type CapHistoryCursor_last_Results capnp.Struct

// CapHistoryCursor_last_Results_TypeID is the unique identifier for the type CapHistoryCursor_last_Results.
const CapHistoryCursor_last_Results_TypeID = 0x9f1384ed24dccf37

func NewCapHistoryCursor_last_Results(s *capnp.Segment) (CapHistoryCursor_last_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_last_Results(st), err
}

func NewRootCapHistoryCursor_last_Results(s *capnp.Segment) (CapHistoryCursor_last_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_last_Results(st), err
}

func ReadRootCapHistoryCursor_last_Results(msg *capnp.Message) (CapHistoryCursor_last_Results, error) {
	root, err := msg.Root()
	return CapHistoryCursor_last_Results(root.Struct()), err
}

func (s CapHistoryCursor_last_Results) String() string {
	str, _ := text.Marshal(0x9f1384ed24dccf37, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_last_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_last_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_last_Results {
	return CapHistoryCursor_last_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_last_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_last_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_last_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_last_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_last_Results) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapHistoryCursor_last_Results) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryCursor_last_Results) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapHistoryCursor_last_Results) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CapHistoryCursor_last_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapHistoryCursor_last_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapHistoryCursor_last_Results_List is a list of CapHistoryCursor_last_Results.
type CapHistoryCursor_last_Results_List = capnp.StructList[CapHistoryCursor_last_Results]

// NewCapHistoryCursor_last_Results creates a new list of CapHistoryCursor_last_Results.
func NewCapHistoryCursor_last_Results_List(s *capnp.Segment, sz int32) (CapHistoryCursor_last_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryCursor_last_Results](l), err
}

// CapHistoryCursor_last_Results_Future is a wrapper for a CapHistoryCursor_last_Results promised by a client call.
type CapHistoryCursor_last_Results_Future struct{ *capnp.Future }

func (f CapHistoryCursor_last_Results_Future) Struct() (CapHistoryCursor_last_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_last_Results(p.Struct()), err
}
func (p CapHistoryCursor_last_Results_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapHistoryCursor_next_Params capnp.Struct

// CapHistoryCursor_next_Params_TypeID is the unique identifier for the type CapHistoryCursor_next_Params.
const CapHistoryCursor_next_Params_TypeID = 0xbdeae8c7974b47f8

func NewCapHistoryCursor_next_Params(s *capnp.Segment) (CapHistoryCursor_next_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHistoryCursor_next_Params(st), err
}

func NewRootCapHistoryCursor_next_Params(s *capnp.Segment) (CapHistoryCursor_next_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHistoryCursor_next_Params(st), err
}

func ReadRootCapHistoryCursor_next_Params(msg *capnp.Message) (CapHistoryCursor_next_Params, error) {
	root, err := msg.Root()
	return CapHistoryCursor_next_Params(root.Struct()), err
}

func (s CapHistoryCursor_next_Params) String() string {
	str, _ := text.Marshal(0xbdeae8c7974b47f8, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_next_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_next_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_next_Params {
	return CapHistoryCursor_next_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_next_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_next_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_next_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_next_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapHistoryCursor_next_Params_List is a list of CapHistoryCursor_next_Params.
type CapHistoryCursor_next_Params_List = capnp.StructList[CapHistoryCursor_next_Params]

// NewCapHistoryCursor_next_Params creates a new list of CapHistoryCursor_next_Params.
func NewCapHistoryCursor_next_Params_List(s *capnp.Segment, sz int32) (CapHistoryCursor_next_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapHistoryCursor_next_Params](l), err
}

// CapHistoryCursor_next_Params_Future is a wrapper for a CapHistoryCursor_next_Params promised by a client call.
type CapHistoryCursor_next_Params_Future struct{ *capnp.Future }

func (f CapHistoryCursor_next_Params_Future) Struct() (CapHistoryCursor_next_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_next_Params(p.Struct()), err
}

type CapHistoryCursor_next_Results capnp.Struct

// CapHistoryCursor_next_Results_TypeID is the unique identifier for the type CapHistoryCursor_next_Results.
const CapHistoryCursor_next_Results_TypeID = 0xfc5dac1667b5feb1

func NewCapHistoryCursor_next_Results(s *capnp.Segment) (CapHistoryCursor_next_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_next_Results(st), err
}

func NewRootCapHistoryCursor_next_Results(s *capnp.Segment) (CapHistoryCursor_next_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_next_Results(st), err
}

func ReadRootCapHistoryCursor_next_Results(msg *capnp.Message) (CapHistoryCursor_next_Results, error) {
	root, err := msg.Root()
	return CapHistoryCursor_next_Results(root.Struct()), err
}

func (s CapHistoryCursor_next_Results) String() string {
	str, _ := text.Marshal(0xfc5dac1667b5feb1, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_next_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_next_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_next_Results {
	return CapHistoryCursor_next_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_next_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_next_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_next_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_next_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_next_Results) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapHistoryCursor_next_Results) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryCursor_next_Results) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapHistoryCursor_next_Results) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CapHistoryCursor_next_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapHistoryCursor_next_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapHistoryCursor_next_Results_List is a list of CapHistoryCursor_next_Results.
type CapHistoryCursor_next_Results_List = capnp.StructList[CapHistoryCursor_next_Results]

// NewCapHistoryCursor_next_Results creates a new list of CapHistoryCursor_next_Results.
func NewCapHistoryCursor_next_Results_List(s *capnp.Segment, sz int32) (CapHistoryCursor_next_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryCursor_next_Results](l), err
}

// CapHistoryCursor_next_Results_Future is a wrapper for a CapHistoryCursor_next_Results promised by a client call.
type CapHistoryCursor_next_Results_Future struct{ *capnp.Future }

func (f CapHistoryCursor_next_Results_Future) Struct() (CapHistoryCursor_next_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_next_Results(p.Struct()), err
}
func (p CapHistoryCursor_next_Results_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapHistoryCursor_nextN_Params capnp.Struct

// CapHistoryCursor_nextN_Params_TypeID is the unique identifier for the type CapHistoryCursor_nextN_Params.
const CapHistoryCursor_nextN_Params_TypeID = 0xe46ac295853f5a28

func NewCapHistoryCursor_nextN_Params(s *capnp.Segment) (CapHistoryCursor_nextN_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapHistoryCursor_nextN_Params(st), err
}

func NewRootCapHistoryCursor_nextN_Params(s *capnp.Segment) (CapHistoryCursor_nextN_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapHistoryCursor_nextN_Params(st), err
}

func ReadRootCapHistoryCursor_nextN_Params(msg *capnp.Message) (CapHistoryCursor_nextN_Params, error) {
	root, err := msg.Root()
	return CapHistoryCursor_nextN_Params(root.Struct()), err
}

func (s CapHistoryCursor_nextN_Params) String() string {
	str, _ := text.Marshal(0xe46ac295853f5a28, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_nextN_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_nextN_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_nextN_Params {
	return CapHistoryCursor_nextN_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_nextN_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_nextN_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_nextN_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_nextN_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_nextN_Params) Steps() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s CapHistoryCursor_nextN_Params) SetSteps(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// CapHistoryCursor_nextN_Params_List is a list of CapHistoryCursor_nextN_Params.
type CapHistoryCursor_nextN_Params_List = capnp.StructList[CapHistoryCursor_nextN_Params]

// NewCapHistoryCursor_nextN_Params creates a new list of CapHistoryCursor_nextN_Params.
func NewCapHistoryCursor_nextN_Params_List(s *capnp.Segment, sz int32) (CapHistoryCursor_nextN_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CapHistoryCursor_nextN_Params](l), err
}

// CapHistoryCursor_nextN_Params_Future is a wrapper for a CapHistoryCursor_nextN_Params promised by a client call.
type CapHistoryCursor_nextN_Params_Future struct{ *capnp.Future }

func (f CapHistoryCursor_nextN_Params_Future) Struct() (CapHistoryCursor_nextN_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_nextN_Params(p.Struct()), err
}

type CapHistoryCursor_nextN_Results capnp.Struct

// CapHistoryCursor_nextN_Results_TypeID is the unique identifier for the type CapHistoryCursor_nextN_Results.
const CapHistoryCursor_nextN_Results_TypeID = 0xee77b061c9ba3ce9

func NewCapHistoryCursor_nextN_Results(s *capnp.Segment) (CapHistoryCursor_nextN_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_nextN_Results(st), err
}

func NewRootCapHistoryCursor_nextN_Results(s *capnp.Segment) (CapHistoryCursor_nextN_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_nextN_Results(st), err
}

func ReadRootCapHistoryCursor_nextN_Results(msg *capnp.Message) (CapHistoryCursor_nextN_Results, error) {
	root, err := msg.Root()
	return CapHistoryCursor_nextN_Results(root.Struct()), err
}

func (s CapHistoryCursor_nextN_Results) String() string {
	str, _ := text.Marshal(0xee77b061c9ba3ce9, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_nextN_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_nextN_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_nextN_Results {
	return CapHistoryCursor_nextN_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_nextN_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_nextN_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_nextN_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_nextN_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_nextN_Results) Batch() (ThingValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue_List(p.List()), err
}

func (s CapHistoryCursor_nextN_Results) HasBatch() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryCursor_nextN_Results) SetBatch(v ThingValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewBatch sets the batch field to a newly
// allocated ThingValue_List, preferring placement in s's segment.
func (s CapHistoryCursor_nextN_Results) NewBatch(n int32) (ThingValue_List, error) {
	l, err := NewThingValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ThingValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CapHistoryCursor_nextN_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapHistoryCursor_nextN_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapHistoryCursor_nextN_Results_List is a list of CapHistoryCursor_nextN_Results.
type CapHistoryCursor_nextN_Results_List = capnp.StructList[CapHistoryCursor_nextN_Results]

// NewCapHistoryCursor_nextN_Results creates a new list of CapHistoryCursor_nextN_Results.
func NewCapHistoryCursor_nextN_Results_List(s *capnp.Segment, sz int32) (CapHistoryCursor_nextN_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryCursor_nextN_Results](l), err
}

// CapHistoryCursor_nextN_Results_Future is a wrapper for a CapHistoryCursor_nextN_Results promised by a client call.
type CapHistoryCursor_nextN_Results_Future struct{ *capnp.Future }

func (f CapHistoryCursor_nextN_Results_Future) Struct() (CapHistoryCursor_nextN_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_nextN_Results(p.Struct()), err
}

type CapHistoryCursor_prev_Params capnp.Struct

// CapHistoryCursor_prev_Params_TypeID is the unique identifier for the type CapHistoryCursor_prev_Params.
const CapHistoryCursor_prev_Params_TypeID = 0xc6fd08f6df519d73

func NewCapHistoryCursor_prev_Params(s *capnp.Segment) (CapHistoryCursor_prev_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHistoryCursor_prev_Params(st), err
}

func NewRootCapHistoryCursor_prev_Params(s *capnp.Segment) (CapHistoryCursor_prev_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHistoryCursor_prev_Params(st), err
}

func ReadRootCapHistoryCursor_prev_Params(msg *capnp.Message) (CapHistoryCursor_prev_Params, error) {
	root, err := msg.Root()
	return CapHistoryCursor_prev_Params(root.Struct()), err
}

func (s CapHistoryCursor_prev_Params) String() string {
	str, _ := text.Marshal(0xc6fd08f6df519d73, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_prev_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_prev_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_prev_Params {
	return CapHistoryCursor_prev_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_prev_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_prev_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_prev_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_prev_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapHistoryCursor_prev_Params_List is a list of CapHistoryCursor_prev_Params.
type CapHistoryCursor_prev_Params_List = capnp.StructList[CapHistoryCursor_prev_Params]

// NewCapHistoryCursor_prev_Params creates a new list of CapHistoryCursor_prev_Params.
func NewCapHistoryCursor_prev_Params_List(s *capnp.Segment, sz int32) (CapHistoryCursor_prev_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapHistoryCursor_prev_Params](l), err
}

// CapHistoryCursor_prev_Params_Future is a wrapper for a CapHistoryCursor_prev_Params promised by a client call.
type CapHistoryCursor_prev_Params_Future struct{ *capnp.Future }

func (f CapHistoryCursor_prev_Params_Future) Struct() (CapHistoryCursor_prev_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_prev_Params(p.Struct()), err
}

type CapHistoryCursor_prev_Results capnp.Struct

// CapHistoryCursor_prev_Results_TypeID is the unique identifier for the type CapHistoryCursor_prev_Results.
const CapHistoryCursor_prev_Results_TypeID = 0xc68e1d3ad2dcac35

func NewCapHistoryCursor_prev_Results(s *capnp.Segment) (CapHistoryCursor_prev_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_prev_Results(st), err
}

func NewRootCapHistoryCursor_prev_Results(s *capnp.Segment) (CapHistoryCursor_prev_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_prev_Results(st), err
}

func ReadRootCapHistoryCursor_prev_Results(msg *capnp.Message) (CapHistoryCursor_prev_Results, error) {
	root, err := msg.Root()
	return CapHistoryCursor_prev_Results(root.Struct()), err
}

func (s CapHistoryCursor_prev_Results) String() string {
	str, _ := text.Marshal(0xc68e1d3ad2dcac35, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_prev_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_prev_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_prev_Results {
	return CapHistoryCursor_prev_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_prev_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_prev_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_prev_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_prev_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_prev_Results) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapHistoryCursor_prev_Results) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryCursor_prev_Results) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapHistoryCursor_prev_Results) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CapHistoryCursor_prev_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapHistoryCursor_prev_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapHistoryCursor_prev_Results_List is a list of CapHistoryCursor_prev_Results.
type CapHistoryCursor_prev_Results_List = capnp.StructList[CapHistoryCursor_prev_Results]

// NewCapHistoryCursor_prev_Results creates a new list of CapHistoryCursor_prev_Results.
func NewCapHistoryCursor_prev_Results_List(s *capnp.Segment, sz int32) (CapHistoryCursor_prev_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryCursor_prev_Results](l), err
}

// CapHistoryCursor_prev_Results_Future is a wrapper for a CapHistoryCursor_prev_Results promised by a client call.
type CapHistoryCursor_prev_Results_Future struct{ *capnp.Future }

func (f CapHistoryCursor_prev_Results_Future) Struct() (CapHistoryCursor_prev_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_prev_Results(p.Struct()), err
}
func (p CapHistoryCursor_prev_Results_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapHistoryCursor_prevN_Params capnp.Struct

// CapHistoryCursor_prevN_Params_TypeID is the unique identifier for the type CapHistoryCursor_prevN_Params.
const CapHistoryCursor_prevN_Params_TypeID = 0xa6fcb2009f6f5277

func NewCapHistoryCursor_prevN_Params(s *capnp.Segment) (CapHistoryCursor_prevN_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapHistoryCursor_prevN_Params(st), err
}

func NewRootCapHistoryCursor_prevN_Params(s *capnp.Segment) (CapHistoryCursor_prevN_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapHistoryCursor_prevN_Params(st), err
}

func ReadRootCapHistoryCursor_prevN_Params(msg *capnp.Message) (CapHistoryCursor_prevN_Params, error) {
	root, err := msg.Root()
	return CapHistoryCursor_prevN_Params(root.Struct()), err
}

func (s CapHistoryCursor_prevN_Params) String() string {
	str, _ := text.Marshal(0xa6fcb2009f6f5277, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_prevN_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_prevN_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_prevN_Params {
	return CapHistoryCursor_prevN_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_prevN_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_prevN_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_prevN_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_prevN_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_prevN_Params) Steps() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s CapHistoryCursor_prevN_Params) SetSteps(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// CapHistoryCursor_prevN_Params_List is a list of CapHistoryCursor_prevN_Params.
type CapHistoryCursor_prevN_Params_List = capnp.StructList[CapHistoryCursor_prevN_Params]

// NewCapHistoryCursor_prevN_Params creates a new list of CapHistoryCursor_prevN_Params.
func NewCapHistoryCursor_prevN_Params_List(s *capnp.Segment, sz int32) (CapHistoryCursor_prevN_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CapHistoryCursor_prevN_Params](l), err
}

// CapHistoryCursor_prevN_Params_Future is a wrapper for a CapHistoryCursor_prevN_Params promised by a client call.
type CapHistoryCursor_prevN_Params_Future struct{ *capnp.Future }

func (f CapHistoryCursor_prevN_Params_Future) Struct() (CapHistoryCursor_prevN_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_prevN_Params(p.Struct()), err
}

type CapHistoryCursor_prevN_Results capnp.Struct

// CapHistoryCursor_prevN_Results_TypeID is the unique identifier for the type CapHistoryCursor_prevN_Results.
const CapHistoryCursor_prevN_Results_TypeID = 0xb1731fa2fac2190d

func NewCapHistoryCursor_prevN_Results(s *capnp.Segment) (CapHistoryCursor_prevN_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_prevN_Results(st), err
}

func NewRootCapHistoryCursor_prevN_Results(s *capnp.Segment) (CapHistoryCursor_prevN_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_prevN_Results(st), err
}

func ReadRootCapHistoryCursor_prevN_Results(msg *capnp.Message) (CapHistoryCursor_prevN_Results, error) {
	root, err := msg.Root()
	return CapHistoryCursor_prevN_Results(root.Struct()), err
}

func (s CapHistoryCursor_prevN_Results) String() string {
	str, _ := text.Marshal(0xb1731fa2fac2190d, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_prevN_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_prevN_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_prevN_Results {
	return CapHistoryCursor_prevN_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_prevN_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_prevN_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_prevN_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_prevN_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_prevN_Results) Batch() (ThingValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue_List(p.List()), err
}

func (s CapHistoryCursor_prevN_Results) HasBatch() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryCursor_prevN_Results) SetBatch(v ThingValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewBatch sets the batch field to a newly
// allocated ThingValue_List, preferring placement in s's segment.
func (s CapHistoryCursor_prevN_Results) NewBatch(n int32) (ThingValue_List, error) {
	l, err := NewThingValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ThingValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CapHistoryCursor_prevN_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapHistoryCursor_prevN_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapHistoryCursor_prevN_Results_List is a list of CapHistoryCursor_prevN_Results.
type CapHistoryCursor_prevN_Results_List = capnp.StructList[CapHistoryCursor_prevN_Results]

// NewCapHistoryCursor_prevN_Results creates a new list of CapHistoryCursor_prevN_Results.
func NewCapHistoryCursor_prevN_Results_List(s *capnp.Segment, sz int32) (CapHistoryCursor_prevN_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryCursor_prevN_Results](l), err
}

// CapHistoryCursor_prevN_Results_Future is a wrapper for a CapHistoryCursor_prevN_Results promised by a client call.
type CapHistoryCursor_prevN_Results_Future struct{ *capnp.Future }

func (f CapHistoryCursor_prevN_Results_Future) Struct() (CapHistoryCursor_prevN_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_prevN_Results(p.Struct()), err
}

type CapHistoryCursor_seek_Params capnp.Struct

// CapHistoryCursor_seek_Params_TypeID is the unique identifier for the type CapHistoryCursor_seek_Params.
const CapHistoryCursor_seek_Params_TypeID = 0xc3ef318bca0bb7b4

func NewCapHistoryCursor_seek_Params(s *capnp.Segment) (CapHistoryCursor_seek_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryCursor_seek_Params(st), err
}

func NewRootCapHistoryCursor_seek_Params(s *capnp.Segment) (CapHistoryCursor_seek_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHistoryCursor_seek_Params(st), err
}

func ReadRootCapHistoryCursor_seek_Params(msg *capnp.Message) (CapHistoryCursor_seek_Params, error) {
	root, err := msg.Root()
	return CapHistoryCursor_seek_Params(root.Struct()), err
}

func (s CapHistoryCursor_seek_Params) String() string {
	str, _ := text.Marshal(0xc3ef318bca0bb7b4, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_seek_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_seek_Params) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_seek_Params {
	return CapHistoryCursor_seek_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_seek_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_seek_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_seek_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_seek_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_seek_Params) IsoTimestamp() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapHistoryCursor_seek_Params) HasIsoTimestamp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryCursor_seek_Params) IsoTimestampBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapHistoryCursor_seek_Params) SetIsoTimestamp(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapHistoryCursor_seek_Params_List is a list of CapHistoryCursor_seek_Params.
type CapHistoryCursor_seek_Params_List = capnp.StructList[CapHistoryCursor_seek_Params]

// NewCapHistoryCursor_seek_Params creates a new list of CapHistoryCursor_seek_Params.
func NewCapHistoryCursor_seek_Params_List(s *capnp.Segment, sz int32) (CapHistoryCursor_seek_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryCursor_seek_Params](l), err
}

// CapHistoryCursor_seek_Params_Future is a wrapper for a CapHistoryCursor_seek_Params promised by a client call.
type CapHistoryCursor_seek_Params_Future struct{ *capnp.Future }

func (f CapHistoryCursor_seek_Params_Future) Struct() (CapHistoryCursor_seek_Params, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_seek_Params(p.Struct()), err
}

type CapHistoryCursor_seek_Results capnp.Struct

// CapHistoryCursor_seek_Results_TypeID is the unique identifier for the type CapHistoryCursor_seek_Results.
const CapHistoryCursor_seek_Results_TypeID = 0x88f56e7efe394a20

func NewCapHistoryCursor_seek_Results(s *capnp.Segment) (CapHistoryCursor_seek_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_seek_Results(st), err
}

func NewRootCapHistoryCursor_seek_Results(s *capnp.Segment) (CapHistoryCursor_seek_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapHistoryCursor_seek_Results(st), err
}

func ReadRootCapHistoryCursor_seek_Results(msg *capnp.Message) (CapHistoryCursor_seek_Results, error) {
	root, err := msg.Root()
	return CapHistoryCursor_seek_Results(root.Struct()), err
}

func (s CapHistoryCursor_seek_Results) String() string {
	str, _ := text.Marshal(0x88f56e7efe394a20, capnp.Struct(s))
	return str
}

func (s CapHistoryCursor_seek_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapHistoryCursor_seek_Results) DecodeFromPtr(p capnp.Ptr) CapHistoryCursor_seek_Results {
	return CapHistoryCursor_seek_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapHistoryCursor_seek_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapHistoryCursor_seek_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapHistoryCursor_seek_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapHistoryCursor_seek_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapHistoryCursor_seek_Results) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapHistoryCursor_seek_Results) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapHistoryCursor_seek_Results) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapHistoryCursor_seek_Results) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CapHistoryCursor_seek_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapHistoryCursor_seek_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapHistoryCursor_seek_Results_List is a list of CapHistoryCursor_seek_Results.
type CapHistoryCursor_seek_Results_List = capnp.StructList[CapHistoryCursor_seek_Results]

// NewCapHistoryCursor_seek_Results creates a new list of CapHistoryCursor_seek_Results.
func NewCapHistoryCursor_seek_Results_List(s *capnp.Segment, sz int32) (CapHistoryCursor_seek_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapHistoryCursor_seek_Results](l), err
}

// CapHistoryCursor_seek_Results_Future is a wrapper for a CapHistoryCursor_seek_Results promised by a client call.
type CapHistoryCursor_seek_Results_Future struct{ *capnp.Future }

func (f CapHistoryCursor_seek_Results_Future) Struct() (CapHistoryCursor_seek_Results, error) {
	p, err := f.Future.Ptr()
	return CapHistoryCursor_seek_Results(p.Struct()), err
}
func (p CapHistoryCursor_seek_Results_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

const schema_f1bd301f7c12caab = "x\xda\xccY}pT\xd5\x15?\xe7\xbd\x0d/!\x9b" +
	"\xdd\xbdy\x9bT\x90\xcc\x02M\x15\x99\x01I\"\xd2\xa4" +
	"\xeaF\x02cL\x09\xe6%:#\x8eL\xfb\x92<\x93" +
	"\x07\xc9\xee\xb2o\x13\x82c\xc00 \xc4\x0e\xed@\x09" +
	"\x95`F\xa0\xb5*H\x05\x0b\xa5`\x19\x85\x8a)\x0c" +
	"-\x1f\xad:v\xd0:ZTb\x91\x8fi\x84\x16a" +
	";\xf7\xbe\xbd\xbbo7\x1b6\x81Z\xfbW\x92w\xcf" +
	"\xbd\xe7\x9c\xdf=\x1f\xbfs3\xa5_*\xb5\x15d\xdd" +
	"'\x83\xa0|\x986\"\\\xe4^3u\xdb\xfb\xb7w" +
	"\x00\xc9\xb1\x85\xb7\x1e\xce~\xc23e\xdfy\x00,\xea" +
	"\xcc\x98\x8e\xf2\xfa\x0c\x09\xa0fm\x86\x885\x1b3\x04" +
	"\x04\x08\x8f\xf1\xaej[\xd5\xb3v)(9\x88\xb1\x0d" +
	"i6\x09\xa0\xa8+c<\xca\xcf\xd3=E\x9b2<" +
	"\x08\x18>\xf0\xa7\x15\x9f=4\xcd\xbb\x0c\xc8\x04\x04H" +
	"C\xbatz\xe4a\x04\x94\xaf\x8c\xf4\x02\x86\xc7V\x14" +
	"_]\xec\xeb_\x09\xca-\x18\x95\xc8\xcb\xec\xa6\x12\x93" +
	"2\x17\x02\x86\xcf\x1d\xba\xc7k\x13\xeex\x1a\xc8\xadQ" +
	"\x81\xce\xcc\x0bT\xa0'\x93\x1e\xf1\xe1\xf7F\xf4N{" +
	"\xa3\xe2\xa7@r\xc48\x17\xf6e\x96\xa0\xfc\xc7L\x09" +
	"@>\x94\xd9++v\x09 \xfc\xf1\x13\xbe\xee\x8e\x0d" +
	"\xfdkM\x8b\x98\xd9\xc5\xf6\xc3\x08\xb6\xf0\xb4\x1a\xcf\xbb" +
	"\xdaS9]@\xbe\xcdW&\xd9\xb7\xd0\x95\x13\x8f." +
	"\xf7?\xbd\xbf\xe4Y\xcbJ\x9e}3]\xe9\x10\xde?" +
	"\xa5\xbfP\xdb3@w\x96\xbd\x10\xe5<\xaa\xb1h\x94" +
	"\xbd\x17\xe5\x82,\xaa<\xa7\xd8\xd3\xff\xc8]\xf3{\x80" +
	"\xe4G}\x19\x95\xf5\x11s6\x8b\xfa2\xed\xe8\xc9\xfc" +
	"3\xcb\xe4\xe7\xe2\xe0\xa8\xccbp\xcc\xcdZ\x08xv" +
	"a\xb5\xff\xb9W\xbf\xfa\xa5\xb9\xceL\xd9c.\x1fb" +
	"\x07\xbc\xf4BI\x9e1\xb6\xef%\xab\x86\xd3Y'\x18" +
	"\xe0L`\x1e\x19\xedy\xd0?b\x8b\xc5\x97\x02\x07\xf3" +
	"r\xec\x03-\xbf\xb8y\xe5{\xdb\x06\xf82\xce1\x1e" +
	"\xe5\x02\x07\xc5q\x92c\x85\xbc\x9c\xfev\xe5\x8bU\x05" +
	"\x8f^>\xf3\xabD\xd9f\xc7h\x94\xdb\x99\xec\"G" +
	"\xaf|\x85\xfe\x16\xce\x1au\xe0\xdf\x9b=\xc6\x8e8\xaf" +
	"N96S\xab\xfa\x1d\xf4\x923\xb6n\x1d\xbd\xd7\xbe" +
	"\xf9\xd7\xa6U\xa6\x80\xead\x02\x0b\x9c^\xc0\xd7m?" +
	"\xf8\xc33\xc7^\xddiz%\xb2\x08s\xfe\x95.\xef" +
	"r\xbe\x02\x18\xbe\xdcV\xb1\xe7\xdc\xfeg~3 \x8c" +
	"\x15\xd7t\x94U\x17\x0d\xe3G]\"\xd64\xbaX\x18" +
	"Kg\xfb6\xf6\xcd\xbf\xb8\xd7\x12\x05\xaak\xa2\x00\xb6" +
	"\xf0\xa7\xcb=\x93\xc7\xcd}\xf75P&D\x11\x9e\xe3" +
	"b\x006\xbb(\x80\x97\xee\xfb\xfe\xcfz?\xeb\xdb\x07" +
	"\xe4\x16\xbe\xbe\xda\xb5\x86\x02\xb8sw\xe6\xe1\x1f\x15\x9c" +
	"\xfd\xbd\xb9b:\xd1A\x97P^\xcd\xb6N}\xf9\xe4" +
	"\x89\x92\xbc\x1f\xbf\x15\x87\xc3.\x17\xbb\xbe\x83.\x8a\x83" +
	"\xd1\xa3\xfc\xed\xcb\xf4+oY\x0e\x1fG\xd8\xe1\x0f\x1c" +
	"v7\xcd\xfa\xf2\xa9C\x96\x15b\xae\xdcy\xc7\x9d\xe5" +
	"\x05\xbb\xf5#`\x01\x07\x09\xcb\xb1\x1cB\xc1\xd9\xb8\xeb" +
	"\xea-+\xaf\x8e>j\xd9\xba\x9ft\xd3\xad\x1b\xd7\xb9" +
	"\xca.\xbe\xf6\xc3\xa3\xd6\xf4\xdcA\xc6\x0b4\x9c\x08\xb5" +
	"\xb8aJ\xcd\x9122\xfbX\\\xfe\x92\x91T\x00\xb3" +
	"\xa9\x80\xf7\xf3KK\xb6\xfcd\xe1\x09\xab\xc0\xb8\xecl" +
	"*P\xcc\x04\xba^\xb9\xa7\xabq]\xe7\x9f\xad7;" +
	"'\x9b\xb9\xac3\x81\x09\x8fx\x97w\x1d\x98\xf7w\xb0" +
	"\x84t\xa7)\xb0\x9e\x09|k\xea\xa8\x0f\xfa\x0e\xba>" +
	"\xb1\x16\x80=\xa6\x8a\xe3L@\xb8u\xb9s\xb1\xb1\xf8" +
	"SPn\x8d\xc1z>\x9b\xa5U\x9aLa\xbd\xa9\x7f" +
	"g\xfdC\xd3F\x9e\x1e\x10\x1e\xba\\\x8br\xbbL\xc3" +
	"\xa3M\x16\xb1f\x99\xcc\xc2\xa3{\xe9\xeb\x8f\xed\xf5|" +
	"\xd0g\xf5\xaaCfA\xd0%S\x95\xb9W??7" +
	"\xf3\x94\xfb\x1f\x03\x0e<(\x97\xa0\xfc6;\xf0\x18=" +
	"\xf0\xa4y\xe0\xe9\xbb\xf6\x1eR\xb7/\xfc\"\xee\xe6\xdf" +
	"\x96Y\x80\x9fb&N} \xf0\xa2v\xf6\xe7\xe7\xad" +
	"*\x157CZwS\x95\xc7\x17l0Vh\xe9\x17" +
	"\x06\xa4g\xa7\x9bVj7+\xc0\xee\xfbPn\xcf\xa1" +
	"9\xb7)C\x95*g\x1f\xbb`\xc5]\xcba\x0a[" +
	"r\xe8y\xd2\xc8\x87/\xef\x7f\xd3\xf8g\x9cI]\xa6" +
	"\xc4\xf39\xd4\xa4\x99\x17z\xdfy\xb8\xf2\xe6~+\xf0" +
	"\x98\xdb\xc7\x02+\x97\x1e\xb1o\xedG\x97v\xf5\x8d\xb9" +
	"h\x15(\xcee6+L\xa0}\xec\xef\xd4\xa21\xa7" +
	"\xffeI\xb3\x96\xdcl\x9af;\xae\xeej\xc8}y" +
	"\xeeWq\xda\x9bs\xd9\xb5\xb7\xe7R\xed;?\xde\xba" +
	"}\xeb\xee\xbf\x84\xad\x87\xbfgj?\x93\xeb\x85\xb2p" +
	"cK\xad\x1a\xd0o/\xb7\xe9F\xc8\x1f\\4\xb9N" +
	"\x0d\xf8\x02%\x8d\xe6_5Z\xb0U\xaf\xd3f\xab\xcd" +
	"\x1aT!\xa2\x1d\x04\xb4\x03\x10\x9c\xbe$\"\x11\xdd/" +
	"\xc6\xed\x9f\xd9\xaa\xf9B\xd5ZH\xf3\x85$\xdd\xef\xab" +
	"BT\xdc\xa2\x0d\xc0\x86\x00\xa4}\"\x80\xd2&\xa2\xb2" +
	"L@\x82\xe8\xa6\xa6\x93\x8eG\x00\x94'ET\x9e\x15" +
	"\x90\x08\x82\x1b\x05\x00\xb2\xbe\x04@Y+\xa2\xb2]@" +
	"\"\x8an\x14\x01\xc8\xb6\xe9\x00\xca\x8b\"*o\x0a\x88" +
	"67\xda\x00\xc8\xfe \x80\xf2\x86\x88\xca\x11\x01\x9d>" +
	"\xb5Y\x8b\x98\x8a\xe1@Km\x93n4j \x06\x0d" +
	"t\x00V\x89\xa6\x1b\x0e@o\xa8Q\xf75$~]" +
	"\xa2\xb5\xd55\xb5\xd4k\x09\x9f\xc3A\xe6\x8d\xee\x07\x8f" +
	"o\x86\xba\xc8@\x1b\x08h\x03\x8c\x020\"\x0e\x802" +
	"5P\xa9\xfa\xd4\x06\xad:\xb2\xcd79\xa4\x19!\x86" +
	"K~\x95\x1aT\x9b\x0d\x00\xc5\x16\xc5$k4\x80\x92" +
	".\xa2\xe2\x16P\x0c\xb5\xa2+\xbc\xe6\xc9u\xbf\xed\xf9" +
	"\xe4\x9d\x0d\x00\x88.\x8b\x9e\xb4D=\xe5\xe6\x87\xb2\x96" +
	"\xa0\xe1\x0fN64m~~\xb5f\xb44\x89!C" +
	"I\x8f*\xb8\x8d*\xc8\x17Q\x99\" \xc7|R!" +
	"\x802AD\xe5\x8eA\x94zZ\xd5&\xbd\x1e\x11\x04" +
	"\xc4k\xb9Z\x1e\x17.\xf4{\xb5\xa6\xd6G\xbe\xe6W" +
	"k\x1e\xa3\xa5)dX\xdd\x1d\x1fsW\xaaS\x03H" +
	"b\x8d\x13\x10\x89E\x998\x982\xaf\xa9\x8d\xc6\x96]" +
	"L\x03\x88V0\xe4AO\x94 \x08\xe4~\x09cI" +
	"\x86\xbc\x0e\x92\xbb\xbbA \xc5\x12\x0a\xd1\x0cEN\x92" +
	"\xc8\xa4\xc7A \xdf\x91\xc2uj\xe0\xde\xfa\xfar\x1d" +
	"<Le)\xd2/\xec^\x91_\xac\xe8\xf7\x99\x9f\x99" +
	"\xc7\xe0\xd5#\x92U8\x8c\xd0h\xd0\xcc\xc80\xa2\xa1" +
	"1\xf8u3\x83\xccoj}}d[\xb5f8)" +
	"\xc4\xc3\xda\xc6\xc2D\xb2\xee\x1a\x0c\xeb2\x0f\x0b.\x0a" +
	"\xf5\x18\x065o\x86\xc8\xeb\x1f9^\x08\x029H\xa1" +
	"\xe6=\x169\x0d#{&\x82@\xb6Q\xa8y\xdbG" +
	"^\xb9\xc8&\xba\xd6%\xa1\x18ma\xc8\xcb<\xe9\xa4" +
	"g\xb6Kh\x8bvt\xe4\xcd\x9f,\xa0\xfb4\x09\xd3" +
	"8\x97\x8b\xf1#2\x87\xee\xab\x94pD\x94L g" +
	"\xc8\xe4^\xbao\xaa\xe4yL\x0f\x1a\xa1Rt6\xa9" +
	"\xec\x87Ok\x0b\x95\xa2\x87\xfe\x98]\x8a\xce@Pk" +
	"-E\x0f\xfdA\xff\xa4I\x95\xe2J-\x01\x1f\xbd\xce" +
	"X\x02\x988[\x13\xa0$\x96\x00\xde:\x86.\x92\x18" +
	"\x11N\xc8\x81\x149O}\xf8\xbas>\x85\x09\x0c)" +
	"\x16\xbdbs\x9c\x9f\x851?=FH\x0b\x18\x98\x0e" +
	"\x02\xa6\xc3\xd0\xa1\xac\x0a\xfa\x03Z0\xa4k\x86\xe9c" +
	"\x08\xe3\x14T\x03(v\x11\x95\x09\x02\x86[\xd5\xa6\x16" +
	"m\x96n\x00\x86x\xf9\x8e\xf7\xcfq-\x8f\xe2S\xe4" +
	"\xde:\x9a\x9a\x033K\x1c\xcc\\\xc9\x1f\\D3$" +
	"\x9df\x08\xa7\xda\x96a\xa5`)\x08\xe46\x9a!\x9c" +
	"k\"\x9f3H\x1e-T9R\x98G\x0eF\x0c\x81" +
	"R\x0cs\x08\xc0\xc3@\x88\x8fCq0'D\xd3\x18" +
	"\xb32r\x1a\x83|n!J5\xaf\x8c\x9cZ\"\x9f" +
	"\xcf\xc8\xdd\x15,EP\x88\x0e\x14\xc8\xa7:r\x1b\xdd" +
	"7N\x0as\x80\x00i\xf9\xe3\x15\x05\x00\xac\x7fa\x82" +
	"\xb1C\x8a\xa1h\xb2X\xe2\xb80\x12\xc7\xa5\xb18\xbe" +
	"\x9b~\xfb\xae\x88\xca\x0c\x01=\xb5j\xa8\xaeq\xd0\x1b" +
	"\x1fjD'\xad\xacUjPR\xe3C\x9a\xb7\xea|" +
	"3\x83R\x06\xda\xb0j\x05O!{T\xdf\xccZ\x00" +
	"e\x86\x88J\x95\x85.UR\x12T.\xa2\xf2\xa0\x85" +
	".)\x94X\xcd\x12QyX\xb0\x10\x1f)x\xff\x0c" +
	"N\x87\x960\xca\x13\xfb;\x9e+%\xe7\x82uj\x80" +
	"\x12@\x8b\xd1\xf1\\\xf0\xf1\x01\xdd/z\x90\x94\xaa\xf1" +
	"\x05\xb5f\x7f\xabfa\x8bISn\x18\xd4*Y\x85" +
	"\xa8\x88T\x88\x9b\x04\xc6\xe2T\xdd\xa7\xd5\x03\xbd\xa4\xe1" +
	"\x958\xda\x1b\xcc\xfe\x8c\xc6\xb0\xd8Xd\x8f\xd5\xa4y" +
	"\x16\x93t\xc3\xff\xa0\xde\xac\x19\xe0\x0c\xa9\xcd\x81\x01\x97" +
	"1\x84\xa4\xf9?\xa8\xfd\xc3\x05\x86\xb5\xac\xc4=\xc3\xe8" +
	"\x04Q\x0a}]yR\x18\xc9\x93\xc6\xa1\xe6\x89\x87\xe6" +
	"I\xe2\xa40T_\x19\xd5\xe0\x89}\x83\xb9\x91\xa4\x1c" +
	"M\x8cu\xd8\xe4\xe9,\x0d\x95~\xc6\xa9\x190\xa1|" +
	"\x1dz\x92\xa5\xabu4\x08j!t\xc5\x9eKS\x8d" +
	"B\xc9Hn\x12N\xf2\xdf\x9a\xb5\x18[\xbc>\xd2#" +
	"\xa5\x1e\xa1\x12\xd0K\x89\x959FE\x1f8\x12(\xe4" +
	"\x10f\xb6\x18z\xd10\xb3\xd4\x93\x8aX\xed\xe0\xc9U" +
	"\xb0\x14@\x99\"\xa2r\x97\x80\xe1\xba&]\xf3\x85\xee" +
	"\x9fA++\x8f\x0c\xbd\xc1\xe7\x0fj\xd5\x1aF|\x18" +
	"Xs\x93\xb6\x1a\xab\xe7\x91\xe7\x83X\xbb\xe9N:\x83" +
	"]\xcf\xac\x95\x0c\xd0\xe9\xb1\xde\xbe$\xa8\x85f\xe9\x86" +
	"\x85IZ\xe3\xd01\xe8\x88\x1aq\x82\xa2\x19\xe9\x87q" +
	"\xf6\x07\x13\xa7\xca\xe1E\xdb\xff\x8c\x1e\xa5\xccfcH" +
	"Uc\xe8\xd9lK\xa1\x10\xccW\xa44\xcb\xbf\x1f\x90" +
	"?1\x92\xd5\x94\x97vR>\xcb\x1f[\x91?\xaa\x92" +
	"\xf65 \x90E\x94\xcf\xf2\x97Z\xe4/\xd7\xa4y\x0b" +
	"\x08D\xa7\xe3'\x7f:D\xfe\xdcF\xe6\xd2}s\xe8" +
	"\xf8\xc9\xff\x01\x83\xfc]\x9bTR}3c\x84\x9dq" +
	"\xdd\x18}\xe7F3v\xcc\x0b9r\xb0\x9c\xd4\x9dR" +
	"\x0c\x1bI\xc59\x99\x01\x0c\xa5\xa0\xcfI\x07\x96k\x10" +
	"\xd6\x1b\xadwf#K\x16\x81\xdf\xdc\xe3R\x95\xea\x0c" +
	"&\xb8k\xe5{\xc9\xaa\xd2\x0d\xd4\xe0d\x11~\xdd\xea" +
	"R'\x14\xafP\xc3\xa2\xa8\xdf\xfc\xe3\x9f\xa5\x91p." +
	"\x7f\xcd\xa6\xc5\xff\x0df\xb6\xac\xff\x04\x00\x00\xff\xff\xc5" +
	"(\x8d\xba"

func init() {
	schemas.Register(schema_f1bd301f7c12caab,
		0x812fddad35921433,
		0x82949d8d788d3f1c,
		0x843f3755e887cec2,
		0x88f56e7efe394a20,
		0x8a3402043f3ec9f0,
		0x934ac037c7063be0,
		0x94f59b819a6e7ce3,
		0x95158665d71f5337,
		0x9c3ac18a6f855cd2,
		0x9d62a769e5dd0281,
		0x9d6b3c5af51f3915,
		0x9f1384ed24dccf37,
		0xa6fcb2009f6f5277,
		0xa9ea20731d3aa7a9,
		0xaa066f541f1a116a,
		0xadd9881ba4754f20,
		0xaeedfb5c318d00ee,
		0xb1731fa2fac2190d,
		0xb3a20cba1aabab09,
		0xb400b2d098c85f04,
		0xb698c1f0b94a78fb,
		0xbaf76beaa0eaef07,
		0xbbd75d212e1f85e7,
		0xbdeae8c7974b47f8,
		0xc3ef318bca0bb7b4,
		0xc68e1d3ad2dcac35,
		0xc6fd08f6df519d73,
		0xc986f64c6c14ca4f,
		0xcc69b73148363436,
		0xcf1afe8826feb5a0,
		0xcf60bbf7431096a0,
		0xd04e1143cc533067,
		0xd2778faa7ff8eb3f,
		0xd3899668953eaf95,
		0xe46ac295853f5a28,
		0xe610c5eade193517,
		0xe77e737e0f852702,
		0xe90a375564b4f518,
		0xeade1fba66bf829a,
		0xec14e545f0ebfe16,
		0xee77b061c9ba3ce9,
		0xf1a3ef65a8704f35,
		0xf2086587739b71d1,
		0xf2d04e4d076109a1,
		0xf473c4c1fb580a07,
		0xf51b4d58d6c7f245,
		0xf71ceab5f8e294bd,
		0xf9e91c3361bc207d,
		0xfc5dac1667b5feb1,
		0xffd4b7abb0abe3b4)
}

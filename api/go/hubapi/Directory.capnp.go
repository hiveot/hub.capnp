// Code generated by capnpc-go. DO NOT EDIT.

package hubapi

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

// Constants defined in Directory.capnp.
const (
	DirectoryServiceName   = "directory"
	CapNameReadDirectory   = "capReadDirectory"
	CapNameUpdateDirectory = "capUpdateDirectory"
)

type CapDirectoryService capnp.Client

// CapDirectoryService_TypeID is the unique identifier for the type CapDirectoryService.
const CapDirectoryService_TypeID = 0xfafce17e91651c9d

func (c CapDirectoryService) CapReadDirectory(ctx context.Context, params func(CapDirectoryService_capReadDirectory_Params) error) (CapDirectoryService_capReadDirectory_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfafce17e91651c9d,
			MethodID:      0,
			InterfaceName: "hubapi/Directory.capnp:CapDirectoryService",
			MethodName:    "capReadDirectory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDirectoryService_capReadDirectory_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDirectoryService_capReadDirectory_Results_Future{Future: ans.Future()}, release
}
func (c CapDirectoryService) CapUpdateDirectory(ctx context.Context, params func(CapDirectoryService_capUpdateDirectory_Params) error) (CapDirectoryService_capUpdateDirectory_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfafce17e91651c9d,
			MethodID:      1,
			InterfaceName: "hubapi/Directory.capnp:CapDirectoryService",
			MethodName:    "capUpdateDirectory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDirectoryService_capUpdateDirectory_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDirectoryService_capUpdateDirectory_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapDirectoryService) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapDirectoryService) AddRef() CapDirectoryService {
	return CapDirectoryService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapDirectoryService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapDirectoryService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapDirectoryService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapDirectoryService) DecodeFromPtr(p capnp.Ptr) CapDirectoryService {
	return CapDirectoryService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapDirectoryService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapDirectoryService) IsSame(other CapDirectoryService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapDirectoryService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapDirectoryService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapDirectoryService_Server is a CapDirectoryService with a local implementation.
type CapDirectoryService_Server interface {
	CapReadDirectory(context.Context, CapDirectoryService_capReadDirectory) error

	CapUpdateDirectory(context.Context, CapDirectoryService_capUpdateDirectory) error
}

// CapDirectoryService_NewServer creates a new Server from an implementation of CapDirectoryService_Server.
func CapDirectoryService_NewServer(s CapDirectoryService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapDirectoryService_Methods(nil, s), s, c)
}

// CapDirectoryService_ServerToClient creates a new Client from an implementation of CapDirectoryService_Server.
// The caller is responsible for calling Release on the returned Client.
func CapDirectoryService_ServerToClient(s CapDirectoryService_Server) CapDirectoryService {
	return CapDirectoryService(capnp.NewClient(CapDirectoryService_NewServer(s)))
}

// CapDirectoryService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapDirectoryService_Methods(methods []server.Method, s CapDirectoryService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfafce17e91651c9d,
			MethodID:      0,
			InterfaceName: "hubapi/Directory.capnp:CapDirectoryService",
			MethodName:    "capReadDirectory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapReadDirectory(ctx, CapDirectoryService_capReadDirectory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfafce17e91651c9d,
			MethodID:      1,
			InterfaceName: "hubapi/Directory.capnp:CapDirectoryService",
			MethodName:    "capUpdateDirectory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapUpdateDirectory(ctx, CapDirectoryService_capUpdateDirectory{call})
		},
	})

	return methods
}

// CapDirectoryService_capReadDirectory holds the state for a server call to CapDirectoryService.capReadDirectory.
// See server.Call for documentation.
type CapDirectoryService_capReadDirectory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapDirectoryService_capReadDirectory) Args() CapDirectoryService_capReadDirectory_Params {
	return CapDirectoryService_capReadDirectory_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapDirectoryService_capReadDirectory) AllocResults() (CapDirectoryService_capReadDirectory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapDirectoryService_capReadDirectory_Results(r), err
}

// CapDirectoryService_capUpdateDirectory holds the state for a server call to CapDirectoryService.capUpdateDirectory.
// See server.Call for documentation.
type CapDirectoryService_capUpdateDirectory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapDirectoryService_capUpdateDirectory) Args() CapDirectoryService_capUpdateDirectory_Params {
	return CapDirectoryService_capUpdateDirectory_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapDirectoryService_capUpdateDirectory) AllocResults() (CapDirectoryService_capUpdateDirectory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapDirectoryService_capUpdateDirectory_Results(r), err
}

// CapDirectoryService_List is a list of CapDirectoryService.
type CapDirectoryService_List = capnp.CapList[CapDirectoryService]

// NewCapDirectoryService creates a new list of CapDirectoryService.
func NewCapDirectoryService_List(s *capnp.Segment, sz int32) (CapDirectoryService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapDirectoryService](l), err
}

type CapDirectoryService_capReadDirectory_Params capnp.Struct

// CapDirectoryService_capReadDirectory_Params_TypeID is the unique identifier for the type CapDirectoryService_capReadDirectory_Params.
const CapDirectoryService_capReadDirectory_Params_TypeID = 0xe00ca908014ee7a5

func NewCapDirectoryService_capReadDirectory_Params(s *capnp.Segment) (CapDirectoryService_capReadDirectory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapDirectoryService_capReadDirectory_Params(st), err
}

func NewRootCapDirectoryService_capReadDirectory_Params(s *capnp.Segment) (CapDirectoryService_capReadDirectory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapDirectoryService_capReadDirectory_Params(st), err
}

func ReadRootCapDirectoryService_capReadDirectory_Params(msg *capnp.Message) (CapDirectoryService_capReadDirectory_Params, error) {
	root, err := msg.Root()
	return CapDirectoryService_capReadDirectory_Params(root.Struct()), err
}

func (s CapDirectoryService_capReadDirectory_Params) String() string {
	str, _ := text.Marshal(0xe00ca908014ee7a5, capnp.Struct(s))
	return str
}

func (s CapDirectoryService_capReadDirectory_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDirectoryService_capReadDirectory_Params) DecodeFromPtr(p capnp.Ptr) CapDirectoryService_capReadDirectory_Params {
	return CapDirectoryService_capReadDirectory_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDirectoryService_capReadDirectory_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDirectoryService_capReadDirectory_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDirectoryService_capReadDirectory_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDirectoryService_capReadDirectory_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDirectoryService_capReadDirectory_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapDirectoryService_capReadDirectory_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDirectoryService_capReadDirectory_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapDirectoryService_capReadDirectory_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapDirectoryService_capReadDirectory_Params_List is a list of CapDirectoryService_capReadDirectory_Params.
type CapDirectoryService_capReadDirectory_Params_List = capnp.StructList[CapDirectoryService_capReadDirectory_Params]

// NewCapDirectoryService_capReadDirectory_Params creates a new list of CapDirectoryService_capReadDirectory_Params.
func NewCapDirectoryService_capReadDirectory_Params_List(s *capnp.Segment, sz int32) (CapDirectoryService_capReadDirectory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapDirectoryService_capReadDirectory_Params](l), err
}

// CapDirectoryService_capReadDirectory_Params_Future is a wrapper for a CapDirectoryService_capReadDirectory_Params promised by a client call.
type CapDirectoryService_capReadDirectory_Params_Future struct{ *capnp.Future }

func (f CapDirectoryService_capReadDirectory_Params_Future) Struct() (CapDirectoryService_capReadDirectory_Params, error) {
	p, err := f.Future.Ptr()
	return CapDirectoryService_capReadDirectory_Params(p.Struct()), err
}

type CapDirectoryService_capReadDirectory_Results capnp.Struct

// CapDirectoryService_capReadDirectory_Results_TypeID is the unique identifier for the type CapDirectoryService_capReadDirectory_Results.
const CapDirectoryService_capReadDirectory_Results_TypeID = 0x9a23234217146e4c

func NewCapDirectoryService_capReadDirectory_Results(s *capnp.Segment) (CapDirectoryService_capReadDirectory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapDirectoryService_capReadDirectory_Results(st), err
}

func NewRootCapDirectoryService_capReadDirectory_Results(s *capnp.Segment) (CapDirectoryService_capReadDirectory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapDirectoryService_capReadDirectory_Results(st), err
}

func ReadRootCapDirectoryService_capReadDirectory_Results(msg *capnp.Message) (CapDirectoryService_capReadDirectory_Results, error) {
	root, err := msg.Root()
	return CapDirectoryService_capReadDirectory_Results(root.Struct()), err
}

func (s CapDirectoryService_capReadDirectory_Results) String() string {
	str, _ := text.Marshal(0x9a23234217146e4c, capnp.Struct(s))
	return str
}

func (s CapDirectoryService_capReadDirectory_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDirectoryService_capReadDirectory_Results) DecodeFromPtr(p capnp.Ptr) CapDirectoryService_capReadDirectory_Results {
	return CapDirectoryService_capReadDirectory_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDirectoryService_capReadDirectory_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDirectoryService_capReadDirectory_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDirectoryService_capReadDirectory_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDirectoryService_capReadDirectory_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDirectoryService_capReadDirectory_Results) Cap() CapReadDirectory {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapReadDirectory(p.Interface().Client())
}

func (s CapDirectoryService_capReadDirectory_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDirectoryService_capReadDirectory_Results) SetCap(v CapReadDirectory) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapDirectoryService_capReadDirectory_Results_List is a list of CapDirectoryService_capReadDirectory_Results.
type CapDirectoryService_capReadDirectory_Results_List = capnp.StructList[CapDirectoryService_capReadDirectory_Results]

// NewCapDirectoryService_capReadDirectory_Results creates a new list of CapDirectoryService_capReadDirectory_Results.
func NewCapDirectoryService_capReadDirectory_Results_List(s *capnp.Segment, sz int32) (CapDirectoryService_capReadDirectory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapDirectoryService_capReadDirectory_Results](l), err
}

// CapDirectoryService_capReadDirectory_Results_Future is a wrapper for a CapDirectoryService_capReadDirectory_Results promised by a client call.
type CapDirectoryService_capReadDirectory_Results_Future struct{ *capnp.Future }

func (f CapDirectoryService_capReadDirectory_Results_Future) Struct() (CapDirectoryService_capReadDirectory_Results, error) {
	p, err := f.Future.Ptr()
	return CapDirectoryService_capReadDirectory_Results(p.Struct()), err
}
func (p CapDirectoryService_capReadDirectory_Results_Future) Cap() CapReadDirectory {
	return CapReadDirectory(p.Future.Field(0, nil).Client())
}

type CapDirectoryService_capUpdateDirectory_Params capnp.Struct

// CapDirectoryService_capUpdateDirectory_Params_TypeID is the unique identifier for the type CapDirectoryService_capUpdateDirectory_Params.
const CapDirectoryService_capUpdateDirectory_Params_TypeID = 0xe95ae8838532048d

func NewCapDirectoryService_capUpdateDirectory_Params(s *capnp.Segment) (CapDirectoryService_capUpdateDirectory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapDirectoryService_capUpdateDirectory_Params(st), err
}

func NewRootCapDirectoryService_capUpdateDirectory_Params(s *capnp.Segment) (CapDirectoryService_capUpdateDirectory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapDirectoryService_capUpdateDirectory_Params(st), err
}

func ReadRootCapDirectoryService_capUpdateDirectory_Params(msg *capnp.Message) (CapDirectoryService_capUpdateDirectory_Params, error) {
	root, err := msg.Root()
	return CapDirectoryService_capUpdateDirectory_Params(root.Struct()), err
}

func (s CapDirectoryService_capUpdateDirectory_Params) String() string {
	str, _ := text.Marshal(0xe95ae8838532048d, capnp.Struct(s))
	return str
}

func (s CapDirectoryService_capUpdateDirectory_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDirectoryService_capUpdateDirectory_Params) DecodeFromPtr(p capnp.Ptr) CapDirectoryService_capUpdateDirectory_Params {
	return CapDirectoryService_capUpdateDirectory_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDirectoryService_capUpdateDirectory_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDirectoryService_capUpdateDirectory_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDirectoryService_capUpdateDirectory_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDirectoryService_capUpdateDirectory_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDirectoryService_capUpdateDirectory_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapDirectoryService_capUpdateDirectory_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDirectoryService_capUpdateDirectory_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapDirectoryService_capUpdateDirectory_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapDirectoryService_capUpdateDirectory_Params_List is a list of CapDirectoryService_capUpdateDirectory_Params.
type CapDirectoryService_capUpdateDirectory_Params_List = capnp.StructList[CapDirectoryService_capUpdateDirectory_Params]

// NewCapDirectoryService_capUpdateDirectory_Params creates a new list of CapDirectoryService_capUpdateDirectory_Params.
func NewCapDirectoryService_capUpdateDirectory_Params_List(s *capnp.Segment, sz int32) (CapDirectoryService_capUpdateDirectory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapDirectoryService_capUpdateDirectory_Params](l), err
}

// CapDirectoryService_capUpdateDirectory_Params_Future is a wrapper for a CapDirectoryService_capUpdateDirectory_Params promised by a client call.
type CapDirectoryService_capUpdateDirectory_Params_Future struct{ *capnp.Future }

func (f CapDirectoryService_capUpdateDirectory_Params_Future) Struct() (CapDirectoryService_capUpdateDirectory_Params, error) {
	p, err := f.Future.Ptr()
	return CapDirectoryService_capUpdateDirectory_Params(p.Struct()), err
}

type CapDirectoryService_capUpdateDirectory_Results capnp.Struct

// CapDirectoryService_capUpdateDirectory_Results_TypeID is the unique identifier for the type CapDirectoryService_capUpdateDirectory_Results.
const CapDirectoryService_capUpdateDirectory_Results_TypeID = 0xf4fc53932293ace0

func NewCapDirectoryService_capUpdateDirectory_Results(s *capnp.Segment) (CapDirectoryService_capUpdateDirectory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapDirectoryService_capUpdateDirectory_Results(st), err
}

func NewRootCapDirectoryService_capUpdateDirectory_Results(s *capnp.Segment) (CapDirectoryService_capUpdateDirectory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapDirectoryService_capUpdateDirectory_Results(st), err
}

func ReadRootCapDirectoryService_capUpdateDirectory_Results(msg *capnp.Message) (CapDirectoryService_capUpdateDirectory_Results, error) {
	root, err := msg.Root()
	return CapDirectoryService_capUpdateDirectory_Results(root.Struct()), err
}

func (s CapDirectoryService_capUpdateDirectory_Results) String() string {
	str, _ := text.Marshal(0xf4fc53932293ace0, capnp.Struct(s))
	return str
}

func (s CapDirectoryService_capUpdateDirectory_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDirectoryService_capUpdateDirectory_Results) DecodeFromPtr(p capnp.Ptr) CapDirectoryService_capUpdateDirectory_Results {
	return CapDirectoryService_capUpdateDirectory_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDirectoryService_capUpdateDirectory_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDirectoryService_capUpdateDirectory_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDirectoryService_capUpdateDirectory_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDirectoryService_capUpdateDirectory_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDirectoryService_capUpdateDirectory_Results) Cap() CapUpdateDirectory {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapUpdateDirectory(p.Interface().Client())
}

func (s CapDirectoryService_capUpdateDirectory_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDirectoryService_capUpdateDirectory_Results) SetCap(v CapUpdateDirectory) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapDirectoryService_capUpdateDirectory_Results_List is a list of CapDirectoryService_capUpdateDirectory_Results.
type CapDirectoryService_capUpdateDirectory_Results_List = capnp.StructList[CapDirectoryService_capUpdateDirectory_Results]

// NewCapDirectoryService_capUpdateDirectory_Results creates a new list of CapDirectoryService_capUpdateDirectory_Results.
func NewCapDirectoryService_capUpdateDirectory_Results_List(s *capnp.Segment, sz int32) (CapDirectoryService_capUpdateDirectory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapDirectoryService_capUpdateDirectory_Results](l), err
}

// CapDirectoryService_capUpdateDirectory_Results_Future is a wrapper for a CapDirectoryService_capUpdateDirectory_Results promised by a client call.
type CapDirectoryService_capUpdateDirectory_Results_Future struct{ *capnp.Future }

func (f CapDirectoryService_capUpdateDirectory_Results_Future) Struct() (CapDirectoryService_capUpdateDirectory_Results, error) {
	p, err := f.Future.Ptr()
	return CapDirectoryService_capUpdateDirectory_Results(p.Struct()), err
}
func (p CapDirectoryService_capUpdateDirectory_Results_Future) Cap() CapUpdateDirectory {
	return CapUpdateDirectory(p.Future.Field(0, nil).Client())
}

type CapDirectoryCursor capnp.Client

// CapDirectoryCursor_TypeID is the unique identifier for the type CapDirectoryCursor.
const CapDirectoryCursor_TypeID = 0xb2aec1ed9963584e

func (c CapDirectoryCursor) First(ctx context.Context, params func(CapDirectoryCursor_first_Params) error) (CapDirectoryCursor_first_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2aec1ed9963584e,
			MethodID:      0,
			InterfaceName: "hubapi/Directory.capnp:CapDirectoryCursor",
			MethodName:    "first",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDirectoryCursor_first_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDirectoryCursor_first_Results_Future{Future: ans.Future()}, release
}
func (c CapDirectoryCursor) Next(ctx context.Context, params func(CapDirectoryCursor_next_Params) error) (CapDirectoryCursor_next_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2aec1ed9963584e,
			MethodID:      1,
			InterfaceName: "hubapi/Directory.capnp:CapDirectoryCursor",
			MethodName:    "next",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDirectoryCursor_next_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDirectoryCursor_next_Results_Future{Future: ans.Future()}, release
}
func (c CapDirectoryCursor) NextN(ctx context.Context, params func(CapDirectoryCursor_nextN_Params) error) (CapDirectoryCursor_nextN_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2aec1ed9963584e,
			MethodID:      2,
			InterfaceName: "hubapi/Directory.capnp:CapDirectoryCursor",
			MethodName:    "nextN",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDirectoryCursor_nextN_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDirectoryCursor_nextN_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapDirectoryCursor) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapDirectoryCursor) AddRef() CapDirectoryCursor {
	return CapDirectoryCursor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapDirectoryCursor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapDirectoryCursor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapDirectoryCursor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapDirectoryCursor) DecodeFromPtr(p capnp.Ptr) CapDirectoryCursor {
	return CapDirectoryCursor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapDirectoryCursor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapDirectoryCursor) IsSame(other CapDirectoryCursor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapDirectoryCursor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapDirectoryCursor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapDirectoryCursor_Server is a CapDirectoryCursor with a local implementation.
type CapDirectoryCursor_Server interface {
	First(context.Context, CapDirectoryCursor_first) error

	Next(context.Context, CapDirectoryCursor_next) error

	NextN(context.Context, CapDirectoryCursor_nextN) error
}

// CapDirectoryCursor_NewServer creates a new Server from an implementation of CapDirectoryCursor_Server.
func CapDirectoryCursor_NewServer(s CapDirectoryCursor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapDirectoryCursor_Methods(nil, s), s, c)
}

// CapDirectoryCursor_ServerToClient creates a new Client from an implementation of CapDirectoryCursor_Server.
// The caller is responsible for calling Release on the returned Client.
func CapDirectoryCursor_ServerToClient(s CapDirectoryCursor_Server) CapDirectoryCursor {
	return CapDirectoryCursor(capnp.NewClient(CapDirectoryCursor_NewServer(s)))
}

// CapDirectoryCursor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapDirectoryCursor_Methods(methods []server.Method, s CapDirectoryCursor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2aec1ed9963584e,
			MethodID:      0,
			InterfaceName: "hubapi/Directory.capnp:CapDirectoryCursor",
			MethodName:    "first",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.First(ctx, CapDirectoryCursor_first{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2aec1ed9963584e,
			MethodID:      1,
			InterfaceName: "hubapi/Directory.capnp:CapDirectoryCursor",
			MethodName:    "next",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Next(ctx, CapDirectoryCursor_next{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2aec1ed9963584e,
			MethodID:      2,
			InterfaceName: "hubapi/Directory.capnp:CapDirectoryCursor",
			MethodName:    "nextN",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NextN(ctx, CapDirectoryCursor_nextN{call})
		},
	})

	return methods
}

// CapDirectoryCursor_first holds the state for a server call to CapDirectoryCursor.first.
// See server.Call for documentation.
type CapDirectoryCursor_first struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapDirectoryCursor_first) Args() CapDirectoryCursor_first_Params {
	return CapDirectoryCursor_first_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapDirectoryCursor_first) AllocResults() (CapDirectoryCursor_first_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapDirectoryCursor_first_Results(r), err
}

// CapDirectoryCursor_next holds the state for a server call to CapDirectoryCursor.next.
// See server.Call for documentation.
type CapDirectoryCursor_next struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapDirectoryCursor_next) Args() CapDirectoryCursor_next_Params {
	return CapDirectoryCursor_next_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapDirectoryCursor_next) AllocResults() (CapDirectoryCursor_next_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapDirectoryCursor_next_Results(r), err
}

// CapDirectoryCursor_nextN holds the state for a server call to CapDirectoryCursor.nextN.
// See server.Call for documentation.
type CapDirectoryCursor_nextN struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapDirectoryCursor_nextN) Args() CapDirectoryCursor_nextN_Params {
	return CapDirectoryCursor_nextN_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapDirectoryCursor_nextN) AllocResults() (CapDirectoryCursor_nextN_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapDirectoryCursor_nextN_Results(r), err
}

// CapDirectoryCursor_List is a list of CapDirectoryCursor.
type CapDirectoryCursor_List = capnp.CapList[CapDirectoryCursor]

// NewCapDirectoryCursor creates a new list of CapDirectoryCursor.
func NewCapDirectoryCursor_List(s *capnp.Segment, sz int32) (CapDirectoryCursor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapDirectoryCursor](l), err
}

type CapDirectoryCursor_first_Params capnp.Struct

// CapDirectoryCursor_first_Params_TypeID is the unique identifier for the type CapDirectoryCursor_first_Params.
const CapDirectoryCursor_first_Params_TypeID = 0xe060be8c78108e04

func NewCapDirectoryCursor_first_Params(s *capnp.Segment) (CapDirectoryCursor_first_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDirectoryCursor_first_Params(st), err
}

func NewRootCapDirectoryCursor_first_Params(s *capnp.Segment) (CapDirectoryCursor_first_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDirectoryCursor_first_Params(st), err
}

func ReadRootCapDirectoryCursor_first_Params(msg *capnp.Message) (CapDirectoryCursor_first_Params, error) {
	root, err := msg.Root()
	return CapDirectoryCursor_first_Params(root.Struct()), err
}

func (s CapDirectoryCursor_first_Params) String() string {
	str, _ := text.Marshal(0xe060be8c78108e04, capnp.Struct(s))
	return str
}

func (s CapDirectoryCursor_first_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDirectoryCursor_first_Params) DecodeFromPtr(p capnp.Ptr) CapDirectoryCursor_first_Params {
	return CapDirectoryCursor_first_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDirectoryCursor_first_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDirectoryCursor_first_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDirectoryCursor_first_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDirectoryCursor_first_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapDirectoryCursor_first_Params_List is a list of CapDirectoryCursor_first_Params.
type CapDirectoryCursor_first_Params_List = capnp.StructList[CapDirectoryCursor_first_Params]

// NewCapDirectoryCursor_first_Params creates a new list of CapDirectoryCursor_first_Params.
func NewCapDirectoryCursor_first_Params_List(s *capnp.Segment, sz int32) (CapDirectoryCursor_first_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapDirectoryCursor_first_Params](l), err
}

// CapDirectoryCursor_first_Params_Future is a wrapper for a CapDirectoryCursor_first_Params promised by a client call.
type CapDirectoryCursor_first_Params_Future struct{ *capnp.Future }

func (f CapDirectoryCursor_first_Params_Future) Struct() (CapDirectoryCursor_first_Params, error) {
	p, err := f.Future.Ptr()
	return CapDirectoryCursor_first_Params(p.Struct()), err
}

type CapDirectoryCursor_first_Results capnp.Struct

// CapDirectoryCursor_first_Results_TypeID is the unique identifier for the type CapDirectoryCursor_first_Results.
const CapDirectoryCursor_first_Results_TypeID = 0x947be10137c7170c

func NewCapDirectoryCursor_first_Results(s *capnp.Segment) (CapDirectoryCursor_first_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapDirectoryCursor_first_Results(st), err
}

func NewRootCapDirectoryCursor_first_Results(s *capnp.Segment) (CapDirectoryCursor_first_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapDirectoryCursor_first_Results(st), err
}

func ReadRootCapDirectoryCursor_first_Results(msg *capnp.Message) (CapDirectoryCursor_first_Results, error) {
	root, err := msg.Root()
	return CapDirectoryCursor_first_Results(root.Struct()), err
}

func (s CapDirectoryCursor_first_Results) String() string {
	str, _ := text.Marshal(0x947be10137c7170c, capnp.Struct(s))
	return str
}

func (s CapDirectoryCursor_first_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDirectoryCursor_first_Results) DecodeFromPtr(p capnp.Ptr) CapDirectoryCursor_first_Results {
	return CapDirectoryCursor_first_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDirectoryCursor_first_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDirectoryCursor_first_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDirectoryCursor_first_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDirectoryCursor_first_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDirectoryCursor_first_Results) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapDirectoryCursor_first_Results) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDirectoryCursor_first_Results) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapDirectoryCursor_first_Results) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CapDirectoryCursor_first_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapDirectoryCursor_first_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapDirectoryCursor_first_Results_List is a list of CapDirectoryCursor_first_Results.
type CapDirectoryCursor_first_Results_List = capnp.StructList[CapDirectoryCursor_first_Results]

// NewCapDirectoryCursor_first_Results creates a new list of CapDirectoryCursor_first_Results.
func NewCapDirectoryCursor_first_Results_List(s *capnp.Segment, sz int32) (CapDirectoryCursor_first_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapDirectoryCursor_first_Results](l), err
}

// CapDirectoryCursor_first_Results_Future is a wrapper for a CapDirectoryCursor_first_Results promised by a client call.
type CapDirectoryCursor_first_Results_Future struct{ *capnp.Future }

func (f CapDirectoryCursor_first_Results_Future) Struct() (CapDirectoryCursor_first_Results, error) {
	p, err := f.Future.Ptr()
	return CapDirectoryCursor_first_Results(p.Struct()), err
}
func (p CapDirectoryCursor_first_Results_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapDirectoryCursor_next_Params capnp.Struct

// CapDirectoryCursor_next_Params_TypeID is the unique identifier for the type CapDirectoryCursor_next_Params.
const CapDirectoryCursor_next_Params_TypeID = 0xc8f8e3e5692c04c5

func NewCapDirectoryCursor_next_Params(s *capnp.Segment) (CapDirectoryCursor_next_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDirectoryCursor_next_Params(st), err
}

func NewRootCapDirectoryCursor_next_Params(s *capnp.Segment) (CapDirectoryCursor_next_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDirectoryCursor_next_Params(st), err
}

func ReadRootCapDirectoryCursor_next_Params(msg *capnp.Message) (CapDirectoryCursor_next_Params, error) {
	root, err := msg.Root()
	return CapDirectoryCursor_next_Params(root.Struct()), err
}

func (s CapDirectoryCursor_next_Params) String() string {
	str, _ := text.Marshal(0xc8f8e3e5692c04c5, capnp.Struct(s))
	return str
}

func (s CapDirectoryCursor_next_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDirectoryCursor_next_Params) DecodeFromPtr(p capnp.Ptr) CapDirectoryCursor_next_Params {
	return CapDirectoryCursor_next_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDirectoryCursor_next_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDirectoryCursor_next_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDirectoryCursor_next_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDirectoryCursor_next_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapDirectoryCursor_next_Params_List is a list of CapDirectoryCursor_next_Params.
type CapDirectoryCursor_next_Params_List = capnp.StructList[CapDirectoryCursor_next_Params]

// NewCapDirectoryCursor_next_Params creates a new list of CapDirectoryCursor_next_Params.
func NewCapDirectoryCursor_next_Params_List(s *capnp.Segment, sz int32) (CapDirectoryCursor_next_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapDirectoryCursor_next_Params](l), err
}

// CapDirectoryCursor_next_Params_Future is a wrapper for a CapDirectoryCursor_next_Params promised by a client call.
type CapDirectoryCursor_next_Params_Future struct{ *capnp.Future }

func (f CapDirectoryCursor_next_Params_Future) Struct() (CapDirectoryCursor_next_Params, error) {
	p, err := f.Future.Ptr()
	return CapDirectoryCursor_next_Params(p.Struct()), err
}

type CapDirectoryCursor_next_Results capnp.Struct

// CapDirectoryCursor_next_Results_TypeID is the unique identifier for the type CapDirectoryCursor_next_Results.
const CapDirectoryCursor_next_Results_TypeID = 0xd44a68020ee5bf22

func NewCapDirectoryCursor_next_Results(s *capnp.Segment) (CapDirectoryCursor_next_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapDirectoryCursor_next_Results(st), err
}

func NewRootCapDirectoryCursor_next_Results(s *capnp.Segment) (CapDirectoryCursor_next_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapDirectoryCursor_next_Results(st), err
}

func ReadRootCapDirectoryCursor_next_Results(msg *capnp.Message) (CapDirectoryCursor_next_Results, error) {
	root, err := msg.Root()
	return CapDirectoryCursor_next_Results(root.Struct()), err
}

func (s CapDirectoryCursor_next_Results) String() string {
	str, _ := text.Marshal(0xd44a68020ee5bf22, capnp.Struct(s))
	return str
}

func (s CapDirectoryCursor_next_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDirectoryCursor_next_Results) DecodeFromPtr(p capnp.Ptr) CapDirectoryCursor_next_Results {
	return CapDirectoryCursor_next_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDirectoryCursor_next_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDirectoryCursor_next_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDirectoryCursor_next_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDirectoryCursor_next_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDirectoryCursor_next_Results) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapDirectoryCursor_next_Results) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDirectoryCursor_next_Results) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapDirectoryCursor_next_Results) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CapDirectoryCursor_next_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapDirectoryCursor_next_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapDirectoryCursor_next_Results_List is a list of CapDirectoryCursor_next_Results.
type CapDirectoryCursor_next_Results_List = capnp.StructList[CapDirectoryCursor_next_Results]

// NewCapDirectoryCursor_next_Results creates a new list of CapDirectoryCursor_next_Results.
func NewCapDirectoryCursor_next_Results_List(s *capnp.Segment, sz int32) (CapDirectoryCursor_next_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapDirectoryCursor_next_Results](l), err
}

// CapDirectoryCursor_next_Results_Future is a wrapper for a CapDirectoryCursor_next_Results promised by a client call.
type CapDirectoryCursor_next_Results_Future struct{ *capnp.Future }

func (f CapDirectoryCursor_next_Results_Future) Struct() (CapDirectoryCursor_next_Results, error) {
	p, err := f.Future.Ptr()
	return CapDirectoryCursor_next_Results(p.Struct()), err
}
func (p CapDirectoryCursor_next_Results_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapDirectoryCursor_nextN_Params capnp.Struct

// CapDirectoryCursor_nextN_Params_TypeID is the unique identifier for the type CapDirectoryCursor_nextN_Params.
const CapDirectoryCursor_nextN_Params_TypeID = 0x832c6f53dbceeb5b

func NewCapDirectoryCursor_nextN_Params(s *capnp.Segment) (CapDirectoryCursor_nextN_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapDirectoryCursor_nextN_Params(st), err
}

func NewRootCapDirectoryCursor_nextN_Params(s *capnp.Segment) (CapDirectoryCursor_nextN_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapDirectoryCursor_nextN_Params(st), err
}

func ReadRootCapDirectoryCursor_nextN_Params(msg *capnp.Message) (CapDirectoryCursor_nextN_Params, error) {
	root, err := msg.Root()
	return CapDirectoryCursor_nextN_Params(root.Struct()), err
}

func (s CapDirectoryCursor_nextN_Params) String() string {
	str, _ := text.Marshal(0x832c6f53dbceeb5b, capnp.Struct(s))
	return str
}

func (s CapDirectoryCursor_nextN_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDirectoryCursor_nextN_Params) DecodeFromPtr(p capnp.Ptr) CapDirectoryCursor_nextN_Params {
	return CapDirectoryCursor_nextN_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDirectoryCursor_nextN_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDirectoryCursor_nextN_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDirectoryCursor_nextN_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDirectoryCursor_nextN_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDirectoryCursor_nextN_Params) Steps() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s CapDirectoryCursor_nextN_Params) SetSteps(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// CapDirectoryCursor_nextN_Params_List is a list of CapDirectoryCursor_nextN_Params.
type CapDirectoryCursor_nextN_Params_List = capnp.StructList[CapDirectoryCursor_nextN_Params]

// NewCapDirectoryCursor_nextN_Params creates a new list of CapDirectoryCursor_nextN_Params.
func NewCapDirectoryCursor_nextN_Params_List(s *capnp.Segment, sz int32) (CapDirectoryCursor_nextN_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CapDirectoryCursor_nextN_Params](l), err
}

// CapDirectoryCursor_nextN_Params_Future is a wrapper for a CapDirectoryCursor_nextN_Params promised by a client call.
type CapDirectoryCursor_nextN_Params_Future struct{ *capnp.Future }

func (f CapDirectoryCursor_nextN_Params_Future) Struct() (CapDirectoryCursor_nextN_Params, error) {
	p, err := f.Future.Ptr()
	return CapDirectoryCursor_nextN_Params(p.Struct()), err
}

type CapDirectoryCursor_nextN_Results capnp.Struct

// CapDirectoryCursor_nextN_Results_TypeID is the unique identifier for the type CapDirectoryCursor_nextN_Results.
const CapDirectoryCursor_nextN_Results_TypeID = 0x9eca153b630ceaac

func NewCapDirectoryCursor_nextN_Results(s *capnp.Segment) (CapDirectoryCursor_nextN_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapDirectoryCursor_nextN_Results(st), err
}

func NewRootCapDirectoryCursor_nextN_Results(s *capnp.Segment) (CapDirectoryCursor_nextN_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapDirectoryCursor_nextN_Results(st), err
}

func ReadRootCapDirectoryCursor_nextN_Results(msg *capnp.Message) (CapDirectoryCursor_nextN_Results, error) {
	root, err := msg.Root()
	return CapDirectoryCursor_nextN_Results(root.Struct()), err
}

func (s CapDirectoryCursor_nextN_Results) String() string {
	str, _ := text.Marshal(0x9eca153b630ceaac, capnp.Struct(s))
	return str
}

func (s CapDirectoryCursor_nextN_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDirectoryCursor_nextN_Results) DecodeFromPtr(p capnp.Ptr) CapDirectoryCursor_nextN_Results {
	return CapDirectoryCursor_nextN_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDirectoryCursor_nextN_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDirectoryCursor_nextN_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDirectoryCursor_nextN_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDirectoryCursor_nextN_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDirectoryCursor_nextN_Results) Batch() (ThingValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue_List(p.List()), err
}

func (s CapDirectoryCursor_nextN_Results) HasBatch() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDirectoryCursor_nextN_Results) SetBatch(v ThingValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewBatch sets the batch field to a newly
// allocated ThingValue_List, preferring placement in s's segment.
func (s CapDirectoryCursor_nextN_Results) NewBatch(n int32) (ThingValue_List, error) {
	l, err := NewThingValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ThingValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CapDirectoryCursor_nextN_Results) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapDirectoryCursor_nextN_Results) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapDirectoryCursor_nextN_Results_List is a list of CapDirectoryCursor_nextN_Results.
type CapDirectoryCursor_nextN_Results_List = capnp.StructList[CapDirectoryCursor_nextN_Results]

// NewCapDirectoryCursor_nextN_Results creates a new list of CapDirectoryCursor_nextN_Results.
func NewCapDirectoryCursor_nextN_Results_List(s *capnp.Segment, sz int32) (CapDirectoryCursor_nextN_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapDirectoryCursor_nextN_Results](l), err
}

// CapDirectoryCursor_nextN_Results_Future is a wrapper for a CapDirectoryCursor_nextN_Results promised by a client call.
type CapDirectoryCursor_nextN_Results_Future struct{ *capnp.Future }

func (f CapDirectoryCursor_nextN_Results_Future) Struct() (CapDirectoryCursor_nextN_Results, error) {
	p, err := f.Future.Ptr()
	return CapDirectoryCursor_nextN_Results(p.Struct()), err
}

type CapReadDirectory capnp.Client

// CapReadDirectory_TypeID is the unique identifier for the type CapReadDirectory.
const CapReadDirectory_TypeID = 0xa19ac9e4c3ae910e

func (c CapReadDirectory) Cursor(ctx context.Context, params func(CapReadDirectory_cursor_Params) error) (CapReadDirectory_cursor_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa19ac9e4c3ae910e,
			MethodID:      0,
			InterfaceName: "hubapi/Directory.capnp:CapReadDirectory",
			MethodName:    "cursor",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapReadDirectory_cursor_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapReadDirectory_cursor_Results_Future{Future: ans.Future()}, release
}
func (c CapReadDirectory) GetTD(ctx context.Context, params func(CapReadDirectory_getTD_Params) error) (CapReadDirectory_getTD_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa19ac9e4c3ae910e,
			MethodID:      1,
			InterfaceName: "hubapi/Directory.capnp:CapReadDirectory",
			MethodName:    "getTD",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapReadDirectory_getTD_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapReadDirectory_getTD_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapReadDirectory) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapReadDirectory) AddRef() CapReadDirectory {
	return CapReadDirectory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapReadDirectory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapReadDirectory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapReadDirectory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapReadDirectory) DecodeFromPtr(p capnp.Ptr) CapReadDirectory {
	return CapReadDirectory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapReadDirectory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapReadDirectory) IsSame(other CapReadDirectory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapReadDirectory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapReadDirectory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapReadDirectory_Server is a CapReadDirectory with a local implementation.
type CapReadDirectory_Server interface {
	Cursor(context.Context, CapReadDirectory_cursor) error

	GetTD(context.Context, CapReadDirectory_getTD) error
}

// CapReadDirectory_NewServer creates a new Server from an implementation of CapReadDirectory_Server.
func CapReadDirectory_NewServer(s CapReadDirectory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapReadDirectory_Methods(nil, s), s, c)
}

// CapReadDirectory_ServerToClient creates a new Client from an implementation of CapReadDirectory_Server.
// The caller is responsible for calling Release on the returned Client.
func CapReadDirectory_ServerToClient(s CapReadDirectory_Server) CapReadDirectory {
	return CapReadDirectory(capnp.NewClient(CapReadDirectory_NewServer(s)))
}

// CapReadDirectory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapReadDirectory_Methods(methods []server.Method, s CapReadDirectory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa19ac9e4c3ae910e,
			MethodID:      0,
			InterfaceName: "hubapi/Directory.capnp:CapReadDirectory",
			MethodName:    "cursor",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cursor(ctx, CapReadDirectory_cursor{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa19ac9e4c3ae910e,
			MethodID:      1,
			InterfaceName: "hubapi/Directory.capnp:CapReadDirectory",
			MethodName:    "getTD",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetTD(ctx, CapReadDirectory_getTD{call})
		},
	})

	return methods
}

// CapReadDirectory_cursor holds the state for a server call to CapReadDirectory.cursor.
// See server.Call for documentation.
type CapReadDirectory_cursor struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapReadDirectory_cursor) Args() CapReadDirectory_cursor_Params {
	return CapReadDirectory_cursor_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapReadDirectory_cursor) AllocResults() (CapReadDirectory_cursor_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadDirectory_cursor_Results(r), err
}

// CapReadDirectory_getTD holds the state for a server call to CapReadDirectory.getTD.
// See server.Call for documentation.
type CapReadDirectory_getTD struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapReadDirectory_getTD) Args() CapReadDirectory_getTD_Params {
	return CapReadDirectory_getTD_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapReadDirectory_getTD) AllocResults() (CapReadDirectory_getTD_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadDirectory_getTD_Results(r), err
}

// CapReadDirectory_List is a list of CapReadDirectory.
type CapReadDirectory_List = capnp.CapList[CapReadDirectory]

// NewCapReadDirectory creates a new list of CapReadDirectory.
func NewCapReadDirectory_List(s *capnp.Segment, sz int32) (CapReadDirectory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapReadDirectory](l), err
}

type CapReadDirectory_cursor_Params capnp.Struct

// CapReadDirectory_cursor_Params_TypeID is the unique identifier for the type CapReadDirectory_cursor_Params.
const CapReadDirectory_cursor_Params_TypeID = 0xd422ea849f91d323

func NewCapReadDirectory_cursor_Params(s *capnp.Segment) (CapReadDirectory_cursor_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapReadDirectory_cursor_Params(st), err
}

func NewRootCapReadDirectory_cursor_Params(s *capnp.Segment) (CapReadDirectory_cursor_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapReadDirectory_cursor_Params(st), err
}

func ReadRootCapReadDirectory_cursor_Params(msg *capnp.Message) (CapReadDirectory_cursor_Params, error) {
	root, err := msg.Root()
	return CapReadDirectory_cursor_Params(root.Struct()), err
}

func (s CapReadDirectory_cursor_Params) String() string {
	str, _ := text.Marshal(0xd422ea849f91d323, capnp.Struct(s))
	return str
}

func (s CapReadDirectory_cursor_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapReadDirectory_cursor_Params) DecodeFromPtr(p capnp.Ptr) CapReadDirectory_cursor_Params {
	return CapReadDirectory_cursor_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapReadDirectory_cursor_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapReadDirectory_cursor_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapReadDirectory_cursor_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapReadDirectory_cursor_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapReadDirectory_cursor_Params_List is a list of CapReadDirectory_cursor_Params.
type CapReadDirectory_cursor_Params_List = capnp.StructList[CapReadDirectory_cursor_Params]

// NewCapReadDirectory_cursor_Params creates a new list of CapReadDirectory_cursor_Params.
func NewCapReadDirectory_cursor_Params_List(s *capnp.Segment, sz int32) (CapReadDirectory_cursor_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapReadDirectory_cursor_Params](l), err
}

// CapReadDirectory_cursor_Params_Future is a wrapper for a CapReadDirectory_cursor_Params promised by a client call.
type CapReadDirectory_cursor_Params_Future struct{ *capnp.Future }

func (f CapReadDirectory_cursor_Params_Future) Struct() (CapReadDirectory_cursor_Params, error) {
	p, err := f.Future.Ptr()
	return CapReadDirectory_cursor_Params(p.Struct()), err
}

type CapReadDirectory_cursor_Results capnp.Struct

// CapReadDirectory_cursor_Results_TypeID is the unique identifier for the type CapReadDirectory_cursor_Results.
const CapReadDirectory_cursor_Results_TypeID = 0xf39c90c6ef40ea8c

func NewCapReadDirectory_cursor_Results(s *capnp.Segment) (CapReadDirectory_cursor_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadDirectory_cursor_Results(st), err
}

func NewRootCapReadDirectory_cursor_Results(s *capnp.Segment) (CapReadDirectory_cursor_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadDirectory_cursor_Results(st), err
}

func ReadRootCapReadDirectory_cursor_Results(msg *capnp.Message) (CapReadDirectory_cursor_Results, error) {
	root, err := msg.Root()
	return CapReadDirectory_cursor_Results(root.Struct()), err
}

func (s CapReadDirectory_cursor_Results) String() string {
	str, _ := text.Marshal(0xf39c90c6ef40ea8c, capnp.Struct(s))
	return str
}

func (s CapReadDirectory_cursor_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapReadDirectory_cursor_Results) DecodeFromPtr(p capnp.Ptr) CapReadDirectory_cursor_Results {
	return CapReadDirectory_cursor_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapReadDirectory_cursor_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapReadDirectory_cursor_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapReadDirectory_cursor_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapReadDirectory_cursor_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapReadDirectory_cursor_Results) Cursor() CapDirectoryCursor {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapDirectoryCursor(p.Interface().Client())
}

func (s CapReadDirectory_cursor_Results) HasCursor() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapReadDirectory_cursor_Results) SetCursor(v CapDirectoryCursor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapReadDirectory_cursor_Results_List is a list of CapReadDirectory_cursor_Results.
type CapReadDirectory_cursor_Results_List = capnp.StructList[CapReadDirectory_cursor_Results]

// NewCapReadDirectory_cursor_Results creates a new list of CapReadDirectory_cursor_Results.
func NewCapReadDirectory_cursor_Results_List(s *capnp.Segment, sz int32) (CapReadDirectory_cursor_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapReadDirectory_cursor_Results](l), err
}

// CapReadDirectory_cursor_Results_Future is a wrapper for a CapReadDirectory_cursor_Results promised by a client call.
type CapReadDirectory_cursor_Results_Future struct{ *capnp.Future }

func (f CapReadDirectory_cursor_Results_Future) Struct() (CapReadDirectory_cursor_Results, error) {
	p, err := f.Future.Ptr()
	return CapReadDirectory_cursor_Results(p.Struct()), err
}
func (p CapReadDirectory_cursor_Results_Future) Cursor() CapDirectoryCursor {
	return CapDirectoryCursor(p.Future.Field(0, nil).Client())
}

type CapReadDirectory_getTD_Params capnp.Struct

// CapReadDirectory_getTD_Params_TypeID is the unique identifier for the type CapReadDirectory_getTD_Params.
const CapReadDirectory_getTD_Params_TypeID = 0xfd67831669d4d276

func NewCapReadDirectory_getTD_Params(s *capnp.Segment) (CapReadDirectory_getTD_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapReadDirectory_getTD_Params(st), err
}

func NewRootCapReadDirectory_getTD_Params(s *capnp.Segment) (CapReadDirectory_getTD_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapReadDirectory_getTD_Params(st), err
}

func ReadRootCapReadDirectory_getTD_Params(msg *capnp.Message) (CapReadDirectory_getTD_Params, error) {
	root, err := msg.Root()
	return CapReadDirectory_getTD_Params(root.Struct()), err
}

func (s CapReadDirectory_getTD_Params) String() string {
	str, _ := text.Marshal(0xfd67831669d4d276, capnp.Struct(s))
	return str
}

func (s CapReadDirectory_getTD_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapReadDirectory_getTD_Params) DecodeFromPtr(p capnp.Ptr) CapReadDirectory_getTD_Params {
	return CapReadDirectory_getTD_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapReadDirectory_getTD_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapReadDirectory_getTD_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapReadDirectory_getTD_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapReadDirectory_getTD_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapReadDirectory_getTD_Params) PublisherID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapReadDirectory_getTD_Params) HasPublisherID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapReadDirectory_getTD_Params) PublisherIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapReadDirectory_getTD_Params) SetPublisherID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapReadDirectory_getTD_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapReadDirectory_getTD_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapReadDirectory_getTD_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapReadDirectory_getTD_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CapReadDirectory_getTD_Params_List is a list of CapReadDirectory_getTD_Params.
type CapReadDirectory_getTD_Params_List = capnp.StructList[CapReadDirectory_getTD_Params]

// NewCapReadDirectory_getTD_Params creates a new list of CapReadDirectory_getTD_Params.
func NewCapReadDirectory_getTD_Params_List(s *capnp.Segment, sz int32) (CapReadDirectory_getTD_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapReadDirectory_getTD_Params](l), err
}

// CapReadDirectory_getTD_Params_Future is a wrapper for a CapReadDirectory_getTD_Params promised by a client call.
type CapReadDirectory_getTD_Params_Future struct{ *capnp.Future }

func (f CapReadDirectory_getTD_Params_Future) Struct() (CapReadDirectory_getTD_Params, error) {
	p, err := f.Future.Ptr()
	return CapReadDirectory_getTD_Params(p.Struct()), err
}

type CapReadDirectory_getTD_Results capnp.Struct

// CapReadDirectory_getTD_Results_TypeID is the unique identifier for the type CapReadDirectory_getTD_Results.
const CapReadDirectory_getTD_Results_TypeID = 0xfb167076a935c133

func NewCapReadDirectory_getTD_Results(s *capnp.Segment) (CapReadDirectory_getTD_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadDirectory_getTD_Results(st), err
}

func NewRootCapReadDirectory_getTD_Results(s *capnp.Segment) (CapReadDirectory_getTD_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapReadDirectory_getTD_Results(st), err
}

func ReadRootCapReadDirectory_getTD_Results(msg *capnp.Message) (CapReadDirectory_getTD_Results, error) {
	root, err := msg.Root()
	return CapReadDirectory_getTD_Results(root.Struct()), err
}

func (s CapReadDirectory_getTD_Results) String() string {
	str, _ := text.Marshal(0xfb167076a935c133, capnp.Struct(s))
	return str
}

func (s CapReadDirectory_getTD_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapReadDirectory_getTD_Results) DecodeFromPtr(p capnp.Ptr) CapReadDirectory_getTD_Results {
	return CapReadDirectory_getTD_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapReadDirectory_getTD_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapReadDirectory_getTD_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapReadDirectory_getTD_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapReadDirectory_getTD_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapReadDirectory_getTD_Results) Tv() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapReadDirectory_getTD_Results) HasTv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapReadDirectory_getTD_Results) SetTv(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTv sets the tv field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapReadDirectory_getTD_Results) NewTv() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapReadDirectory_getTD_Results_List is a list of CapReadDirectory_getTD_Results.
type CapReadDirectory_getTD_Results_List = capnp.StructList[CapReadDirectory_getTD_Results]

// NewCapReadDirectory_getTD_Results creates a new list of CapReadDirectory_getTD_Results.
func NewCapReadDirectory_getTD_Results_List(s *capnp.Segment, sz int32) (CapReadDirectory_getTD_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapReadDirectory_getTD_Results](l), err
}

// CapReadDirectory_getTD_Results_Future is a wrapper for a CapReadDirectory_getTD_Results promised by a client call.
type CapReadDirectory_getTD_Results_Future struct{ *capnp.Future }

func (f CapReadDirectory_getTD_Results_Future) Struct() (CapReadDirectory_getTD_Results, error) {
	p, err := f.Future.Ptr()
	return CapReadDirectory_getTD_Results(p.Struct()), err
}
func (p CapReadDirectory_getTD_Results_Future) Tv() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapUpdateDirectory capnp.Client

// CapUpdateDirectory_TypeID is the unique identifier for the type CapUpdateDirectory.
const CapUpdateDirectory_TypeID = 0x859a9432de9f13ae

func (c CapUpdateDirectory) RemoveTD(ctx context.Context, params func(CapUpdateDirectory_removeTD_Params) error) (CapUpdateDirectory_removeTD_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x859a9432de9f13ae,
			MethodID:      0,
			InterfaceName: "hubapi/Directory.capnp:CapUpdateDirectory",
			MethodName:    "removeTD",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapUpdateDirectory_removeTD_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapUpdateDirectory_removeTD_Results_Future{Future: ans.Future()}, release
}
func (c CapUpdateDirectory) UpdateTD(ctx context.Context, params func(CapUpdateDirectory_updateTD_Params) error) (CapUpdateDirectory_updateTD_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x859a9432de9f13ae,
			MethodID:      1,
			InterfaceName: "hubapi/Directory.capnp:CapUpdateDirectory",
			MethodName:    "updateTD",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapUpdateDirectory_updateTD_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapUpdateDirectory_updateTD_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapUpdateDirectory) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapUpdateDirectory) AddRef() CapUpdateDirectory {
	return CapUpdateDirectory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapUpdateDirectory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapUpdateDirectory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapUpdateDirectory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapUpdateDirectory) DecodeFromPtr(p capnp.Ptr) CapUpdateDirectory {
	return CapUpdateDirectory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapUpdateDirectory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapUpdateDirectory) IsSame(other CapUpdateDirectory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapUpdateDirectory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapUpdateDirectory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapUpdateDirectory_Server is a CapUpdateDirectory with a local implementation.
type CapUpdateDirectory_Server interface {
	RemoveTD(context.Context, CapUpdateDirectory_removeTD) error

	UpdateTD(context.Context, CapUpdateDirectory_updateTD) error
}

// CapUpdateDirectory_NewServer creates a new Server from an implementation of CapUpdateDirectory_Server.
func CapUpdateDirectory_NewServer(s CapUpdateDirectory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapUpdateDirectory_Methods(nil, s), s, c)
}

// CapUpdateDirectory_ServerToClient creates a new Client from an implementation of CapUpdateDirectory_Server.
// The caller is responsible for calling Release on the returned Client.
func CapUpdateDirectory_ServerToClient(s CapUpdateDirectory_Server) CapUpdateDirectory {
	return CapUpdateDirectory(capnp.NewClient(CapUpdateDirectory_NewServer(s)))
}

// CapUpdateDirectory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapUpdateDirectory_Methods(methods []server.Method, s CapUpdateDirectory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x859a9432de9f13ae,
			MethodID:      0,
			InterfaceName: "hubapi/Directory.capnp:CapUpdateDirectory",
			MethodName:    "removeTD",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveTD(ctx, CapUpdateDirectory_removeTD{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x859a9432de9f13ae,
			MethodID:      1,
			InterfaceName: "hubapi/Directory.capnp:CapUpdateDirectory",
			MethodName:    "updateTD",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.UpdateTD(ctx, CapUpdateDirectory_updateTD{call})
		},
	})

	return methods
}

// CapUpdateDirectory_removeTD holds the state for a server call to CapUpdateDirectory.removeTD.
// See server.Call for documentation.
type CapUpdateDirectory_removeTD struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapUpdateDirectory_removeTD) Args() CapUpdateDirectory_removeTD_Params {
	return CapUpdateDirectory_removeTD_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapUpdateDirectory_removeTD) AllocResults() (CapUpdateDirectory_removeTD_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUpdateDirectory_removeTD_Results(r), err
}

// CapUpdateDirectory_updateTD holds the state for a server call to CapUpdateDirectory.updateTD.
// See server.Call for documentation.
type CapUpdateDirectory_updateTD struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapUpdateDirectory_updateTD) Args() CapUpdateDirectory_updateTD_Params {
	return CapUpdateDirectory_updateTD_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapUpdateDirectory_updateTD) AllocResults() (CapUpdateDirectory_updateTD_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUpdateDirectory_updateTD_Results(r), err
}

// CapUpdateDirectory_List is a list of CapUpdateDirectory.
type CapUpdateDirectory_List = capnp.CapList[CapUpdateDirectory]

// NewCapUpdateDirectory creates a new list of CapUpdateDirectory.
func NewCapUpdateDirectory_List(s *capnp.Segment, sz int32) (CapUpdateDirectory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapUpdateDirectory](l), err
}

type CapUpdateDirectory_removeTD_Params capnp.Struct

// CapUpdateDirectory_removeTD_Params_TypeID is the unique identifier for the type CapUpdateDirectory_removeTD_Params.
const CapUpdateDirectory_removeTD_Params_TypeID = 0xe42c18fae46c41d6

func NewCapUpdateDirectory_removeTD_Params(s *capnp.Segment) (CapUpdateDirectory_removeTD_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapUpdateDirectory_removeTD_Params(st), err
}

func NewRootCapUpdateDirectory_removeTD_Params(s *capnp.Segment) (CapUpdateDirectory_removeTD_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapUpdateDirectory_removeTD_Params(st), err
}

func ReadRootCapUpdateDirectory_removeTD_Params(msg *capnp.Message) (CapUpdateDirectory_removeTD_Params, error) {
	root, err := msg.Root()
	return CapUpdateDirectory_removeTD_Params(root.Struct()), err
}

func (s CapUpdateDirectory_removeTD_Params) String() string {
	str, _ := text.Marshal(0xe42c18fae46c41d6, capnp.Struct(s))
	return str
}

func (s CapUpdateDirectory_removeTD_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUpdateDirectory_removeTD_Params) DecodeFromPtr(p capnp.Ptr) CapUpdateDirectory_removeTD_Params {
	return CapUpdateDirectory_removeTD_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUpdateDirectory_removeTD_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUpdateDirectory_removeTD_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUpdateDirectory_removeTD_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUpdateDirectory_removeTD_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapUpdateDirectory_removeTD_Params) PublisherID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapUpdateDirectory_removeTD_Params) HasPublisherID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapUpdateDirectory_removeTD_Params) PublisherIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapUpdateDirectory_removeTD_Params) SetPublisherID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapUpdateDirectory_removeTD_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapUpdateDirectory_removeTD_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapUpdateDirectory_removeTD_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapUpdateDirectory_removeTD_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CapUpdateDirectory_removeTD_Params_List is a list of CapUpdateDirectory_removeTD_Params.
type CapUpdateDirectory_removeTD_Params_List = capnp.StructList[CapUpdateDirectory_removeTD_Params]

// NewCapUpdateDirectory_removeTD_Params creates a new list of CapUpdateDirectory_removeTD_Params.
func NewCapUpdateDirectory_removeTD_Params_List(s *capnp.Segment, sz int32) (CapUpdateDirectory_removeTD_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapUpdateDirectory_removeTD_Params](l), err
}

// CapUpdateDirectory_removeTD_Params_Future is a wrapper for a CapUpdateDirectory_removeTD_Params promised by a client call.
type CapUpdateDirectory_removeTD_Params_Future struct{ *capnp.Future }

func (f CapUpdateDirectory_removeTD_Params_Future) Struct() (CapUpdateDirectory_removeTD_Params, error) {
	p, err := f.Future.Ptr()
	return CapUpdateDirectory_removeTD_Params(p.Struct()), err
}

type CapUpdateDirectory_removeTD_Results capnp.Struct

// CapUpdateDirectory_removeTD_Results_TypeID is the unique identifier for the type CapUpdateDirectory_removeTD_Results.
const CapUpdateDirectory_removeTD_Results_TypeID = 0xd95e680dea6a35c4

func NewCapUpdateDirectory_removeTD_Results(s *capnp.Segment) (CapUpdateDirectory_removeTD_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUpdateDirectory_removeTD_Results(st), err
}

func NewRootCapUpdateDirectory_removeTD_Results(s *capnp.Segment) (CapUpdateDirectory_removeTD_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUpdateDirectory_removeTD_Results(st), err
}

func ReadRootCapUpdateDirectory_removeTD_Results(msg *capnp.Message) (CapUpdateDirectory_removeTD_Results, error) {
	root, err := msg.Root()
	return CapUpdateDirectory_removeTD_Results(root.Struct()), err
}

func (s CapUpdateDirectory_removeTD_Results) String() string {
	str, _ := text.Marshal(0xd95e680dea6a35c4, capnp.Struct(s))
	return str
}

func (s CapUpdateDirectory_removeTD_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUpdateDirectory_removeTD_Results) DecodeFromPtr(p capnp.Ptr) CapUpdateDirectory_removeTD_Results {
	return CapUpdateDirectory_removeTD_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUpdateDirectory_removeTD_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUpdateDirectory_removeTD_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUpdateDirectory_removeTD_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUpdateDirectory_removeTD_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapUpdateDirectory_removeTD_Results_List is a list of CapUpdateDirectory_removeTD_Results.
type CapUpdateDirectory_removeTD_Results_List = capnp.StructList[CapUpdateDirectory_removeTD_Results]

// NewCapUpdateDirectory_removeTD_Results creates a new list of CapUpdateDirectory_removeTD_Results.
func NewCapUpdateDirectory_removeTD_Results_List(s *capnp.Segment, sz int32) (CapUpdateDirectory_removeTD_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapUpdateDirectory_removeTD_Results](l), err
}

// CapUpdateDirectory_removeTD_Results_Future is a wrapper for a CapUpdateDirectory_removeTD_Results promised by a client call.
type CapUpdateDirectory_removeTD_Results_Future struct{ *capnp.Future }

func (f CapUpdateDirectory_removeTD_Results_Future) Struct() (CapUpdateDirectory_removeTD_Results, error) {
	p, err := f.Future.Ptr()
	return CapUpdateDirectory_removeTD_Results(p.Struct()), err
}

type CapUpdateDirectory_updateTD_Params capnp.Struct

// CapUpdateDirectory_updateTD_Params_TypeID is the unique identifier for the type CapUpdateDirectory_updateTD_Params.
const CapUpdateDirectory_updateTD_Params_TypeID = 0x8b29feea8de52fc2

func NewCapUpdateDirectory_updateTD_Params(s *capnp.Segment) (CapUpdateDirectory_updateTD_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapUpdateDirectory_updateTD_Params(st), err
}

func NewRootCapUpdateDirectory_updateTD_Params(s *capnp.Segment) (CapUpdateDirectory_updateTD_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapUpdateDirectory_updateTD_Params(st), err
}

func ReadRootCapUpdateDirectory_updateTD_Params(msg *capnp.Message) (CapUpdateDirectory_updateTD_Params, error) {
	root, err := msg.Root()
	return CapUpdateDirectory_updateTD_Params(root.Struct()), err
}

func (s CapUpdateDirectory_updateTD_Params) String() string {
	str, _ := text.Marshal(0x8b29feea8de52fc2, capnp.Struct(s))
	return str
}

func (s CapUpdateDirectory_updateTD_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUpdateDirectory_updateTD_Params) DecodeFromPtr(p capnp.Ptr) CapUpdateDirectory_updateTD_Params {
	return CapUpdateDirectory_updateTD_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUpdateDirectory_updateTD_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUpdateDirectory_updateTD_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUpdateDirectory_updateTD_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUpdateDirectory_updateTD_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapUpdateDirectory_updateTD_Params) PublisherID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapUpdateDirectory_updateTD_Params) HasPublisherID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapUpdateDirectory_updateTD_Params) PublisherIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapUpdateDirectory_updateTD_Params) SetPublisherID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapUpdateDirectory_updateTD_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapUpdateDirectory_updateTD_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapUpdateDirectory_updateTD_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapUpdateDirectory_updateTD_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapUpdateDirectory_updateTD_Params) TdDoc() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s CapUpdateDirectory_updateTD_Params) HasTdDoc() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapUpdateDirectory_updateTD_Params) SetTdDoc(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

// CapUpdateDirectory_updateTD_Params_List is a list of CapUpdateDirectory_updateTD_Params.
type CapUpdateDirectory_updateTD_Params_List = capnp.StructList[CapUpdateDirectory_updateTD_Params]

// NewCapUpdateDirectory_updateTD_Params creates a new list of CapUpdateDirectory_updateTD_Params.
func NewCapUpdateDirectory_updateTD_Params_List(s *capnp.Segment, sz int32) (CapUpdateDirectory_updateTD_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[CapUpdateDirectory_updateTD_Params](l), err
}

// CapUpdateDirectory_updateTD_Params_Future is a wrapper for a CapUpdateDirectory_updateTD_Params promised by a client call.
type CapUpdateDirectory_updateTD_Params_Future struct{ *capnp.Future }

func (f CapUpdateDirectory_updateTD_Params_Future) Struct() (CapUpdateDirectory_updateTD_Params, error) {
	p, err := f.Future.Ptr()
	return CapUpdateDirectory_updateTD_Params(p.Struct()), err
}

type CapUpdateDirectory_updateTD_Results capnp.Struct

// CapUpdateDirectory_updateTD_Results_TypeID is the unique identifier for the type CapUpdateDirectory_updateTD_Results.
const CapUpdateDirectory_updateTD_Results_TypeID = 0xc467c34fc2089673

func NewCapUpdateDirectory_updateTD_Results(s *capnp.Segment) (CapUpdateDirectory_updateTD_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUpdateDirectory_updateTD_Results(st), err
}

func NewRootCapUpdateDirectory_updateTD_Results(s *capnp.Segment) (CapUpdateDirectory_updateTD_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUpdateDirectory_updateTD_Results(st), err
}

func ReadRootCapUpdateDirectory_updateTD_Results(msg *capnp.Message) (CapUpdateDirectory_updateTD_Results, error) {
	root, err := msg.Root()
	return CapUpdateDirectory_updateTD_Results(root.Struct()), err
}

func (s CapUpdateDirectory_updateTD_Results) String() string {
	str, _ := text.Marshal(0xc467c34fc2089673, capnp.Struct(s))
	return str
}

func (s CapUpdateDirectory_updateTD_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUpdateDirectory_updateTD_Results) DecodeFromPtr(p capnp.Ptr) CapUpdateDirectory_updateTD_Results {
	return CapUpdateDirectory_updateTD_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUpdateDirectory_updateTD_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUpdateDirectory_updateTD_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUpdateDirectory_updateTD_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUpdateDirectory_updateTD_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapUpdateDirectory_updateTD_Results_List is a list of CapUpdateDirectory_updateTD_Results.
type CapUpdateDirectory_updateTD_Results_List = capnp.StructList[CapUpdateDirectory_updateTD_Results]

// NewCapUpdateDirectory_updateTD_Results creates a new list of CapUpdateDirectory_updateTD_Results.
func NewCapUpdateDirectory_updateTD_Results_List(s *capnp.Segment, sz int32) (CapUpdateDirectory_updateTD_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapUpdateDirectory_updateTD_Results](l), err
}

// CapUpdateDirectory_updateTD_Results_Future is a wrapper for a CapUpdateDirectory_updateTD_Results promised by a client call.
type CapUpdateDirectory_updateTD_Results_Future struct{ *capnp.Future }

func (f CapUpdateDirectory_updateTD_Results_Future) Struct() (CapUpdateDirectory_updateTD_Results, error) {
	p, err := f.Future.Ptr()
	return CapUpdateDirectory_updateTD_Results(p.Struct()), err
}

const schema_c8da54a8b024bd49 = "x\xda\xb4Wk\x8c\x13U\x14>g\xa6\xdd\x996\xed" +
	"\xc2\xcd,,\x12Ie)\x86]\x97\x85-\x12\x01\x03" +
	"[\xa0\x18!\xb0v\xda%\x014\xc6\xe9\xec\xb0-\xd9" +
	"\xee\xd6vva\xa3\xf8\x08\x12\x12\x04\xe3\xca#ZA" +
	"\xc2\x0f\x121\x08Jb\xa2&Hx\x09\x1a5\x11\x91" +
	"\x04\x14\x03\x11T\xaa\xc6\x18MT\x04\xc7\xdcio\xa7" +
	"/\xf6\x15\xfd\xd7\xf6\x9e9\xdf\xb9\xdfw\xcew\xa6\xd3" +
	"\xbf\xe6\xfd\xb6f\xf7!'p\xf2\x93\xf6*\xe3\xe1\x1f" +
	"?\xfb*\xdc\xdd\xb8\x01\xe4\x06D\x00\x9b\x000c\xae" +
	"\xfd}\x04\x94\x96\xd9[\x00\x8d\x83\xd2\x9eo|\xdb\xd3" +
	"\x1b\x81\xd4\xf2\xc6\xe2#\xde\xb7^o\xbbx\x06\x00g" +
	"\xc4\xed!\x94\x9e\xb5\x0b\x00\xd2z\xfb&\xe9K\xfa\xc9" +
	"8>\xed\xda\xd6\xcc?\xf5\xcf\x03i@\x00;O\xd3" +
	"\x1d\xb1\x9f\xa5\xe9>\xb7\x1f\x024\\\xb5\xa7\xef\xc3+" +
	"Ol\xcf\xe1\xd9\x91F\xc4\xab\x8e\xd3\x88\xf5Uk\x01" +
	"\x8d\xa5]5\xb5\x0b&MJ\x03\xb9'\x1fp\xa1\xaa" +
	"\x8e\x03\x94~\xad\xa2\x15\xcdJ\xcf\x9b\x17n\xf8d\x17" +
	"\x90Z[QEDH\xa24Y\x10\x00\xc2w\x09<" +
	"\x86\x1b\x05\x0e\x01\x8c\x03\x19\x97z\xff\x98\x8f_+\x82" +
	"\xac\x17L\xc8\xd9\x02\x85\xac\xee?x\xe2\xeaG\xe9\xbd" +
	"ew\xdc',@\xe9\x1d\x9aQz[\xd8$\xa1H" +
	"\xef\xd8\xbaB}\xe5\xe7c\x07\x0f\x97E_\x17B(" +
	"\xdd2\xa3\xff\x12NK\x8f\x9b\xd1m\xd7\xd7\xa4\xa7\xff" +
	"\xf1\xc0\xd1\xb2jW\x8a\x11\x94\xe24&\x1c\x15y\x0c" +
	"\xeb\xa2Ymj\xa7x\xfc\xa1\x13\x1d'\xb3\x0c\x9az" +
	"\xc4\xc5\x8b\x086\xe3\x94\xad1v\xed\xdb?\xcf\x14\x9c" +
	"(\xe2az2\xe9\x8b\xfe=\xcfe\xea\xce\x01\x99\xc2" +
	"N\xe4\xecI\xdd\xd1k\xd5\\t\xc9\xb9\xa2\xbb\xcf\x17" +
	"M}e\x91\xde\xfd\xe4\xcc5\x19w\xf4\xd1\x0b\x05Y" +
	"\xdf\xcc\xe2\xed\xfb\xbe\x15\xc5\xfd\xae\xcb\x85B\xec\x15\xc7" +
	"S!\xde\x13\xa9\x10\xb6\x17F\xaf\xdb\xf2\xc1c\x97\x0b" +
	"\x1e\xbdDS\xdb\x8c\xf3\xf3;\xaf\xde\x18\xd7x5\xd7" +
	"\x06\x1c=\xfaT4\xdb\xe0\x8a\x89\xba\xd5\xe6\xdb\xb8\xe1" +
	"\x87U\xd7\x0bs\xcfw4\xd0\xdc+\x1d4\xb7:e" +
	"\xf5O\x99\xbb\x1f\xc9\x94\xd1\xb6\xde\x11A\xa9\xdfAi" +
	"\xdb\xe2\xe01\xfc\xb2\xc3\xa4mK\xc6\xff\xcb\x87/\xee" +
	"\xfa-KA6\xe1\x0e\x87y\xcf}f\xc2\xcb\x07\xb6" +
	"\xd5m\x0b\xdf\xfc\xbd\x10\xf1\x94\xc3G\x11/\x99\x01\xbb" +
	"\xef\xd4\xfa\x9f\xbar\xf3F\x99\xac\xb7\x1c\xabP\"N" +
	"*\xab\xdb\xb9I\x8a\xd3O\xc6\x8cc3\xf7\xf7&\xc6" +
	"\xfe]\x88\xb7\xdcy\x98\xe2iN\x9a\xae\xf7\xec\xb9\xd8" +
	"\xd8\x0d\x1d\xb7r\x01&\x05\x1b\x9do\xd0\x80\x1d\xce\xb5" +
	"\xb0\xd0\x88\xf6D\x94DlZ\xc0\x1eKj\xaa\xde\x9d" +
	"\xeckR\x95DWb\xceB%\x11`?-\xecI" +
	"\xa6\xba\x93M]\xda:\xbd\xd5\xdb\x12T\x92J<%" +
	"\xdbx\x1b\x80\x0d\x01\x88\xdb\x07 \x8b<\xca5\x1cz" +
	"R\xba\x96H\xa1\x08\x1c\x8a\x80\xf9\xec\xb6\xf2\xec\xcb\x13" +
	"\xed\x8a\xae1\x0c\xec\x0b\"\xca\"o\x07\xc8\xcb\x86\xac" +
	")H\xf3\x12\xe0H\xbd\x80\x98\x9fld\x0dJ&\xd0" +
	"\xb31\x82\x91\xd4\xe2\xdd\xbdZ[\x00\x00\xfch\xf4\x98" +
	"\xd9s\xdf\x82hUR5X%}M\xecY\xafy" +
	"SL\xc9\xae\xfcU\x17E\x00\xe4\x00\x8fr\x90C\x82" +
	"XC\xbb\x99,[\x00 ?\xc8\xa3\xdc\xc6!\xe1\xb8" +
	"\x1a\xe4\x00\x88LIY\xca\xa3\xbc\x82C#\xd1\x13\xe9" +
	"\x8c\xa5\xa2\x1a\x08\xc9\xc5\x01t\x01\x87.\xc0\xa7\xf5h" +
	"\xac\xab\xc3\xfa\xee\xd1\xdb\x03\xdd*\xba\x81C7\x0cX" +
	"p\xa90\xabc\xc9\x94\xee\x0di\xa9\x9eN=E\xa5" +
	"`\xe5\xd6\x8f\x07\x90\xbd<\xca\xd39d\xd5N\xa5\x85" +
	"M\xe1Q\xbe\x97C^\xef\xc5\xd1\xc6K\xcf\xec|w" +
	"\xf7w\xe7_\x05@\x1c\x0d\xe8\xe9U:c\xed\x88\xc0" +
	"!\x16\xd4!\x0cPGXK\xf6\xc6T\x8d\x9e\x844" +
	"\xa5=\xff\xbbY\x93\xd0\xa9\x17uK\x9d\xd5-\x82\xaa" +
	"$\x90X\xc6\x07\x88d\x80\xaeQ\x95D\xab\x12\xd7," +
	"\xbd<\xe6i\x101\xc7!\x10L\x1bjNQd\x92" +
	"\xf2\xc9\xbe\xe1\xb0\x99m\xf3Jl\xfarl\xfa-6" +
	"\xe7\xd2\xdff\xf1(\x078\xf4D\x14]\x8db5`" +
	"\x90\xc7\x12^\xabo\xcbk\x85\xd1(\xe2\x10\xac\xc1`" +
	"\x06\x8b\xccfH\xf3\x1c\xe0\xc8d:\x18l\xd0\x91Y" +
	"\x02\xb9\xc3\x07\x1cq\x0b-\xaay-?z:4\xbd" +
	"-P<\x0d\xb6\xc1\xe8\xc0$\x85w\x99\xf0\xcch\x91" +
	"mO\xda\xe4\x1cYD\xe1\xd9V@f\xf5dv\x03" +
	"pd\xaa\x80\\~\xb9#[\x81d\xa2\xcf\x9cY\x8f" +
	"\xd9\xb8~\x1cE)\xf7\xa3\xc7d~\xe0\x02\xdbKZ" +
	"\xaeUP\xe2ZQ\x03\x84\x0c\x16\x03\xd87\xa2\xb17" +
	"\xa5\xe7\xf5\xd4p\xbd\xd1\x1b\xf4\x98\xd68\xd0sE\xd2" +
	"6e\xa5\x19\xcas\x15\xf1B-\xd9&\xfd\x9f&~" +
	"\x08\x9c1\xd3-\xe7lDvA\x0d\x97/\xde-K" +
	"\x00d\x17\x8f\xf28\x0e\x0d\xb53\xa6u\xe9\x8b\xa9\xa9" +
	"3\xd3\x1c\x0egY\x9b\xcc\xed\xaf\x11\xdd\x92-\x84\x02" +
	"\xbe#\x16\xb7\xf9\x85\xd0L\x17B#\x8f\xf2\xac\xa1z" +
	"\xffpi+\xa9\xd0\x1bTF\x95.\xe5\xa1\x12w\x1b" +
	"\x93\xb5\x84\x11J-v\xb3\xc1\x84\xc3\xbcI\xc1\xb0\x9b" +
	">\xdf\xbc\x055\xcf\xb1VC\xce\xb6\x90X/\xba%" +
	"\xdba\x84T\x854O\x19n\xf9J\xca\xff\xdf\x18d" +
	"%\x95\x81\xf2\xaaf\x196{wE\xf6o\x824o" +
	"\xce\xba\xa2\xf5\xee\x89\xec\x95\x90LL\x03G&\x08\x95" +
	"\xd8\xf5c\xc5\xb5V\xec\x95\x832o.\x80\x8a\x04\x8c" +
	"\xb7\x08\xa8\xe8\x10\xc3\xc5`\xfd\xf8\x9f\x0f\xca\xbf\x01\x00" +
	"\x00\xff\xff\x97\xc00\xd2"

func init() {
	schemas.Register(schema_c8da54a8b024bd49,
		0x832c6f53dbceeb5b,
		0x859a9432de9f13ae,
		0x8b29feea8de52fc2,
		0x947be10137c7170c,
		0x9a23234217146e4c,
		0x9ccc2a533e3e9a38,
		0x9eca153b630ceaac,
		0xa19ac9e4c3ae910e,
		0xb2aec1ed9963584e,
		0xbf46f7309a6ae954,
		0xc467c34fc2089673,
		0xc8f8e3e5692c04c5,
		0xd422ea849f91d323,
		0xd44a68020ee5bf22,
		0xd95e680dea6a35c4,
		0xe00ca908014ee7a5,
		0xe060be8c78108e04,
		0xe42c18fae46c41d6,
		0xe95ae8838532048d,
		0xea5c26eaec662863,
		0xf39c90c6ef40ea8c,
		0xf4fc53932293ace0,
		0xfafce17e91651c9d,
		0xfb167076a935c133,
		0xfd67831669d4d276)
}

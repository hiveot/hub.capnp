// Code generated by capnpc-go. DO NOT EDIT.

package hubapi

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

// Constants defined in Launcher.capnp.
const (
	LauncherServiceName = "launcher"
)

type ServiceInfo capnp.Struct

// ServiceInfo_TypeID is the unique identifier for the type ServiceInfo.
const ServiceInfo_TypeID = 0x8aa0c0b71a33baab

func NewServiceInfo(s *capnp.Segment) (ServiceInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 6})
	return ServiceInfo(st), err
}

func NewRootServiceInfo(s *capnp.Segment) (ServiceInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 6})
	return ServiceInfo(st), err
}

func ReadRootServiceInfo(msg *capnp.Message) (ServiceInfo, error) {
	root, err := msg.Root()
	return ServiceInfo(root.Struct()), err
}

func (s ServiceInfo) String() string {
	str, _ := text.Marshal(0x8aa0c0b71a33baab, capnp.Struct(s))
	return str
}

func (s ServiceInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceInfo) DecodeFromPtr(p capnp.Ptr) ServiceInfo {
	return ServiceInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceInfo) Cpu() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ServiceInfo) SetCpu(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ServiceInfo) ModifiedTime() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ServiceInfo) HasModifiedTime() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceInfo) ModifiedTimeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceInfo) SetModifiedTime(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ServiceInfo) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ServiceInfo) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ServiceInfo) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ServiceInfo) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ServiceInfo) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ServiceInfo) HasPath() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ServiceInfo) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ServiceInfo) SetPath(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s ServiceInfo) Pid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ServiceInfo) SetPid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ServiceInfo) Rss() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s ServiceInfo) SetRss(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s ServiceInfo) Running() bool {
	return capnp.Struct(s).Bit(128)
}

func (s ServiceInfo) SetRunning(v bool) {
	capnp.Struct(s).SetBit(128, v)
}

func (s ServiceInfo) Size() int64 {
	return int64(capnp.Struct(s).Uint64(24))
}

func (s ServiceInfo) SetSize(v int64) {
	capnp.Struct(s).SetUint64(24, uint64(v))
}

func (s ServiceInfo) Status() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s ServiceInfo) HasStatus() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ServiceInfo) StatusBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s ServiceInfo) SetStatus(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s ServiceInfo) StartCount() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s ServiceInfo) SetStartCount(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s ServiceInfo) StartTime() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s ServiceInfo) HasStartTime() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s ServiceInfo) StartTimeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s ServiceInfo) SetStartTime(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s ServiceInfo) StopTime() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s ServiceInfo) HasStopTime() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s ServiceInfo) StopTimeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s ServiceInfo) SetStopTime(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s ServiceInfo) Uptime() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s ServiceInfo) SetUptime(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// ServiceInfo_List is a list of ServiceInfo.
type ServiceInfo_List = capnp.StructList[ServiceInfo]

// NewServiceInfo creates a new list of ServiceInfo.
func NewServiceInfo_List(s *capnp.Segment, sz int32) (ServiceInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 6}, sz)
	return capnp.StructList[ServiceInfo](l), err
}

// ServiceInfo_Future is a wrapper for a ServiceInfo promised by a client call.
type ServiceInfo_Future struct{ *capnp.Future }

func (f ServiceInfo_Future) Struct() (ServiceInfo, error) {
	p, err := f.Future.Ptr()
	return ServiceInfo(p.Struct()), err
}

type CapLauncher capnp.Client

// CapLauncher_TypeID is the unique identifier for the type CapLauncher.
const CapLauncher_TypeID = 0x96524352b99b59d2

func (c CapLauncher) List(ctx context.Context, params func(CapLauncher_list_Params) error) (CapLauncher_list_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x96524352b99b59d2,
			MethodID:      0,
			InterfaceName: "hubapi/Launcher.capnp:CapLauncher",
			MethodName:    "list",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapLauncher_list_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapLauncher_list_Results_Future{Future: ans.Future()}, release
}
func (c CapLauncher) StartService(ctx context.Context, params func(CapLauncher_startService_Params) error) (CapLauncher_startService_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x96524352b99b59d2,
			MethodID:      1,
			InterfaceName: "hubapi/Launcher.capnp:CapLauncher",
			MethodName:    "startService",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapLauncher_startService_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapLauncher_startService_Results_Future{Future: ans.Future()}, release
}
func (c CapLauncher) StartAll(ctx context.Context, params func(CapLauncher_startAll_Params) error) (CapLauncher_startAll_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x96524352b99b59d2,
			MethodID:      2,
			InterfaceName: "hubapi/Launcher.capnp:CapLauncher",
			MethodName:    "startAll",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapLauncher_startAll_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapLauncher_startAll_Results_Future{Future: ans.Future()}, release
}
func (c CapLauncher) StopService(ctx context.Context, params func(CapLauncher_stopService_Params) error) (CapLauncher_stopService_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x96524352b99b59d2,
			MethodID:      3,
			InterfaceName: "hubapi/Launcher.capnp:CapLauncher",
			MethodName:    "stopService",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapLauncher_stopService_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapLauncher_stopService_Results_Future{Future: ans.Future()}, release
}
func (c CapLauncher) StopAll(ctx context.Context, params func(CapLauncher_stopAll_Params) error) (CapLauncher_stopAll_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x96524352b99b59d2,
			MethodID:      4,
			InterfaceName: "hubapi/Launcher.capnp:CapLauncher",
			MethodName:    "stopAll",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapLauncher_stopAll_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapLauncher_stopAll_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapLauncher) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapLauncher) AddRef() CapLauncher {
	return CapLauncher(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapLauncher) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapLauncher) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapLauncher) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapLauncher) DecodeFromPtr(p capnp.Ptr) CapLauncher {
	return CapLauncher(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapLauncher) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapLauncher) IsSame(other CapLauncher) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapLauncher) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapLauncher) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapLauncher_Server is a CapLauncher with a local implementation.
type CapLauncher_Server interface {
	List(context.Context, CapLauncher_list) error

	StartService(context.Context, CapLauncher_startService) error

	StartAll(context.Context, CapLauncher_startAll) error

	StopService(context.Context, CapLauncher_stopService) error

	StopAll(context.Context, CapLauncher_stopAll) error
}

// CapLauncher_NewServer creates a new Server from an implementation of CapLauncher_Server.
func CapLauncher_NewServer(s CapLauncher_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapLauncher_Methods(nil, s), s, c)
}

// CapLauncher_ServerToClient creates a new Client from an implementation of CapLauncher_Server.
// The caller is responsible for calling Release on the returned Client.
func CapLauncher_ServerToClient(s CapLauncher_Server) CapLauncher {
	return CapLauncher(capnp.NewClient(CapLauncher_NewServer(s)))
}

// CapLauncher_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapLauncher_Methods(methods []server.Method, s CapLauncher_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x96524352b99b59d2,
			MethodID:      0,
			InterfaceName: "hubapi/Launcher.capnp:CapLauncher",
			MethodName:    "list",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.List(ctx, CapLauncher_list{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x96524352b99b59d2,
			MethodID:      1,
			InterfaceName: "hubapi/Launcher.capnp:CapLauncher",
			MethodName:    "startService",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StartService(ctx, CapLauncher_startService{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x96524352b99b59d2,
			MethodID:      2,
			InterfaceName: "hubapi/Launcher.capnp:CapLauncher",
			MethodName:    "startAll",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StartAll(ctx, CapLauncher_startAll{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x96524352b99b59d2,
			MethodID:      3,
			InterfaceName: "hubapi/Launcher.capnp:CapLauncher",
			MethodName:    "stopService",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StopService(ctx, CapLauncher_stopService{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x96524352b99b59d2,
			MethodID:      4,
			InterfaceName: "hubapi/Launcher.capnp:CapLauncher",
			MethodName:    "stopAll",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StopAll(ctx, CapLauncher_stopAll{call})
		},
	})

	return methods
}

// CapLauncher_list holds the state for a server call to CapLauncher.list.
// See server.Call for documentation.
type CapLauncher_list struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapLauncher_list) Args() CapLauncher_list_Params {
	return CapLauncher_list_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapLauncher_list) AllocResults() (CapLauncher_list_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapLauncher_list_Results(r), err
}

// CapLauncher_startService holds the state for a server call to CapLauncher.startService.
// See server.Call for documentation.
type CapLauncher_startService struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapLauncher_startService) Args() CapLauncher_startService_Params {
	return CapLauncher_startService_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapLauncher_startService) AllocResults() (CapLauncher_startService_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapLauncher_startService_Results(r), err
}

// CapLauncher_startAll holds the state for a server call to CapLauncher.startAll.
// See server.Call for documentation.
type CapLauncher_startAll struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapLauncher_startAll) Args() CapLauncher_startAll_Params {
	return CapLauncher_startAll_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapLauncher_startAll) AllocResults() (CapLauncher_startAll_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapLauncher_startAll_Results(r), err
}

// CapLauncher_stopService holds the state for a server call to CapLauncher.stopService.
// See server.Call for documentation.
type CapLauncher_stopService struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapLauncher_stopService) Args() CapLauncher_stopService_Params {
	return CapLauncher_stopService_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapLauncher_stopService) AllocResults() (CapLauncher_stopService_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapLauncher_stopService_Results(r), err
}

// CapLauncher_stopAll holds the state for a server call to CapLauncher.stopAll.
// See server.Call for documentation.
type CapLauncher_stopAll struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapLauncher_stopAll) Args() CapLauncher_stopAll_Params {
	return CapLauncher_stopAll_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapLauncher_stopAll) AllocResults() (CapLauncher_stopAll_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapLauncher_stopAll_Results(r), err
}

// CapLauncher_List is a list of CapLauncher.
type CapLauncher_List = capnp.CapList[CapLauncher]

// NewCapLauncher creates a new list of CapLauncher.
func NewCapLauncher_List(s *capnp.Segment, sz int32) (CapLauncher_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapLauncher](l), err
}

type CapLauncher_list_Params capnp.Struct

// CapLauncher_list_Params_TypeID is the unique identifier for the type CapLauncher_list_Params.
const CapLauncher_list_Params_TypeID = 0xd43c617d04683d01

func NewCapLauncher_list_Params(s *capnp.Segment) (CapLauncher_list_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapLauncher_list_Params(st), err
}

func NewRootCapLauncher_list_Params(s *capnp.Segment) (CapLauncher_list_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CapLauncher_list_Params(st), err
}

func ReadRootCapLauncher_list_Params(msg *capnp.Message) (CapLauncher_list_Params, error) {
	root, err := msg.Root()
	return CapLauncher_list_Params(root.Struct()), err
}

func (s CapLauncher_list_Params) String() string {
	str, _ := text.Marshal(0xd43c617d04683d01, capnp.Struct(s))
	return str
}

func (s CapLauncher_list_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapLauncher_list_Params) DecodeFromPtr(p capnp.Ptr) CapLauncher_list_Params {
	return CapLauncher_list_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapLauncher_list_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapLauncher_list_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapLauncher_list_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapLauncher_list_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapLauncher_list_Params) OnlyRunning() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CapLauncher_list_Params) SetOnlyRunning(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// CapLauncher_list_Params_List is a list of CapLauncher_list_Params.
type CapLauncher_list_Params_List = capnp.StructList[CapLauncher_list_Params]

// NewCapLauncher_list_Params creates a new list of CapLauncher_list_Params.
func NewCapLauncher_list_Params_List(s *capnp.Segment, sz int32) (CapLauncher_list_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CapLauncher_list_Params](l), err
}

// CapLauncher_list_Params_Future is a wrapper for a CapLauncher_list_Params promised by a client call.
type CapLauncher_list_Params_Future struct{ *capnp.Future }

func (f CapLauncher_list_Params_Future) Struct() (CapLauncher_list_Params, error) {
	p, err := f.Future.Ptr()
	return CapLauncher_list_Params(p.Struct()), err
}

type CapLauncher_list_Results capnp.Struct

// CapLauncher_list_Results_TypeID is the unique identifier for the type CapLauncher_list_Results.
const CapLauncher_list_Results_TypeID = 0xa7b81c0bbc4ab3a8

func NewCapLauncher_list_Results(s *capnp.Segment) (CapLauncher_list_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapLauncher_list_Results(st), err
}

func NewRootCapLauncher_list_Results(s *capnp.Segment) (CapLauncher_list_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapLauncher_list_Results(st), err
}

func ReadRootCapLauncher_list_Results(msg *capnp.Message) (CapLauncher_list_Results, error) {
	root, err := msg.Root()
	return CapLauncher_list_Results(root.Struct()), err
}

func (s CapLauncher_list_Results) String() string {
	str, _ := text.Marshal(0xa7b81c0bbc4ab3a8, capnp.Struct(s))
	return str
}

func (s CapLauncher_list_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapLauncher_list_Results) DecodeFromPtr(p capnp.Ptr) CapLauncher_list_Results {
	return CapLauncher_list_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapLauncher_list_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapLauncher_list_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapLauncher_list_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapLauncher_list_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapLauncher_list_Results) InfoList() (ServiceInfo_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ServiceInfo_List(p.List()), err
}

func (s CapLauncher_list_Results) HasInfoList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapLauncher_list_Results) SetInfoList(v ServiceInfo_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewInfoList sets the infoList field to a newly
// allocated ServiceInfo_List, preferring placement in s's segment.
func (s CapLauncher_list_Results) NewInfoList(n int32) (ServiceInfo_List, error) {
	l, err := NewServiceInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ServiceInfo_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapLauncher_list_Results_List is a list of CapLauncher_list_Results.
type CapLauncher_list_Results_List = capnp.StructList[CapLauncher_list_Results]

// NewCapLauncher_list_Results creates a new list of CapLauncher_list_Results.
func NewCapLauncher_list_Results_List(s *capnp.Segment, sz int32) (CapLauncher_list_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapLauncher_list_Results](l), err
}

// CapLauncher_list_Results_Future is a wrapper for a CapLauncher_list_Results promised by a client call.
type CapLauncher_list_Results_Future struct{ *capnp.Future }

func (f CapLauncher_list_Results_Future) Struct() (CapLauncher_list_Results, error) {
	p, err := f.Future.Ptr()
	return CapLauncher_list_Results(p.Struct()), err
}

type CapLauncher_startService_Params capnp.Struct

// CapLauncher_startService_Params_TypeID is the unique identifier for the type CapLauncher_startService_Params.
const CapLauncher_startService_Params_TypeID = 0x9dd032618f0a61da

func NewCapLauncher_startService_Params(s *capnp.Segment) (CapLauncher_startService_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapLauncher_startService_Params(st), err
}

func NewRootCapLauncher_startService_Params(s *capnp.Segment) (CapLauncher_startService_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapLauncher_startService_Params(st), err
}

func ReadRootCapLauncher_startService_Params(msg *capnp.Message) (CapLauncher_startService_Params, error) {
	root, err := msg.Root()
	return CapLauncher_startService_Params(root.Struct()), err
}

func (s CapLauncher_startService_Params) String() string {
	str, _ := text.Marshal(0x9dd032618f0a61da, capnp.Struct(s))
	return str
}

func (s CapLauncher_startService_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapLauncher_startService_Params) DecodeFromPtr(p capnp.Ptr) CapLauncher_startService_Params {
	return CapLauncher_startService_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapLauncher_startService_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapLauncher_startService_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapLauncher_startService_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapLauncher_startService_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapLauncher_startService_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapLauncher_startService_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapLauncher_startService_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapLauncher_startService_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapLauncher_startService_Params_List is a list of CapLauncher_startService_Params.
type CapLauncher_startService_Params_List = capnp.StructList[CapLauncher_startService_Params]

// NewCapLauncher_startService_Params creates a new list of CapLauncher_startService_Params.
func NewCapLauncher_startService_Params_List(s *capnp.Segment, sz int32) (CapLauncher_startService_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapLauncher_startService_Params](l), err
}

// CapLauncher_startService_Params_Future is a wrapper for a CapLauncher_startService_Params promised by a client call.
type CapLauncher_startService_Params_Future struct{ *capnp.Future }

func (f CapLauncher_startService_Params_Future) Struct() (CapLauncher_startService_Params, error) {
	p, err := f.Future.Ptr()
	return CapLauncher_startService_Params(p.Struct()), err
}

type CapLauncher_startService_Results capnp.Struct

// CapLauncher_startService_Results_TypeID is the unique identifier for the type CapLauncher_startService_Results.
const CapLauncher_startService_Results_TypeID = 0xef6591cc288ebded

func NewCapLauncher_startService_Results(s *capnp.Segment) (CapLauncher_startService_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapLauncher_startService_Results(st), err
}

func NewRootCapLauncher_startService_Results(s *capnp.Segment) (CapLauncher_startService_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapLauncher_startService_Results(st), err
}

func ReadRootCapLauncher_startService_Results(msg *capnp.Message) (CapLauncher_startService_Results, error) {
	root, err := msg.Root()
	return CapLauncher_startService_Results(root.Struct()), err
}

func (s CapLauncher_startService_Results) String() string {
	str, _ := text.Marshal(0xef6591cc288ebded, capnp.Struct(s))
	return str
}

func (s CapLauncher_startService_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapLauncher_startService_Results) DecodeFromPtr(p capnp.Ptr) CapLauncher_startService_Results {
	return CapLauncher_startService_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapLauncher_startService_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapLauncher_startService_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapLauncher_startService_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapLauncher_startService_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapLauncher_startService_Results) Info() (ServiceInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ServiceInfo(p.Struct()), err
}

func (s CapLauncher_startService_Results) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapLauncher_startService_Results) SetInfo(v ServiceInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated ServiceInfo struct, preferring placement in s's segment.
func (s CapLauncher_startService_Results) NewInfo() (ServiceInfo, error) {
	ss, err := NewServiceInfo(capnp.Struct(s).Segment())
	if err != nil {
		return ServiceInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapLauncher_startService_Results_List is a list of CapLauncher_startService_Results.
type CapLauncher_startService_Results_List = capnp.StructList[CapLauncher_startService_Results]

// NewCapLauncher_startService_Results creates a new list of CapLauncher_startService_Results.
func NewCapLauncher_startService_Results_List(s *capnp.Segment, sz int32) (CapLauncher_startService_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapLauncher_startService_Results](l), err
}

// CapLauncher_startService_Results_Future is a wrapper for a CapLauncher_startService_Results promised by a client call.
type CapLauncher_startService_Results_Future struct{ *capnp.Future }

func (f CapLauncher_startService_Results_Future) Struct() (CapLauncher_startService_Results, error) {
	p, err := f.Future.Ptr()
	return CapLauncher_startService_Results(p.Struct()), err
}
func (p CapLauncher_startService_Results_Future) Info() ServiceInfo_Future {
	return ServiceInfo_Future{Future: p.Future.Field(0, nil)}
}

type CapLauncher_startAll_Params capnp.Struct

// CapLauncher_startAll_Params_TypeID is the unique identifier for the type CapLauncher_startAll_Params.
const CapLauncher_startAll_Params_TypeID = 0xa4f2766999f82f48

func NewCapLauncher_startAll_Params(s *capnp.Segment) (CapLauncher_startAll_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapLauncher_startAll_Params(st), err
}

func NewRootCapLauncher_startAll_Params(s *capnp.Segment) (CapLauncher_startAll_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapLauncher_startAll_Params(st), err
}

func ReadRootCapLauncher_startAll_Params(msg *capnp.Message) (CapLauncher_startAll_Params, error) {
	root, err := msg.Root()
	return CapLauncher_startAll_Params(root.Struct()), err
}

func (s CapLauncher_startAll_Params) String() string {
	str, _ := text.Marshal(0xa4f2766999f82f48, capnp.Struct(s))
	return str
}

func (s CapLauncher_startAll_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapLauncher_startAll_Params) DecodeFromPtr(p capnp.Ptr) CapLauncher_startAll_Params {
	return CapLauncher_startAll_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapLauncher_startAll_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapLauncher_startAll_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapLauncher_startAll_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapLauncher_startAll_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapLauncher_startAll_Params_List is a list of CapLauncher_startAll_Params.
type CapLauncher_startAll_Params_List = capnp.StructList[CapLauncher_startAll_Params]

// NewCapLauncher_startAll_Params creates a new list of CapLauncher_startAll_Params.
func NewCapLauncher_startAll_Params_List(s *capnp.Segment, sz int32) (CapLauncher_startAll_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapLauncher_startAll_Params](l), err
}

// CapLauncher_startAll_Params_Future is a wrapper for a CapLauncher_startAll_Params promised by a client call.
type CapLauncher_startAll_Params_Future struct{ *capnp.Future }

func (f CapLauncher_startAll_Params_Future) Struct() (CapLauncher_startAll_Params, error) {
	p, err := f.Future.Ptr()
	return CapLauncher_startAll_Params(p.Struct()), err
}

type CapLauncher_startAll_Results capnp.Struct

// CapLauncher_startAll_Results_TypeID is the unique identifier for the type CapLauncher_startAll_Results.
const CapLauncher_startAll_Results_TypeID = 0xd606313032e1634f

func NewCapLauncher_startAll_Results(s *capnp.Segment) (CapLauncher_startAll_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapLauncher_startAll_Results(st), err
}

func NewRootCapLauncher_startAll_Results(s *capnp.Segment) (CapLauncher_startAll_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapLauncher_startAll_Results(st), err
}

func ReadRootCapLauncher_startAll_Results(msg *capnp.Message) (CapLauncher_startAll_Results, error) {
	root, err := msg.Root()
	return CapLauncher_startAll_Results(root.Struct()), err
}

func (s CapLauncher_startAll_Results) String() string {
	str, _ := text.Marshal(0xd606313032e1634f, capnp.Struct(s))
	return str
}

func (s CapLauncher_startAll_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapLauncher_startAll_Results) DecodeFromPtr(p capnp.Ptr) CapLauncher_startAll_Results {
	return CapLauncher_startAll_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapLauncher_startAll_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapLauncher_startAll_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapLauncher_startAll_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapLauncher_startAll_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapLauncher_startAll_Results_List is a list of CapLauncher_startAll_Results.
type CapLauncher_startAll_Results_List = capnp.StructList[CapLauncher_startAll_Results]

// NewCapLauncher_startAll_Results creates a new list of CapLauncher_startAll_Results.
func NewCapLauncher_startAll_Results_List(s *capnp.Segment, sz int32) (CapLauncher_startAll_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapLauncher_startAll_Results](l), err
}

// CapLauncher_startAll_Results_Future is a wrapper for a CapLauncher_startAll_Results promised by a client call.
type CapLauncher_startAll_Results_Future struct{ *capnp.Future }

func (f CapLauncher_startAll_Results_Future) Struct() (CapLauncher_startAll_Results, error) {
	p, err := f.Future.Ptr()
	return CapLauncher_startAll_Results(p.Struct()), err
}

type CapLauncher_stopService_Params capnp.Struct

// CapLauncher_stopService_Params_TypeID is the unique identifier for the type CapLauncher_stopService_Params.
const CapLauncher_stopService_Params_TypeID = 0xe4f33c61c382a6a7

func NewCapLauncher_stopService_Params(s *capnp.Segment) (CapLauncher_stopService_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapLauncher_stopService_Params(st), err
}

func NewRootCapLauncher_stopService_Params(s *capnp.Segment) (CapLauncher_stopService_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapLauncher_stopService_Params(st), err
}

func ReadRootCapLauncher_stopService_Params(msg *capnp.Message) (CapLauncher_stopService_Params, error) {
	root, err := msg.Root()
	return CapLauncher_stopService_Params(root.Struct()), err
}

func (s CapLauncher_stopService_Params) String() string {
	str, _ := text.Marshal(0xe4f33c61c382a6a7, capnp.Struct(s))
	return str
}

func (s CapLauncher_stopService_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapLauncher_stopService_Params) DecodeFromPtr(p capnp.Ptr) CapLauncher_stopService_Params {
	return CapLauncher_stopService_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapLauncher_stopService_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapLauncher_stopService_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapLauncher_stopService_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapLauncher_stopService_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapLauncher_stopService_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapLauncher_stopService_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapLauncher_stopService_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapLauncher_stopService_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapLauncher_stopService_Params_List is a list of CapLauncher_stopService_Params.
type CapLauncher_stopService_Params_List = capnp.StructList[CapLauncher_stopService_Params]

// NewCapLauncher_stopService_Params creates a new list of CapLauncher_stopService_Params.
func NewCapLauncher_stopService_Params_List(s *capnp.Segment, sz int32) (CapLauncher_stopService_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapLauncher_stopService_Params](l), err
}

// CapLauncher_stopService_Params_Future is a wrapper for a CapLauncher_stopService_Params promised by a client call.
type CapLauncher_stopService_Params_Future struct{ *capnp.Future }

func (f CapLauncher_stopService_Params_Future) Struct() (CapLauncher_stopService_Params, error) {
	p, err := f.Future.Ptr()
	return CapLauncher_stopService_Params(p.Struct()), err
}

type CapLauncher_stopService_Results capnp.Struct

// CapLauncher_stopService_Results_TypeID is the unique identifier for the type CapLauncher_stopService_Results.
const CapLauncher_stopService_Results_TypeID = 0xb7dbdb4757bf491e

func NewCapLauncher_stopService_Results(s *capnp.Segment) (CapLauncher_stopService_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapLauncher_stopService_Results(st), err
}

func NewRootCapLauncher_stopService_Results(s *capnp.Segment) (CapLauncher_stopService_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapLauncher_stopService_Results(st), err
}

func ReadRootCapLauncher_stopService_Results(msg *capnp.Message) (CapLauncher_stopService_Results, error) {
	root, err := msg.Root()
	return CapLauncher_stopService_Results(root.Struct()), err
}

func (s CapLauncher_stopService_Results) String() string {
	str, _ := text.Marshal(0xb7dbdb4757bf491e, capnp.Struct(s))
	return str
}

func (s CapLauncher_stopService_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapLauncher_stopService_Results) DecodeFromPtr(p capnp.Ptr) CapLauncher_stopService_Results {
	return CapLauncher_stopService_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapLauncher_stopService_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapLauncher_stopService_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapLauncher_stopService_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapLauncher_stopService_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapLauncher_stopService_Results) Info() (ServiceInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ServiceInfo(p.Struct()), err
}

func (s CapLauncher_stopService_Results) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapLauncher_stopService_Results) SetInfo(v ServiceInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated ServiceInfo struct, preferring placement in s's segment.
func (s CapLauncher_stopService_Results) NewInfo() (ServiceInfo, error) {
	ss, err := NewServiceInfo(capnp.Struct(s).Segment())
	if err != nil {
		return ServiceInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapLauncher_stopService_Results_List is a list of CapLauncher_stopService_Results.
type CapLauncher_stopService_Results_List = capnp.StructList[CapLauncher_stopService_Results]

// NewCapLauncher_stopService_Results creates a new list of CapLauncher_stopService_Results.
func NewCapLauncher_stopService_Results_List(s *capnp.Segment, sz int32) (CapLauncher_stopService_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapLauncher_stopService_Results](l), err
}

// CapLauncher_stopService_Results_Future is a wrapper for a CapLauncher_stopService_Results promised by a client call.
type CapLauncher_stopService_Results_Future struct{ *capnp.Future }

func (f CapLauncher_stopService_Results_Future) Struct() (CapLauncher_stopService_Results, error) {
	p, err := f.Future.Ptr()
	return CapLauncher_stopService_Results(p.Struct()), err
}
func (p CapLauncher_stopService_Results_Future) Info() ServiceInfo_Future {
	return ServiceInfo_Future{Future: p.Future.Field(0, nil)}
}

type CapLauncher_stopAll_Params capnp.Struct

// CapLauncher_stopAll_Params_TypeID is the unique identifier for the type CapLauncher_stopAll_Params.
const CapLauncher_stopAll_Params_TypeID = 0x97fd81fe4e5a7de8

func NewCapLauncher_stopAll_Params(s *capnp.Segment) (CapLauncher_stopAll_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapLauncher_stopAll_Params(st), err
}

func NewRootCapLauncher_stopAll_Params(s *capnp.Segment) (CapLauncher_stopAll_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapLauncher_stopAll_Params(st), err
}

func ReadRootCapLauncher_stopAll_Params(msg *capnp.Message) (CapLauncher_stopAll_Params, error) {
	root, err := msg.Root()
	return CapLauncher_stopAll_Params(root.Struct()), err
}

func (s CapLauncher_stopAll_Params) String() string {
	str, _ := text.Marshal(0x97fd81fe4e5a7de8, capnp.Struct(s))
	return str
}

func (s CapLauncher_stopAll_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapLauncher_stopAll_Params) DecodeFromPtr(p capnp.Ptr) CapLauncher_stopAll_Params {
	return CapLauncher_stopAll_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapLauncher_stopAll_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapLauncher_stopAll_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapLauncher_stopAll_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapLauncher_stopAll_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapLauncher_stopAll_Params_List is a list of CapLauncher_stopAll_Params.
type CapLauncher_stopAll_Params_List = capnp.StructList[CapLauncher_stopAll_Params]

// NewCapLauncher_stopAll_Params creates a new list of CapLauncher_stopAll_Params.
func NewCapLauncher_stopAll_Params_List(s *capnp.Segment, sz int32) (CapLauncher_stopAll_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapLauncher_stopAll_Params](l), err
}

// CapLauncher_stopAll_Params_Future is a wrapper for a CapLauncher_stopAll_Params promised by a client call.
type CapLauncher_stopAll_Params_Future struct{ *capnp.Future }

func (f CapLauncher_stopAll_Params_Future) Struct() (CapLauncher_stopAll_Params, error) {
	p, err := f.Future.Ptr()
	return CapLauncher_stopAll_Params(p.Struct()), err
}

type CapLauncher_stopAll_Results capnp.Struct

// CapLauncher_stopAll_Results_TypeID is the unique identifier for the type CapLauncher_stopAll_Results.
const CapLauncher_stopAll_Results_TypeID = 0xe272876d68537114

func NewCapLauncher_stopAll_Results(s *capnp.Segment) (CapLauncher_stopAll_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapLauncher_stopAll_Results(st), err
}

func NewRootCapLauncher_stopAll_Results(s *capnp.Segment) (CapLauncher_stopAll_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapLauncher_stopAll_Results(st), err
}

func ReadRootCapLauncher_stopAll_Results(msg *capnp.Message) (CapLauncher_stopAll_Results, error) {
	root, err := msg.Root()
	return CapLauncher_stopAll_Results(root.Struct()), err
}

func (s CapLauncher_stopAll_Results) String() string {
	str, _ := text.Marshal(0xe272876d68537114, capnp.Struct(s))
	return str
}

func (s CapLauncher_stopAll_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapLauncher_stopAll_Results) DecodeFromPtr(p capnp.Ptr) CapLauncher_stopAll_Results {
	return CapLauncher_stopAll_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapLauncher_stopAll_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapLauncher_stopAll_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapLauncher_stopAll_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapLauncher_stopAll_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapLauncher_stopAll_Results_List is a list of CapLauncher_stopAll_Results.
type CapLauncher_stopAll_Results_List = capnp.StructList[CapLauncher_stopAll_Results]

// NewCapLauncher_stopAll_Results creates a new list of CapLauncher_stopAll_Results.
func NewCapLauncher_stopAll_Results_List(s *capnp.Segment, sz int32) (CapLauncher_stopAll_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapLauncher_stopAll_Results](l), err
}

// CapLauncher_stopAll_Results_Future is a wrapper for a CapLauncher_stopAll_Results promised by a client call.
type CapLauncher_stopAll_Results_Future struct{ *capnp.Future }

func (f CapLauncher_stopAll_Results_Future) Struct() (CapLauncher_stopAll_Results, error) {
	p, err := f.Future.Ptr()
	return CapLauncher_stopAll_Results(p.Struct()), err
}

const schema_e42f87955bd521e9 = "x\xda\xac\x95]\x88\x15u\x18\xc6\x9f\xe7?3gV" +
	"];\x8e3HD$\x89\x17&\xe1g]$\xca\xae" +
	"\x1a\xd8.b\xe7\x9c\x11RCh\xdc\x1d;#\xe7\xcc" +
	"9\x9e\x99#\xae(~\xa0\x19\xd2\x97\x91\xa5\x85\xe0\x85" +
	"\xa4\x16\xddT`JQ\x11]\x04]Dd\x17y!" +
	"\x86AA\x12\xd9M]\xe4\xc4;{\xe6\xecl\xb9\xb4" +
	"\x1b\xdd\xed\xff\xf7\xbe\xcf\xfb5\xef\xbbg\xc93\xaa_" +
	"_:\xf3\x9a\x01U~\xd4($o_^~\xcf\xc5" +
	"O\xce\x1cCy\x0e\x8d\xe4\xa7\xfb\xaf<y\xe2\xe8\xe2" +
	"\x1b0\x0a&\xb0\xfc\x8a\x9aM\xfb\x07%\x7f^W\xd7" +
	"\x14\x98|\xbd\xf9\x8dK\x95\xb5\x95Wa\xcd\xd1\xc6\xbc" +
	"\xc1\xe5\xd7\x8d\xd9\xb4\x7f5\xc4\xf5\xa6\xb1\x8e\xf6\xa7\x12" +
	" \xf9q\xdf\x96\x0d\xb7\x0f\xfe\xf9\x1a\xacy\x04t\xb1" +
	"^(\x1c#\xf4\xe4;o\xfa\x8b\xde\xb2\xafN\x8fZ" +
	"\x0c\x8a\xe9T\xe1]\x82\xf6\x85B\x1f\x98<\xb6\xf8\xf7" +
	"S\xc1\xae[gs\xd2/\x0a/\x8b\xf4\xfc{\x83\x1f" +
	"\xce\xb8\xf7\x83sy\xe9\xa5\xc2\x1e\x91~\x9eJ\xef\x1b" +
	"\xf8\xf8\x89uW\xaf^\xcc;\xfc1\x1a{\x9a)\x0e" +
	"\\U\xd5\xf7y+\xbfAy\x1e\xb3\xe0\x0f\x98-q" +
	"x8ux|\xe8\xfa\xb2%K\x0b\xdf\xe6\x92o6" +
	"_\x97\xe4\xceN\xb7Z?\xda\xfa>g\x190\xd3\xb2" +
	"\xce\xbdy\xe83o\xe5o7\xf2Y\x1f1\xdf\x92\xa0" +
	"\x03i\xd0\x9b\x1f\xbd\xb0\xe0\xcb\xe3\xfe/y\x87\xc0\xbc" +
	",\x0e#\xa9C|k\xe4\xe7M\x87\xf6\xde\x865G" +
	"\x1f7\xdcSf\x85\xf6;\xa6\x09\xb8\xe7M\x8d\xee\xfb" +
	"\xa6\"\x1eL\xaa\xedm^3X\xbc^\xf3\xda\xe1P" +
	"\xd5o-\x1a\xf2\x9aas\x85\xeb\xb7v\x05C\xfe@" +
	"\xb8\x9d\x8d\x12Y~H\xd3\x01\x9d\x80\xbd\x95\xf3\x00w" +
	"\x135\xba\xc3T$\x1di\xdf\xf6\xb8\x03p\x9f\x12\\" +
	"\xa3\xa2\xa5\xe8P\x01v\xc0\x85\x80;,\xbc)\\S" +
	"\x0e5\xc0\xae\xa7\xbc*<\x16\xae\xd3\xa1\x0e\xd8;\xd3" +
	"\xf05\xe1\xbb\x85\x1bth\x00v;\xe5M\xe1{\x85" +
	"\x17\x0e8,\x00\xf6\x08\xd7\x00n,\xfc\x80pSs" +
	"d(\xf6\xbe4\xfen\xe1\x87\x85\xf7h\x0e{\x00\xfb" +
	" W\x00\xee^\xe1\xcf\x0a\x9ff8\x9c\x06\xd8G\xb8" +
	"\x05p\x0f\x0b\x7fI\xf8t\xdd\xe1t\xc0~\x9e\x15\xc0" +
	"}N\xf8I\xe13\x0c\x873\x00\xfb\x04\x07\x01\xf7\x15" +
	"\xe1g\x84\xf7\xf68\xec\x05\xec\xd3i\xfc\x93\xc2\xcfR" +
	"\xd1\x1cj\xb6\xa9CQ\x07\x93zc8\xd8\x1e\xf8\xc3" +
	"(n\x0c\xea>{\xa1\xd8\x0b\x16C/\xf7hzq" +
	"5{\x98\xcd`8\x13\x9b\xad(\xa2\x01E\x03\xdc\xdf" +
	"j\x87a\x10>MB\x91`1\x0a\xf6\xf8\x99\xb1/" +
	"\x8a\xbd\xb8\x1de1\x92(\xf6Z\xf1\xdaF\x1bZ\x18" +
	"w+I\xe1\xc6\xa0\x0e\xfa9\xc7FS\xea\x02\x90\xb1" +
	"\xbev3\x96J3\xd9\x04\xcb\xb2\xd6k\xae\x1f%l" +
	"\xc9\xb28\x9a\x01t\x0f\x84\xd9\xadY\xc7\x17BYG" +
	"L\xb2{\xb9\xcc\xf6\xd9\x1a\xd9\x01e\xed4\xa9\xbaG" +
	"\xcb\xec\x80,\x7f\x10\xca\xdajR\xeb\xde\x07\xb3\xf3\xb4" +
	"\xca\xdb\xa0\xac\x01\x93z\xf7\xff\x04\xb3\xf3\xb2V\xad\x81" +
	"\xb2\x96\x9a\xc5Z\x10\xc5\xfd\x9d\xa6]\xbf\x85\xa2\xacv" +
	"\x06V\xd7j\x00\xfaG\xfb\x97\xb5\x87\x99Z\xf7\xcb{" +
	"u\xad\xd6\xcf\x12\xc7:7&\xea\xbc\xb5\xa8\xe3?\xbf" +
	"\xe4\xb5\xbcz\x04LN3Z\x92\x144\xbf47U" +
	"\x96\xf5\xec\xd6\xac\x99\x0b\x81r\x8f\xc6\xb2\xa3\xc6\xaf\xc9" +
	"\xa4cw\x0bb\xd4\xd5\xe8\x13kdR\xf3+}~" +
	"\xd4\xae\xc5\xe3\x0a\x19\x04\xca\xbd\x1a\xcb\x0b\x14\x93 \xdc" +
	"\xdeX\x1fD\xb1,\xca]`I#g\x8d\xfd\x06\x80" +
	"\x02';\xb0\xac\xf7\x8a?\xf7\x1f9\xf3\xcdK\xce\xbf" +
	"e\x99\x95\xcb\xf2o-\xdda\xb4\xdb:\x1d\xdd\xad\x98" +
	"4\xc2\xdaH\xa5\x1d\x860sW5\xa5\x19Wdd" +
	"Z\x1cMeQRM\xcch\xaa\xb3*y\xc5\xff}" +
	"O\xba\xdf\xe1\x0e\xdf\xfe\xbf\x7f\x87Z\xe7\xd9\x89\xbe\xc1" +
	"\xab\xd3/\x91\x9d\xea`q0\xc9\\\x00\xfc\x15\x00\x00" +
	"\xff\xff\xf4\x195`"

func init() {
	schemas.Register(schema_e42f87955bd521e9,
		0x8aa0c0b71a33baab,
		0x96524352b99b59d2,
		0x97fd81fe4e5a7de8,
		0x9dd032618f0a61da,
		0xa4f2766999f82f48,
		0xa7b81c0bbc4ab3a8,
		0xb7dbdb4757bf491e,
		0xd43c617d04683d01,
		0xd606313032e1634f,
		0xe272876d68537114,
		0xe4f33c61c382a6a7,
		0xef6591cc288ebded,
		0xfe7c8258ec79f274)
}

// Code generated by capnpc-go. DO NOT EDIT.

package hubapi

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

// Constants defined in Thing.capnp.
const (
	GoISO8601Format = "2006-01-02T15:04:05.000-0700"
)

type ThingValue capnp.Struct

// ThingValue_TypeID is the unique identifier for the type ThingValue.
const ThingValue_TypeID = 0x9bd6e69db8968092

func NewThingValue(s *capnp.Segment) (ThingValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ThingValue(st), err
}

func NewRootThingValue(s *capnp.Segment) (ThingValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ThingValue(st), err
}

func ReadRootThingValue(msg *capnp.Message) (ThingValue, error) {
	root, err := msg.Root()
	return ThingValue(root.Struct()), err
}

func (s ThingValue) String() string {
	str, _ := text.Marshal(0x9bd6e69db8968092, capnp.Struct(s))
	return str
}

func (s ThingValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ThingValue) DecodeFromPtr(p capnp.Ptr) ThingValue {
	return ThingValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ThingValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ThingValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ThingValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ThingValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ThingValue) PublisherID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ThingValue) HasPublisherID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ThingValue) PublisherIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ThingValue) SetPublisherID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ThingValue) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ThingValue) HasThingID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ThingValue) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ThingValue) SetThingID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ThingValue) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ThingValue) HasName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ThingValue) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ThingValue) SetName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s ThingValue) ValueJSON() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s ThingValue) HasValueJSON() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ThingValue) SetValueJSON(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

func (s ThingValue) Created() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s ThingValue) HasCreated() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s ThingValue) CreatedBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s ThingValue) SetCreated(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

// ThingValue_List is a list of ThingValue.
type ThingValue_List = capnp.StructList[ThingValue]

// NewThingValue creates a new list of ThingValue.
func NewThingValue_List(s *capnp.Segment, sz int32) (ThingValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[ThingValue](l), err
}

// ThingValue_Future is a wrapper for a ThingValue promised by a client call.
type ThingValue_Future struct{ *capnp.Future }

func (f ThingValue_Future) Struct() (ThingValue, error) {
	p, err := f.Future.Ptr()
	return ThingValue(p.Struct()), err
}

type ThingValueMap capnp.Struct

// ThingValueMap_TypeID is the unique identifier for the type ThingValueMap.
const ThingValueMap_TypeID = 0xccab8f814d133426

func NewThingValueMap(s *capnp.Segment) (ThingValueMap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ThingValueMap(st), err
}

func NewRootThingValueMap(s *capnp.Segment) (ThingValueMap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ThingValueMap(st), err
}

func ReadRootThingValueMap(msg *capnp.Message) (ThingValueMap, error) {
	root, err := msg.Root()
	return ThingValueMap(root.Struct()), err
}

func (s ThingValueMap) String() string {
	str, _ := text.Marshal(0xccab8f814d133426, capnp.Struct(s))
	return str
}

func (s ThingValueMap) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ThingValueMap) DecodeFromPtr(p capnp.Ptr) ThingValueMap {
	return ThingValueMap(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ThingValueMap) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ThingValueMap) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ThingValueMap) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ThingValueMap) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ThingValueMap) Entries() (ThingValueMap_Entry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValueMap_Entry_List(p.List()), err
}

func (s ThingValueMap) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ThingValueMap) SetEntries(v ThingValueMap_Entry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated ThingValueMap_Entry_List, preferring placement in s's segment.
func (s ThingValueMap) NewEntries(n int32) (ThingValueMap_Entry_List, error) {
	l, err := NewThingValueMap_Entry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ThingValueMap_Entry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ThingValueMap_List is a list of ThingValueMap.
type ThingValueMap_List = capnp.StructList[ThingValueMap]

// NewThingValueMap creates a new list of ThingValueMap.
func NewThingValueMap_List(s *capnp.Segment, sz int32) (ThingValueMap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ThingValueMap](l), err
}

// ThingValueMap_Future is a wrapper for a ThingValueMap promised by a client call.
type ThingValueMap_Future struct{ *capnp.Future }

func (f ThingValueMap_Future) Struct() (ThingValueMap, error) {
	p, err := f.Future.Ptr()
	return ThingValueMap(p.Struct()), err
}

type ThingValueMap_Entry capnp.Struct

// ThingValueMap_Entry_TypeID is the unique identifier for the type ThingValueMap_Entry.
const ThingValueMap_Entry_TypeID = 0xa75dd2927f33dca6

func NewThingValueMap_Entry(s *capnp.Segment) (ThingValueMap_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ThingValueMap_Entry(st), err
}

func NewRootThingValueMap_Entry(s *capnp.Segment) (ThingValueMap_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ThingValueMap_Entry(st), err
}

func ReadRootThingValueMap_Entry(msg *capnp.Message) (ThingValueMap_Entry, error) {
	root, err := msg.Root()
	return ThingValueMap_Entry(root.Struct()), err
}

func (s ThingValueMap_Entry) String() string {
	str, _ := text.Marshal(0xa75dd2927f33dca6, capnp.Struct(s))
	return str
}

func (s ThingValueMap_Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ThingValueMap_Entry) DecodeFromPtr(p capnp.Ptr) ThingValueMap_Entry {
	return ThingValueMap_Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ThingValueMap_Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ThingValueMap_Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ThingValueMap_Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ThingValueMap_Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ThingValueMap_Entry) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ThingValueMap_Entry) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ThingValueMap_Entry) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ThingValueMap_Entry) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ThingValueMap_Entry) Value() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return ThingValue(p.Struct()), err
}

func (s ThingValueMap_Entry) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ThingValueMap_Entry) SetValue(v ThingValue) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s ThingValueMap_Entry) NewValue() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ThingValueMap_Entry_List is a list of ThingValueMap_Entry.
type ThingValueMap_Entry_List = capnp.StructList[ThingValueMap_Entry]

// NewThingValueMap_Entry creates a new list of ThingValueMap_Entry.
func NewThingValueMap_Entry_List(s *capnp.Segment, sz int32) (ThingValueMap_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ThingValueMap_Entry](l), err
}

// ThingValueMap_Entry_Future is a wrapper for a ThingValueMap_Entry promised by a client call.
type ThingValueMap_Entry_Future struct{ *capnp.Future }

func (f ThingValueMap_Entry_Future) Struct() (ThingValueMap_Entry, error) {
	p, err := f.Future.Ptr()
	return ThingValueMap_Entry(p.Struct()), err
}
func (p ThingValueMap_Entry_Future) Value() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(1, nil)}
}

const schema_bb31fb6e03b18e9a = "x\xda\x84\x92\xcfk\x13_\x14\xc5\xcf\xb9o\xf2M\xf9" +
	"\xd2\xd8>& \xb8\x89J\x15\x15R_\xd2\x1fJ6" +
	"\x15Q!Bm\x9e\x89\xee\\L\xea\xd0\x04\xdbiH" +
	"\x13%\xa0\xa4\x82\x05\x85\xaa\xa5\xa0\x88?\x96\xea\xc2\x8d" +
	"\xee\x04\xff\x00\x11\xdc\xe8\xc2U7\xba\x10u#\xb8\x13" +
	"\x17#\x13LR\x05q\xf7\xee\xe5\xdes\xce\xe7q\x8d" +
	"\xc3CN&\xf1R v{\xec\xbfp}\xf9\xf6\xf3" +
	"\x07\x1f\xdf\xdd\x83v\x19\xde\xbd\xf1L\x05?2/\x10" +
	"\x8b\xc5\x017\xcfo\xee)\xc6\x811\xcb\x14\xc1\xf0\xd1" +
	"\xc6X{\xfd\xed\x99\xc7\xd0;\x18\xee\x1ew\xa7/\xdf" +
	"|\xf2\x1a1\x89F\xaa\x92\xa3\xdb\x8a\x9enS.\x80" +
	"_w=|\x1a\xff\xb0\xf2J\xbbN_\x17\x1c{#" +
	"\xdb\xe8\xbe\x8f\xe6\x8a\x1b\xa2X\xfc$B\xa0\xaf\xf6{" +
	"\x8e\x8e\xfbg\xf9\x9f\xeew\xd9\x0a\xb8TSH\x87\x95" +
	"f\xd9\xabU\xf7\x97\xa4R\x0d\xe6Fg\xbdZP\xcb" +
	"\x95\xa2w\xea\xb47\xdf\xf4\x0b\xa4M*\x07p\x08\xe8" +
	"Ke\xc0^T\xb4W\x85\x9aL2j\xae\x1c\x06\xec" +
	"\xb2\xa2]\x15j\x91$\x05\xd0\xd7\xf6\x01\xf6\x8a\xa2]" +
	"\x13j\xa5\x92T\x80\xbe~\x12\xb0\xab\x8a\xf6\x8eP;" +
	"N\x92\x0e\xa0oE\xebk\x8a\xf6\xbe0\xac5\xcb\xf3" +
	"\xd5\xa5\x8a\x8fx=\x7f\x84\x83\x10\x0e\x82\xedF\x94\xa7" +
	"_\x0f\x05\xde\x82\xdf-\xc2\xf3Q\xcc\xe3\xc5\x19\xf0\x04" +
	"\x13\x10&\xc0\xf6l\xdd\xf7\x1a\xfe\xd9\xdeL\x17R\xfd" +
	"\x09\xd9a\x9c\xf6jS\xa3G\x83F\xbd\x15\xd1\x0e\xf4" +
	"h\xf7\xee\x04\xec\x88\xa25\x9bh\xd3Y\xc0\xeeQ\xb4" +
	"\xe3\xc2\xf89\xbf\xd5\xf5Hurp\xb8\x7f\x05 \x87" +
	"\xff\xe2=\xb7\x98/\xce\x1c\x9c4\x99c\x8b\xf5\x05\xe5" +
	"5\x0a\xe4/\x1dh~\x09\xb3\xc6L\xa6M&-&" +
	"[\xcaL\xe4\xccx\xceL\x8c\x1ac\xd2C\xe6\x801" +
	"\xff\xa6\x01\xac\xc3\xcd'\xc6l\xaa\xc3g\x9d\x1e\\\"" +
	"\xfa\xf6\x01E;\"l\xfbA\xa3^\xf5\x97\xb8\x05," +
	"(r\xb8\xbf\x0aF\xcd\x9f\x01\x00\x00\xff\xff\xde\xf9\xb8" +
	"]"

func init() {
	schemas.Register(schema_bb31fb6e03b18e9a,
		0x9bd6e69db8968092,
		0xa75dd2927f33dca6,
		0xc985e20007b0a525,
		0xccab8f814d133426)
}

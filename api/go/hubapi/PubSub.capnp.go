// Code generated by capnpc-go. DO NOT EDIT.

package hubapi

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

// Constants defined in PubSub.capnp.
const (
	PubsubServiceName    = "pubsub"
	CapNameDevicePubSub  = "capDevicePubSub"
	CapNameServicePubSub = "capServicePubSub"
	CapNameUserPubSub    = "capUserPubSub"
	ThingsPrefix         = "things"
	MessageTypeAction    = "action"
	MessageTypeEvent     = "event"
	EventNameProperties  = "properties"
	EventNameTD          = "td"
	ActionNameConfig     = "configuration"
)

type CapPubSubService capnp.Client

// CapPubSubService_TypeID is the unique identifier for the type CapPubSubService.
const CapPubSubService_TypeID = 0xe4a8e3bfe7c72fdf

func (c CapPubSubService) CapDevicePubSub(ctx context.Context, params func(CapPubSubService_capDevicePubSub_Params) error) (CapPubSubService_capDevicePubSub_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe4a8e3bfe7c72fdf,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapPubSubService",
			MethodName:    "capDevicePubSub",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapPubSubService_capDevicePubSub_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapPubSubService_capDevicePubSub_Results_Future{Future: ans.Future()}, release
}
func (c CapPubSubService) CapServicePubSub(ctx context.Context, params func(CapPubSubService_capServicePubSub_Params) error) (CapPubSubService_capServicePubSub_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe4a8e3bfe7c72fdf,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapPubSubService",
			MethodName:    "capServicePubSub",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapPubSubService_capServicePubSub_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapPubSubService_capServicePubSub_Results_Future{Future: ans.Future()}, release
}
func (c CapPubSubService) CapUserPubSub(ctx context.Context, params func(CapPubSubService_capUserPubSub_Params) error) (CapPubSubService_capUserPubSub_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe4a8e3bfe7c72fdf,
			MethodID:      2,
			InterfaceName: "hubapi/PubSub.capnp:CapPubSubService",
			MethodName:    "capUserPubSub",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapPubSubService_capUserPubSub_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapPubSubService_capUserPubSub_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapPubSubService) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapPubSubService) AddRef() CapPubSubService {
	return CapPubSubService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapPubSubService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapPubSubService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapPubSubService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapPubSubService) DecodeFromPtr(p capnp.Ptr) CapPubSubService {
	return CapPubSubService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapPubSubService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapPubSubService) IsSame(other CapPubSubService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapPubSubService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapPubSubService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapPubSubService_Server is a CapPubSubService with a local implementation.
type CapPubSubService_Server interface {
	CapDevicePubSub(context.Context, CapPubSubService_capDevicePubSub) error

	CapServicePubSub(context.Context, CapPubSubService_capServicePubSub) error

	CapUserPubSub(context.Context, CapPubSubService_capUserPubSub) error
}

// CapPubSubService_NewServer creates a new Server from an implementation of CapPubSubService_Server.
func CapPubSubService_NewServer(s CapPubSubService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapPubSubService_Methods(nil, s), s, c)
}

// CapPubSubService_ServerToClient creates a new Client from an implementation of CapPubSubService_Server.
// The caller is responsible for calling Release on the returned Client.
func CapPubSubService_ServerToClient(s CapPubSubService_Server) CapPubSubService {
	return CapPubSubService(capnp.NewClient(CapPubSubService_NewServer(s)))
}

// CapPubSubService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapPubSubService_Methods(methods []server.Method, s CapPubSubService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe4a8e3bfe7c72fdf,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapPubSubService",
			MethodName:    "capDevicePubSub",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapDevicePubSub(ctx, CapPubSubService_capDevicePubSub{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe4a8e3bfe7c72fdf,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapPubSubService",
			MethodName:    "capServicePubSub",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapServicePubSub(ctx, CapPubSubService_capServicePubSub{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe4a8e3bfe7c72fdf,
			MethodID:      2,
			InterfaceName: "hubapi/PubSub.capnp:CapPubSubService",
			MethodName:    "capUserPubSub",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapUserPubSub(ctx, CapPubSubService_capUserPubSub{call})
		},
	})

	return methods
}

// CapPubSubService_capDevicePubSub holds the state for a server call to CapPubSubService.capDevicePubSub.
// See server.Call for documentation.
type CapPubSubService_capDevicePubSub struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapPubSubService_capDevicePubSub) Args() CapPubSubService_capDevicePubSub_Params {
	return CapPubSubService_capDevicePubSub_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapPubSubService_capDevicePubSub) AllocResults() (CapPubSubService_capDevicePubSub_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capDevicePubSub_Results(r), err
}

// CapPubSubService_capServicePubSub holds the state for a server call to CapPubSubService.capServicePubSub.
// See server.Call for documentation.
type CapPubSubService_capServicePubSub struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapPubSubService_capServicePubSub) Args() CapPubSubService_capServicePubSub_Params {
	return CapPubSubService_capServicePubSub_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapPubSubService_capServicePubSub) AllocResults() (CapPubSubService_capServicePubSub_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capServicePubSub_Results(r), err
}

// CapPubSubService_capUserPubSub holds the state for a server call to CapPubSubService.capUserPubSub.
// See server.Call for documentation.
type CapPubSubService_capUserPubSub struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapPubSubService_capUserPubSub) Args() CapPubSubService_capUserPubSub_Params {
	return CapPubSubService_capUserPubSub_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapPubSubService_capUserPubSub) AllocResults() (CapPubSubService_capUserPubSub_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capUserPubSub_Results(r), err
}

// CapPubSubService_List is a list of CapPubSubService.
type CapPubSubService_List = capnp.CapList[CapPubSubService]

// NewCapPubSubService creates a new list of CapPubSubService.
func NewCapPubSubService_List(s *capnp.Segment, sz int32) (CapPubSubService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapPubSubService](l), err
}

type CapPubSubService_capDevicePubSub_Params capnp.Struct

// CapPubSubService_capDevicePubSub_Params_TypeID is the unique identifier for the type CapPubSubService_capDevicePubSub_Params.
const CapPubSubService_capDevicePubSub_Params_TypeID = 0x997bc227bdb0ae49

func NewCapPubSubService_capDevicePubSub_Params(s *capnp.Segment) (CapPubSubService_capDevicePubSub_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capDevicePubSub_Params(st), err
}

func NewRootCapPubSubService_capDevicePubSub_Params(s *capnp.Segment) (CapPubSubService_capDevicePubSub_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capDevicePubSub_Params(st), err
}

func ReadRootCapPubSubService_capDevicePubSub_Params(msg *capnp.Message) (CapPubSubService_capDevicePubSub_Params, error) {
	root, err := msg.Root()
	return CapPubSubService_capDevicePubSub_Params(root.Struct()), err
}

func (s CapPubSubService_capDevicePubSub_Params) String() string {
	str, _ := text.Marshal(0x997bc227bdb0ae49, capnp.Struct(s))
	return str
}

func (s CapPubSubService_capDevicePubSub_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapPubSubService_capDevicePubSub_Params) DecodeFromPtr(p capnp.Ptr) CapPubSubService_capDevicePubSub_Params {
	return CapPubSubService_capDevicePubSub_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapPubSubService_capDevicePubSub_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapPubSubService_capDevicePubSub_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapPubSubService_capDevicePubSub_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapPubSubService_capDevicePubSub_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapPubSubService_capDevicePubSub_Params) DeviceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapPubSubService_capDevicePubSub_Params) HasDeviceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapPubSubService_capDevicePubSub_Params) DeviceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapPubSubService_capDevicePubSub_Params) SetDeviceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapPubSubService_capDevicePubSub_Params_List is a list of CapPubSubService_capDevicePubSub_Params.
type CapPubSubService_capDevicePubSub_Params_List = capnp.StructList[CapPubSubService_capDevicePubSub_Params]

// NewCapPubSubService_capDevicePubSub_Params creates a new list of CapPubSubService_capDevicePubSub_Params.
func NewCapPubSubService_capDevicePubSub_Params_List(s *capnp.Segment, sz int32) (CapPubSubService_capDevicePubSub_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapPubSubService_capDevicePubSub_Params](l), err
}

// CapPubSubService_capDevicePubSub_Params_Future is a wrapper for a CapPubSubService_capDevicePubSub_Params promised by a client call.
type CapPubSubService_capDevicePubSub_Params_Future struct{ *capnp.Future }

func (f CapPubSubService_capDevicePubSub_Params_Future) Struct() (CapPubSubService_capDevicePubSub_Params, error) {
	p, err := f.Future.Ptr()
	return CapPubSubService_capDevicePubSub_Params(p.Struct()), err
}

type CapPubSubService_capDevicePubSub_Results capnp.Struct

// CapPubSubService_capDevicePubSub_Results_TypeID is the unique identifier for the type CapPubSubService_capDevicePubSub_Results.
const CapPubSubService_capDevicePubSub_Results_TypeID = 0xfb030c3f99d5f3de

func NewCapPubSubService_capDevicePubSub_Results(s *capnp.Segment) (CapPubSubService_capDevicePubSub_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capDevicePubSub_Results(st), err
}

func NewRootCapPubSubService_capDevicePubSub_Results(s *capnp.Segment) (CapPubSubService_capDevicePubSub_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capDevicePubSub_Results(st), err
}

func ReadRootCapPubSubService_capDevicePubSub_Results(msg *capnp.Message) (CapPubSubService_capDevicePubSub_Results, error) {
	root, err := msg.Root()
	return CapPubSubService_capDevicePubSub_Results(root.Struct()), err
}

func (s CapPubSubService_capDevicePubSub_Results) String() string {
	str, _ := text.Marshal(0xfb030c3f99d5f3de, capnp.Struct(s))
	return str
}

func (s CapPubSubService_capDevicePubSub_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapPubSubService_capDevicePubSub_Results) DecodeFromPtr(p capnp.Ptr) CapPubSubService_capDevicePubSub_Results {
	return CapPubSubService_capDevicePubSub_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapPubSubService_capDevicePubSub_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapPubSubService_capDevicePubSub_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapPubSubService_capDevicePubSub_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapPubSubService_capDevicePubSub_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapPubSubService_capDevicePubSub_Results) Cap() CapDevicePubSub {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapDevicePubSub(p.Interface().Client())
}

func (s CapPubSubService_capDevicePubSub_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapPubSubService_capDevicePubSub_Results) SetCap(v CapDevicePubSub) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapPubSubService_capDevicePubSub_Results_List is a list of CapPubSubService_capDevicePubSub_Results.
type CapPubSubService_capDevicePubSub_Results_List = capnp.StructList[CapPubSubService_capDevicePubSub_Results]

// NewCapPubSubService_capDevicePubSub_Results creates a new list of CapPubSubService_capDevicePubSub_Results.
func NewCapPubSubService_capDevicePubSub_Results_List(s *capnp.Segment, sz int32) (CapPubSubService_capDevicePubSub_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapPubSubService_capDevicePubSub_Results](l), err
}

// CapPubSubService_capDevicePubSub_Results_Future is a wrapper for a CapPubSubService_capDevicePubSub_Results promised by a client call.
type CapPubSubService_capDevicePubSub_Results_Future struct{ *capnp.Future }

func (f CapPubSubService_capDevicePubSub_Results_Future) Struct() (CapPubSubService_capDevicePubSub_Results, error) {
	p, err := f.Future.Ptr()
	return CapPubSubService_capDevicePubSub_Results(p.Struct()), err
}
func (p CapPubSubService_capDevicePubSub_Results_Future) Cap() CapDevicePubSub {
	return CapDevicePubSub(p.Future.Field(0, nil).Client())
}

type CapPubSubService_capServicePubSub_Params capnp.Struct

// CapPubSubService_capServicePubSub_Params_TypeID is the unique identifier for the type CapPubSubService_capServicePubSub_Params.
const CapPubSubService_capServicePubSub_Params_TypeID = 0xbc0d0aa70387a01a

func NewCapPubSubService_capServicePubSub_Params(s *capnp.Segment) (CapPubSubService_capServicePubSub_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capServicePubSub_Params(st), err
}

func NewRootCapPubSubService_capServicePubSub_Params(s *capnp.Segment) (CapPubSubService_capServicePubSub_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capServicePubSub_Params(st), err
}

func ReadRootCapPubSubService_capServicePubSub_Params(msg *capnp.Message) (CapPubSubService_capServicePubSub_Params, error) {
	root, err := msg.Root()
	return CapPubSubService_capServicePubSub_Params(root.Struct()), err
}

func (s CapPubSubService_capServicePubSub_Params) String() string {
	str, _ := text.Marshal(0xbc0d0aa70387a01a, capnp.Struct(s))
	return str
}

func (s CapPubSubService_capServicePubSub_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapPubSubService_capServicePubSub_Params) DecodeFromPtr(p capnp.Ptr) CapPubSubService_capServicePubSub_Params {
	return CapPubSubService_capServicePubSub_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapPubSubService_capServicePubSub_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapPubSubService_capServicePubSub_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapPubSubService_capServicePubSub_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapPubSubService_capServicePubSub_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapPubSubService_capServicePubSub_Params) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapPubSubService_capServicePubSub_Params) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapPubSubService_capServicePubSub_Params) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapPubSubService_capServicePubSub_Params) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapPubSubService_capServicePubSub_Params_List is a list of CapPubSubService_capServicePubSub_Params.
type CapPubSubService_capServicePubSub_Params_List = capnp.StructList[CapPubSubService_capServicePubSub_Params]

// NewCapPubSubService_capServicePubSub_Params creates a new list of CapPubSubService_capServicePubSub_Params.
func NewCapPubSubService_capServicePubSub_Params_List(s *capnp.Segment, sz int32) (CapPubSubService_capServicePubSub_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapPubSubService_capServicePubSub_Params](l), err
}

// CapPubSubService_capServicePubSub_Params_Future is a wrapper for a CapPubSubService_capServicePubSub_Params promised by a client call.
type CapPubSubService_capServicePubSub_Params_Future struct{ *capnp.Future }

func (f CapPubSubService_capServicePubSub_Params_Future) Struct() (CapPubSubService_capServicePubSub_Params, error) {
	p, err := f.Future.Ptr()
	return CapPubSubService_capServicePubSub_Params(p.Struct()), err
}

type CapPubSubService_capServicePubSub_Results capnp.Struct

// CapPubSubService_capServicePubSub_Results_TypeID is the unique identifier for the type CapPubSubService_capServicePubSub_Results.
const CapPubSubService_capServicePubSub_Results_TypeID = 0xd326fc0f35d8303b

func NewCapPubSubService_capServicePubSub_Results(s *capnp.Segment) (CapPubSubService_capServicePubSub_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capServicePubSub_Results(st), err
}

func NewRootCapPubSubService_capServicePubSub_Results(s *capnp.Segment) (CapPubSubService_capServicePubSub_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capServicePubSub_Results(st), err
}

func ReadRootCapPubSubService_capServicePubSub_Results(msg *capnp.Message) (CapPubSubService_capServicePubSub_Results, error) {
	root, err := msg.Root()
	return CapPubSubService_capServicePubSub_Results(root.Struct()), err
}

func (s CapPubSubService_capServicePubSub_Results) String() string {
	str, _ := text.Marshal(0xd326fc0f35d8303b, capnp.Struct(s))
	return str
}

func (s CapPubSubService_capServicePubSub_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapPubSubService_capServicePubSub_Results) DecodeFromPtr(p capnp.Ptr) CapPubSubService_capServicePubSub_Results {
	return CapPubSubService_capServicePubSub_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapPubSubService_capServicePubSub_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapPubSubService_capServicePubSub_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapPubSubService_capServicePubSub_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapPubSubService_capServicePubSub_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapPubSubService_capServicePubSub_Results) Cap() CapServicePubSub {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapServicePubSub(p.Interface().Client())
}

func (s CapPubSubService_capServicePubSub_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapPubSubService_capServicePubSub_Results) SetCap(v CapServicePubSub) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapPubSubService_capServicePubSub_Results_List is a list of CapPubSubService_capServicePubSub_Results.
type CapPubSubService_capServicePubSub_Results_List = capnp.StructList[CapPubSubService_capServicePubSub_Results]

// NewCapPubSubService_capServicePubSub_Results creates a new list of CapPubSubService_capServicePubSub_Results.
func NewCapPubSubService_capServicePubSub_Results_List(s *capnp.Segment, sz int32) (CapPubSubService_capServicePubSub_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapPubSubService_capServicePubSub_Results](l), err
}

// CapPubSubService_capServicePubSub_Results_Future is a wrapper for a CapPubSubService_capServicePubSub_Results promised by a client call.
type CapPubSubService_capServicePubSub_Results_Future struct{ *capnp.Future }

func (f CapPubSubService_capServicePubSub_Results_Future) Struct() (CapPubSubService_capServicePubSub_Results, error) {
	p, err := f.Future.Ptr()
	return CapPubSubService_capServicePubSub_Results(p.Struct()), err
}
func (p CapPubSubService_capServicePubSub_Results_Future) Cap() CapServicePubSub {
	return CapServicePubSub(p.Future.Field(0, nil).Client())
}

type CapPubSubService_capUserPubSub_Params capnp.Struct

// CapPubSubService_capUserPubSub_Params_TypeID is the unique identifier for the type CapPubSubService_capUserPubSub_Params.
const CapPubSubService_capUserPubSub_Params_TypeID = 0xc5a7633821f7b5fb

func NewCapPubSubService_capUserPubSub_Params(s *capnp.Segment) (CapPubSubService_capUserPubSub_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capUserPubSub_Params(st), err
}

func NewRootCapPubSubService_capUserPubSub_Params(s *capnp.Segment) (CapPubSubService_capUserPubSub_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capUserPubSub_Params(st), err
}

func ReadRootCapPubSubService_capUserPubSub_Params(msg *capnp.Message) (CapPubSubService_capUserPubSub_Params, error) {
	root, err := msg.Root()
	return CapPubSubService_capUserPubSub_Params(root.Struct()), err
}

func (s CapPubSubService_capUserPubSub_Params) String() string {
	str, _ := text.Marshal(0xc5a7633821f7b5fb, capnp.Struct(s))
	return str
}

func (s CapPubSubService_capUserPubSub_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapPubSubService_capUserPubSub_Params) DecodeFromPtr(p capnp.Ptr) CapPubSubService_capUserPubSub_Params {
	return CapPubSubService_capUserPubSub_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapPubSubService_capUserPubSub_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapPubSubService_capUserPubSub_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapPubSubService_capUserPubSub_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapPubSubService_capUserPubSub_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapPubSubService_capUserPubSub_Params) UserID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapPubSubService_capUserPubSub_Params) HasUserID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapPubSubService_capUserPubSub_Params) UserIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapPubSubService_capUserPubSub_Params) SetUserID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapPubSubService_capUserPubSub_Params_List is a list of CapPubSubService_capUserPubSub_Params.
type CapPubSubService_capUserPubSub_Params_List = capnp.StructList[CapPubSubService_capUserPubSub_Params]

// NewCapPubSubService_capUserPubSub_Params creates a new list of CapPubSubService_capUserPubSub_Params.
func NewCapPubSubService_capUserPubSub_Params_List(s *capnp.Segment, sz int32) (CapPubSubService_capUserPubSub_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapPubSubService_capUserPubSub_Params](l), err
}

// CapPubSubService_capUserPubSub_Params_Future is a wrapper for a CapPubSubService_capUserPubSub_Params promised by a client call.
type CapPubSubService_capUserPubSub_Params_Future struct{ *capnp.Future }

func (f CapPubSubService_capUserPubSub_Params_Future) Struct() (CapPubSubService_capUserPubSub_Params, error) {
	p, err := f.Future.Ptr()
	return CapPubSubService_capUserPubSub_Params(p.Struct()), err
}

type CapPubSubService_capUserPubSub_Results capnp.Struct

// CapPubSubService_capUserPubSub_Results_TypeID is the unique identifier for the type CapPubSubService_capUserPubSub_Results.
const CapPubSubService_capUserPubSub_Results_TypeID = 0xd5c39e93b94cc83b

func NewCapPubSubService_capUserPubSub_Results(s *capnp.Segment) (CapPubSubService_capUserPubSub_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capUserPubSub_Results(st), err
}

func NewRootCapPubSubService_capUserPubSub_Results(s *capnp.Segment) (CapPubSubService_capUserPubSub_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capUserPubSub_Results(st), err
}

func ReadRootCapPubSubService_capUserPubSub_Results(msg *capnp.Message) (CapPubSubService_capUserPubSub_Results, error) {
	root, err := msg.Root()
	return CapPubSubService_capUserPubSub_Results(root.Struct()), err
}

func (s CapPubSubService_capUserPubSub_Results) String() string {
	str, _ := text.Marshal(0xd5c39e93b94cc83b, capnp.Struct(s))
	return str
}

func (s CapPubSubService_capUserPubSub_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapPubSubService_capUserPubSub_Results) DecodeFromPtr(p capnp.Ptr) CapPubSubService_capUserPubSub_Results {
	return CapPubSubService_capUserPubSub_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapPubSubService_capUserPubSub_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapPubSubService_capUserPubSub_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapPubSubService_capUserPubSub_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapPubSubService_capUserPubSub_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapPubSubService_capUserPubSub_Results) Cap() CapUserPubSub {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapUserPubSub(p.Interface().Client())
}

func (s CapPubSubService_capUserPubSub_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapPubSubService_capUserPubSub_Results) SetCap(v CapUserPubSub) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapPubSubService_capUserPubSub_Results_List is a list of CapPubSubService_capUserPubSub_Results.
type CapPubSubService_capUserPubSub_Results_List = capnp.StructList[CapPubSubService_capUserPubSub_Results]

// NewCapPubSubService_capUserPubSub_Results creates a new list of CapPubSubService_capUserPubSub_Results.
func NewCapPubSubService_capUserPubSub_Results_List(s *capnp.Segment, sz int32) (CapPubSubService_capUserPubSub_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapPubSubService_capUserPubSub_Results](l), err
}

// CapPubSubService_capUserPubSub_Results_Future is a wrapper for a CapPubSubService_capUserPubSub_Results promised by a client call.
type CapPubSubService_capUserPubSub_Results_Future struct{ *capnp.Future }

func (f CapPubSubService_capUserPubSub_Results_Future) Struct() (CapPubSubService_capUserPubSub_Results, error) {
	p, err := f.Future.Ptr()
	return CapPubSubService_capUserPubSub_Results(p.Struct()), err
}
func (p CapPubSubService_capUserPubSub_Results_Future) Cap() CapUserPubSub {
	return CapUserPubSub(p.Future.Field(0, nil).Client())
}

type CapDevicePubSub capnp.Client

// CapDevicePubSub_TypeID is the unique identifier for the type CapDevicePubSub.
const CapDevicePubSub_TypeID = 0xdfb8a690e8697e4a

func (c CapDevicePubSub) PubEvent(ctx context.Context, params func(CapDevicePubSub_pubEvent_Params) error) (CapDevicePubSub_pubEvent_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "pubEvent",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDevicePubSub_pubEvent_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDevicePubSub_pubEvent_Results_Future{Future: ans.Future()}, release
}
func (c CapDevicePubSub) SubAction(ctx context.Context, params func(CapDevicePubSub_subAction_Params) error) (CapDevicePubSub_subAction_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "subAction",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDevicePubSub_subAction_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDevicePubSub_subAction_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapDevicePubSub) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapDevicePubSub) AddRef() CapDevicePubSub {
	return CapDevicePubSub(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapDevicePubSub) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapDevicePubSub) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapDevicePubSub) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapDevicePubSub) DecodeFromPtr(p capnp.Ptr) CapDevicePubSub {
	return CapDevicePubSub(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapDevicePubSub) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapDevicePubSub) IsSame(other CapDevicePubSub) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapDevicePubSub) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapDevicePubSub) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapDevicePubSub_Server is a CapDevicePubSub with a local implementation.
type CapDevicePubSub_Server interface {
	PubEvent(context.Context, CapDevicePubSub_pubEvent) error

	SubAction(context.Context, CapDevicePubSub_subAction) error
}

// CapDevicePubSub_NewServer creates a new Server from an implementation of CapDevicePubSub_Server.
func CapDevicePubSub_NewServer(s CapDevicePubSub_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapDevicePubSub_Methods(nil, s), s, c)
}

// CapDevicePubSub_ServerToClient creates a new Client from an implementation of CapDevicePubSub_Server.
// The caller is responsible for calling Release on the returned Client.
func CapDevicePubSub_ServerToClient(s CapDevicePubSub_Server) CapDevicePubSub {
	return CapDevicePubSub(capnp.NewClient(CapDevicePubSub_NewServer(s)))
}

// CapDevicePubSub_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapDevicePubSub_Methods(methods []server.Method, s CapDevicePubSub_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "pubEvent",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PubEvent(ctx, CapDevicePubSub_pubEvent{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "subAction",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SubAction(ctx, CapDevicePubSub_subAction{call})
		},
	})

	return methods
}

// CapDevicePubSub_pubEvent holds the state for a server call to CapDevicePubSub.pubEvent.
// See server.Call for documentation.
type CapDevicePubSub_pubEvent struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapDevicePubSub_pubEvent) Args() CapDevicePubSub_pubEvent_Params {
	return CapDevicePubSub_pubEvent_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapDevicePubSub_pubEvent) AllocResults() (CapDevicePubSub_pubEvent_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_pubEvent_Results(r), err
}

// CapDevicePubSub_subAction holds the state for a server call to CapDevicePubSub.subAction.
// See server.Call for documentation.
type CapDevicePubSub_subAction struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapDevicePubSub_subAction) Args() CapDevicePubSub_subAction_Params {
	return CapDevicePubSub_subAction_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapDevicePubSub_subAction) AllocResults() (CapDevicePubSub_subAction_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_subAction_Results(r), err
}

// CapDevicePubSub_List is a list of CapDevicePubSub.
type CapDevicePubSub_List = capnp.CapList[CapDevicePubSub]

// NewCapDevicePubSub creates a new list of CapDevicePubSub.
func NewCapDevicePubSub_List(s *capnp.Segment, sz int32) (CapDevicePubSub_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapDevicePubSub](l), err
}

type CapDevicePubSub_pubEvent_Params capnp.Struct

// CapDevicePubSub_pubEvent_Params_TypeID is the unique identifier for the type CapDevicePubSub_pubEvent_Params.
const CapDevicePubSub_pubEvent_Params_TypeID = 0x87cc5066fed0778c

func NewCapDevicePubSub_pubEvent_Params(s *capnp.Segment) (CapDevicePubSub_pubEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapDevicePubSub_pubEvent_Params(st), err
}

func NewRootCapDevicePubSub_pubEvent_Params(s *capnp.Segment) (CapDevicePubSub_pubEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapDevicePubSub_pubEvent_Params(st), err
}

func ReadRootCapDevicePubSub_pubEvent_Params(msg *capnp.Message) (CapDevicePubSub_pubEvent_Params, error) {
	root, err := msg.Root()
	return CapDevicePubSub_pubEvent_Params(root.Struct()), err
}

func (s CapDevicePubSub_pubEvent_Params) String() string {
	str, _ := text.Marshal(0x87cc5066fed0778c, capnp.Struct(s))
	return str
}

func (s CapDevicePubSub_pubEvent_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDevicePubSub_pubEvent_Params) DecodeFromPtr(p capnp.Ptr) CapDevicePubSub_pubEvent_Params {
	return CapDevicePubSub_pubEvent_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDevicePubSub_pubEvent_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDevicePubSub_pubEvent_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDevicePubSub_pubEvent_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDevicePubSub_pubEvent_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDevicePubSub_pubEvent_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapDevicePubSub_pubEvent_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDevicePubSub_pubEvent_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapDevicePubSub_pubEvent_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapDevicePubSub_pubEvent_Params) EventID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapDevicePubSub_pubEvent_Params) HasEventID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapDevicePubSub_pubEvent_Params) EventIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapDevicePubSub_pubEvent_Params) SetEventID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapDevicePubSub_pubEvent_Params) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s CapDevicePubSub_pubEvent_Params) HasValue() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapDevicePubSub_pubEvent_Params) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

// CapDevicePubSub_pubEvent_Params_List is a list of CapDevicePubSub_pubEvent_Params.
type CapDevicePubSub_pubEvent_Params_List = capnp.StructList[CapDevicePubSub_pubEvent_Params]

// NewCapDevicePubSub_pubEvent_Params creates a new list of CapDevicePubSub_pubEvent_Params.
func NewCapDevicePubSub_pubEvent_Params_List(s *capnp.Segment, sz int32) (CapDevicePubSub_pubEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[CapDevicePubSub_pubEvent_Params](l), err
}

// CapDevicePubSub_pubEvent_Params_Future is a wrapper for a CapDevicePubSub_pubEvent_Params promised by a client call.
type CapDevicePubSub_pubEvent_Params_Future struct{ *capnp.Future }

func (f CapDevicePubSub_pubEvent_Params_Future) Struct() (CapDevicePubSub_pubEvent_Params, error) {
	p, err := f.Future.Ptr()
	return CapDevicePubSub_pubEvent_Params(p.Struct()), err
}

type CapDevicePubSub_pubEvent_Results capnp.Struct

// CapDevicePubSub_pubEvent_Results_TypeID is the unique identifier for the type CapDevicePubSub_pubEvent_Results.
const CapDevicePubSub_pubEvent_Results_TypeID = 0xd6e9ff28b3be9b63

func NewCapDevicePubSub_pubEvent_Results(s *capnp.Segment) (CapDevicePubSub_pubEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_pubEvent_Results(st), err
}

func NewRootCapDevicePubSub_pubEvent_Results(s *capnp.Segment) (CapDevicePubSub_pubEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_pubEvent_Results(st), err
}

func ReadRootCapDevicePubSub_pubEvent_Results(msg *capnp.Message) (CapDevicePubSub_pubEvent_Results, error) {
	root, err := msg.Root()
	return CapDevicePubSub_pubEvent_Results(root.Struct()), err
}

func (s CapDevicePubSub_pubEvent_Results) String() string {
	str, _ := text.Marshal(0xd6e9ff28b3be9b63, capnp.Struct(s))
	return str
}

func (s CapDevicePubSub_pubEvent_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDevicePubSub_pubEvent_Results) DecodeFromPtr(p capnp.Ptr) CapDevicePubSub_pubEvent_Results {
	return CapDevicePubSub_pubEvent_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDevicePubSub_pubEvent_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDevicePubSub_pubEvent_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDevicePubSub_pubEvent_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDevicePubSub_pubEvent_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapDevicePubSub_pubEvent_Results_List is a list of CapDevicePubSub_pubEvent_Results.
type CapDevicePubSub_pubEvent_Results_List = capnp.StructList[CapDevicePubSub_pubEvent_Results]

// NewCapDevicePubSub_pubEvent_Results creates a new list of CapDevicePubSub_pubEvent_Results.
func NewCapDevicePubSub_pubEvent_Results_List(s *capnp.Segment, sz int32) (CapDevicePubSub_pubEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapDevicePubSub_pubEvent_Results](l), err
}

// CapDevicePubSub_pubEvent_Results_Future is a wrapper for a CapDevicePubSub_pubEvent_Results promised by a client call.
type CapDevicePubSub_pubEvent_Results_Future struct{ *capnp.Future }

func (f CapDevicePubSub_pubEvent_Results_Future) Struct() (CapDevicePubSub_pubEvent_Results, error) {
	p, err := f.Future.Ptr()
	return CapDevicePubSub_pubEvent_Results(p.Struct()), err
}

type CapDevicePubSub_subAction_Params capnp.Struct

// CapDevicePubSub_subAction_Params_TypeID is the unique identifier for the type CapDevicePubSub_subAction_Params.
const CapDevicePubSub_subAction_Params_TypeID = 0x8654dd0285fb2417

func NewCapDevicePubSub_subAction_Params(s *capnp.Segment) (CapDevicePubSub_subAction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapDevicePubSub_subAction_Params(st), err
}

func NewRootCapDevicePubSub_subAction_Params(s *capnp.Segment) (CapDevicePubSub_subAction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapDevicePubSub_subAction_Params(st), err
}

func ReadRootCapDevicePubSub_subAction_Params(msg *capnp.Message) (CapDevicePubSub_subAction_Params, error) {
	root, err := msg.Root()
	return CapDevicePubSub_subAction_Params(root.Struct()), err
}

func (s CapDevicePubSub_subAction_Params) String() string {
	str, _ := text.Marshal(0x8654dd0285fb2417, capnp.Struct(s))
	return str
}

func (s CapDevicePubSub_subAction_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDevicePubSub_subAction_Params) DecodeFromPtr(p capnp.Ptr) CapDevicePubSub_subAction_Params {
	return CapDevicePubSub_subAction_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDevicePubSub_subAction_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDevicePubSub_subAction_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDevicePubSub_subAction_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDevicePubSub_subAction_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDevicePubSub_subAction_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapDevicePubSub_subAction_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDevicePubSub_subAction_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapDevicePubSub_subAction_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapDevicePubSub_subAction_Params) ActionID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapDevicePubSub_subAction_Params) HasActionID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapDevicePubSub_subAction_Params) ActionIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapDevicePubSub_subAction_Params) SetActionID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapDevicePubSub_subAction_Params) Handler() CapSubscriptionHandler {
	p, _ := capnp.Struct(s).Ptr(2)
	return CapSubscriptionHandler(p.Interface().Client())
}

func (s CapDevicePubSub_subAction_Params) HasHandler() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapDevicePubSub_subAction_Params) SetHandler(v CapSubscriptionHandler) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

// CapDevicePubSub_subAction_Params_List is a list of CapDevicePubSub_subAction_Params.
type CapDevicePubSub_subAction_Params_List = capnp.StructList[CapDevicePubSub_subAction_Params]

// NewCapDevicePubSub_subAction_Params creates a new list of CapDevicePubSub_subAction_Params.
func NewCapDevicePubSub_subAction_Params_List(s *capnp.Segment, sz int32) (CapDevicePubSub_subAction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[CapDevicePubSub_subAction_Params](l), err
}

// CapDevicePubSub_subAction_Params_Future is a wrapper for a CapDevicePubSub_subAction_Params promised by a client call.
type CapDevicePubSub_subAction_Params_Future struct{ *capnp.Future }

func (f CapDevicePubSub_subAction_Params_Future) Struct() (CapDevicePubSub_subAction_Params, error) {
	p, err := f.Future.Ptr()
	return CapDevicePubSub_subAction_Params(p.Struct()), err
}
func (p CapDevicePubSub_subAction_Params_Future) Handler() CapSubscriptionHandler {
	return CapSubscriptionHandler(p.Future.Field(2, nil).Client())
}

type CapDevicePubSub_subAction_Results capnp.Struct

// CapDevicePubSub_subAction_Results_TypeID is the unique identifier for the type CapDevicePubSub_subAction_Results.
const CapDevicePubSub_subAction_Results_TypeID = 0x963848ac762fb0d0

func NewCapDevicePubSub_subAction_Results(s *capnp.Segment) (CapDevicePubSub_subAction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_subAction_Results(st), err
}

func NewRootCapDevicePubSub_subAction_Results(s *capnp.Segment) (CapDevicePubSub_subAction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_subAction_Results(st), err
}

func ReadRootCapDevicePubSub_subAction_Results(msg *capnp.Message) (CapDevicePubSub_subAction_Results, error) {
	root, err := msg.Root()
	return CapDevicePubSub_subAction_Results(root.Struct()), err
}

func (s CapDevicePubSub_subAction_Results) String() string {
	str, _ := text.Marshal(0x963848ac762fb0d0, capnp.Struct(s))
	return str
}

func (s CapDevicePubSub_subAction_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDevicePubSub_subAction_Results) DecodeFromPtr(p capnp.Ptr) CapDevicePubSub_subAction_Results {
	return CapDevicePubSub_subAction_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDevicePubSub_subAction_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDevicePubSub_subAction_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDevicePubSub_subAction_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDevicePubSub_subAction_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapDevicePubSub_subAction_Results_List is a list of CapDevicePubSub_subAction_Results.
type CapDevicePubSub_subAction_Results_List = capnp.StructList[CapDevicePubSub_subAction_Results]

// NewCapDevicePubSub_subAction_Results creates a new list of CapDevicePubSub_subAction_Results.
func NewCapDevicePubSub_subAction_Results_List(s *capnp.Segment, sz int32) (CapDevicePubSub_subAction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapDevicePubSub_subAction_Results](l), err
}

// CapDevicePubSub_subAction_Results_Future is a wrapper for a CapDevicePubSub_subAction_Results promised by a client call.
type CapDevicePubSub_subAction_Results_Future struct{ *capnp.Future }

func (f CapDevicePubSub_subAction_Results_Future) Struct() (CapDevicePubSub_subAction_Results, error) {
	p, err := f.Future.Ptr()
	return CapDevicePubSub_subAction_Results(p.Struct()), err
}

type CapServicePubSub capnp.Client

// CapServicePubSub_TypeID is the unique identifier for the type CapServicePubSub.
const CapServicePubSub_TypeID = 0xf9bfff17720dccba

func (c CapServicePubSub) SubActions(ctx context.Context, params func(CapServicePubSub_subActions_Params) error) (CapServicePubSub_subActions_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf9bfff17720dccba,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapServicePubSub",
			MethodName:    "subActions",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapServicePubSub_subActions_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapServicePubSub_subActions_Results_Future{Future: ans.Future()}, release
}
func (c CapServicePubSub) SubEvents(ctx context.Context, params func(CapServicePubSub_subEvents_Params) error) (CapServicePubSub_subEvents_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf9bfff17720dccba,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapServicePubSub",
			MethodName:    "subEvents",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapServicePubSub_subEvents_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapServicePubSub_subEvents_Results_Future{Future: ans.Future()}, release
}
func (c CapServicePubSub) PubEvent(ctx context.Context, params func(CapDevicePubSub_pubEvent_Params) error) (CapDevicePubSub_pubEvent_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "pubEvent",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDevicePubSub_pubEvent_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDevicePubSub_pubEvent_Results_Future{Future: ans.Future()}, release
}
func (c CapServicePubSub) SubAction(ctx context.Context, params func(CapDevicePubSub_subAction_Params) error) (CapDevicePubSub_subAction_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "subAction",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDevicePubSub_subAction_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDevicePubSub_subAction_Results_Future{Future: ans.Future()}, release
}
func (c CapServicePubSub) PubAction(ctx context.Context, params func(CapUserPubSub_pubAction_Params) error) (CapUserPubSub_pubAction_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "pubAction",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapUserPubSub_pubAction_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapUserPubSub_pubAction_Results_Future{Future: ans.Future()}, release
}
func (c CapServicePubSub) SubEvent(ctx context.Context, params func(CapUserPubSub_subEvent_Params) error) (CapUserPubSub_subEvent_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "subEvent",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapUserPubSub_subEvent_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapUserPubSub_subEvent_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapServicePubSub) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapServicePubSub) AddRef() CapServicePubSub {
	return CapServicePubSub(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapServicePubSub) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapServicePubSub) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapServicePubSub) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapServicePubSub) DecodeFromPtr(p capnp.Ptr) CapServicePubSub {
	return CapServicePubSub(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapServicePubSub) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapServicePubSub) IsSame(other CapServicePubSub) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapServicePubSub) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapServicePubSub) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapServicePubSub_Server is a CapServicePubSub with a local implementation.
type CapServicePubSub_Server interface {
	SubActions(context.Context, CapServicePubSub_subActions) error

	SubEvents(context.Context, CapServicePubSub_subEvents) error

	PubEvent(context.Context, CapDevicePubSub_pubEvent) error

	SubAction(context.Context, CapDevicePubSub_subAction) error

	PubAction(context.Context, CapUserPubSub_pubAction) error

	SubEvent(context.Context, CapUserPubSub_subEvent) error
}

// CapServicePubSub_NewServer creates a new Server from an implementation of CapServicePubSub_Server.
func CapServicePubSub_NewServer(s CapServicePubSub_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapServicePubSub_Methods(nil, s), s, c)
}

// CapServicePubSub_ServerToClient creates a new Client from an implementation of CapServicePubSub_Server.
// The caller is responsible for calling Release on the returned Client.
func CapServicePubSub_ServerToClient(s CapServicePubSub_Server) CapServicePubSub {
	return CapServicePubSub(capnp.NewClient(CapServicePubSub_NewServer(s)))
}

// CapServicePubSub_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapServicePubSub_Methods(methods []server.Method, s CapServicePubSub_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf9bfff17720dccba,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapServicePubSub",
			MethodName:    "subActions",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SubActions(ctx, CapServicePubSub_subActions{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf9bfff17720dccba,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapServicePubSub",
			MethodName:    "subEvents",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SubEvents(ctx, CapServicePubSub_subEvents{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "pubEvent",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PubEvent(ctx, CapDevicePubSub_pubEvent{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "subAction",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SubAction(ctx, CapDevicePubSub_subAction{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "pubAction",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PubAction(ctx, CapUserPubSub_pubAction{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "subEvent",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SubEvent(ctx, CapUserPubSub_subEvent{call})
		},
	})

	return methods
}

// CapServicePubSub_subActions holds the state for a server call to CapServicePubSub.subActions.
// See server.Call for documentation.
type CapServicePubSub_subActions struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapServicePubSub_subActions) Args() CapServicePubSub_subActions_Params {
	return CapServicePubSub_subActions_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapServicePubSub_subActions) AllocResults() (CapServicePubSub_subActions_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapServicePubSub_subActions_Results(r), err
}

// CapServicePubSub_subEvents holds the state for a server call to CapServicePubSub.subEvents.
// See server.Call for documentation.
type CapServicePubSub_subEvents struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapServicePubSub_subEvents) Args() CapServicePubSub_subEvents_Params {
	return CapServicePubSub_subEvents_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapServicePubSub_subEvents) AllocResults() (CapServicePubSub_subEvents_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapServicePubSub_subEvents_Results(r), err
}

// CapServicePubSub_List is a list of CapServicePubSub.
type CapServicePubSub_List = capnp.CapList[CapServicePubSub]

// NewCapServicePubSub creates a new list of CapServicePubSub.
func NewCapServicePubSub_List(s *capnp.Segment, sz int32) (CapServicePubSub_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapServicePubSub](l), err
}

type CapServicePubSub_subActions_Params capnp.Struct

// CapServicePubSub_subActions_Params_TypeID is the unique identifier for the type CapServicePubSub_subActions_Params.
const CapServicePubSub_subActions_Params_TypeID = 0xee3e107dce1b7eee

func NewCapServicePubSub_subActions_Params(s *capnp.Segment) (CapServicePubSub_subActions_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CapServicePubSub_subActions_Params(st), err
}

func NewRootCapServicePubSub_subActions_Params(s *capnp.Segment) (CapServicePubSub_subActions_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CapServicePubSub_subActions_Params(st), err
}

func ReadRootCapServicePubSub_subActions_Params(msg *capnp.Message) (CapServicePubSub_subActions_Params, error) {
	root, err := msg.Root()
	return CapServicePubSub_subActions_Params(root.Struct()), err
}

func (s CapServicePubSub_subActions_Params) String() string {
	str, _ := text.Marshal(0xee3e107dce1b7eee, capnp.Struct(s))
	return str
}

func (s CapServicePubSub_subActions_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapServicePubSub_subActions_Params) DecodeFromPtr(p capnp.Ptr) CapServicePubSub_subActions_Params {
	return CapServicePubSub_subActions_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapServicePubSub_subActions_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapServicePubSub_subActions_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapServicePubSub_subActions_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapServicePubSub_subActions_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapServicePubSub_subActions_Params) PublisherID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapServicePubSub_subActions_Params) HasPublisherID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapServicePubSub_subActions_Params) PublisherIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapServicePubSub_subActions_Params) SetPublisherID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapServicePubSub_subActions_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapServicePubSub_subActions_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapServicePubSub_subActions_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapServicePubSub_subActions_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapServicePubSub_subActions_Params) ActionID() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CapServicePubSub_subActions_Params) HasActionID() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapServicePubSub_subActions_Params) ActionIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CapServicePubSub_subActions_Params) SetActionID(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s CapServicePubSub_subActions_Params) Handler() CapSubscriptionHandler {
	p, _ := capnp.Struct(s).Ptr(3)
	return CapSubscriptionHandler(p.Interface().Client())
}

func (s CapServicePubSub_subActions_Params) HasHandler() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CapServicePubSub_subActions_Params) SetHandler(v CapSubscriptionHandler) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

// CapServicePubSub_subActions_Params_List is a list of CapServicePubSub_subActions_Params.
type CapServicePubSub_subActions_Params_List = capnp.StructList[CapServicePubSub_subActions_Params]

// NewCapServicePubSub_subActions_Params creates a new list of CapServicePubSub_subActions_Params.
func NewCapServicePubSub_subActions_Params_List(s *capnp.Segment, sz int32) (CapServicePubSub_subActions_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[CapServicePubSub_subActions_Params](l), err
}

// CapServicePubSub_subActions_Params_Future is a wrapper for a CapServicePubSub_subActions_Params promised by a client call.
type CapServicePubSub_subActions_Params_Future struct{ *capnp.Future }

func (f CapServicePubSub_subActions_Params_Future) Struct() (CapServicePubSub_subActions_Params, error) {
	p, err := f.Future.Ptr()
	return CapServicePubSub_subActions_Params(p.Struct()), err
}
func (p CapServicePubSub_subActions_Params_Future) Handler() CapSubscriptionHandler {
	return CapSubscriptionHandler(p.Future.Field(3, nil).Client())
}

type CapServicePubSub_subActions_Results capnp.Struct

// CapServicePubSub_subActions_Results_TypeID is the unique identifier for the type CapServicePubSub_subActions_Results.
const CapServicePubSub_subActions_Results_TypeID = 0xb495269b0f4ed2b7

func NewCapServicePubSub_subActions_Results(s *capnp.Segment) (CapServicePubSub_subActions_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapServicePubSub_subActions_Results(st), err
}

func NewRootCapServicePubSub_subActions_Results(s *capnp.Segment) (CapServicePubSub_subActions_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapServicePubSub_subActions_Results(st), err
}

func ReadRootCapServicePubSub_subActions_Results(msg *capnp.Message) (CapServicePubSub_subActions_Results, error) {
	root, err := msg.Root()
	return CapServicePubSub_subActions_Results(root.Struct()), err
}

func (s CapServicePubSub_subActions_Results) String() string {
	str, _ := text.Marshal(0xb495269b0f4ed2b7, capnp.Struct(s))
	return str
}

func (s CapServicePubSub_subActions_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapServicePubSub_subActions_Results) DecodeFromPtr(p capnp.Ptr) CapServicePubSub_subActions_Results {
	return CapServicePubSub_subActions_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapServicePubSub_subActions_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapServicePubSub_subActions_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapServicePubSub_subActions_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapServicePubSub_subActions_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapServicePubSub_subActions_Results_List is a list of CapServicePubSub_subActions_Results.
type CapServicePubSub_subActions_Results_List = capnp.StructList[CapServicePubSub_subActions_Results]

// NewCapServicePubSub_subActions_Results creates a new list of CapServicePubSub_subActions_Results.
func NewCapServicePubSub_subActions_Results_List(s *capnp.Segment, sz int32) (CapServicePubSub_subActions_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapServicePubSub_subActions_Results](l), err
}

// CapServicePubSub_subActions_Results_Future is a wrapper for a CapServicePubSub_subActions_Results promised by a client call.
type CapServicePubSub_subActions_Results_Future struct{ *capnp.Future }

func (f CapServicePubSub_subActions_Results_Future) Struct() (CapServicePubSub_subActions_Results, error) {
	p, err := f.Future.Ptr()
	return CapServicePubSub_subActions_Results(p.Struct()), err
}

type CapServicePubSub_subEvents_Params capnp.Struct

// CapServicePubSub_subEvents_Params_TypeID is the unique identifier for the type CapServicePubSub_subEvents_Params.
const CapServicePubSub_subEvents_Params_TypeID = 0xe6bca3833ee86dc4

func NewCapServicePubSub_subEvents_Params(s *capnp.Segment) (CapServicePubSub_subEvents_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CapServicePubSub_subEvents_Params(st), err
}

func NewRootCapServicePubSub_subEvents_Params(s *capnp.Segment) (CapServicePubSub_subEvents_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CapServicePubSub_subEvents_Params(st), err
}

func ReadRootCapServicePubSub_subEvents_Params(msg *capnp.Message) (CapServicePubSub_subEvents_Params, error) {
	root, err := msg.Root()
	return CapServicePubSub_subEvents_Params(root.Struct()), err
}

func (s CapServicePubSub_subEvents_Params) String() string {
	str, _ := text.Marshal(0xe6bca3833ee86dc4, capnp.Struct(s))
	return str
}

func (s CapServicePubSub_subEvents_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapServicePubSub_subEvents_Params) DecodeFromPtr(p capnp.Ptr) CapServicePubSub_subEvents_Params {
	return CapServicePubSub_subEvents_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapServicePubSub_subEvents_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapServicePubSub_subEvents_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapServicePubSub_subEvents_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapServicePubSub_subEvents_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapServicePubSub_subEvents_Params) PublisherID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapServicePubSub_subEvents_Params) HasPublisherID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapServicePubSub_subEvents_Params) PublisherIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapServicePubSub_subEvents_Params) SetPublisherID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapServicePubSub_subEvents_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapServicePubSub_subEvents_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapServicePubSub_subEvents_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapServicePubSub_subEvents_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapServicePubSub_subEvents_Params) EventID() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CapServicePubSub_subEvents_Params) HasEventID() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapServicePubSub_subEvents_Params) EventIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CapServicePubSub_subEvents_Params) SetEventID(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s CapServicePubSub_subEvents_Params) Handler() CapSubscriptionHandler {
	p, _ := capnp.Struct(s).Ptr(3)
	return CapSubscriptionHandler(p.Interface().Client())
}

func (s CapServicePubSub_subEvents_Params) HasHandler() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CapServicePubSub_subEvents_Params) SetHandler(v CapSubscriptionHandler) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

// CapServicePubSub_subEvents_Params_List is a list of CapServicePubSub_subEvents_Params.
type CapServicePubSub_subEvents_Params_List = capnp.StructList[CapServicePubSub_subEvents_Params]

// NewCapServicePubSub_subEvents_Params creates a new list of CapServicePubSub_subEvents_Params.
func NewCapServicePubSub_subEvents_Params_List(s *capnp.Segment, sz int32) (CapServicePubSub_subEvents_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[CapServicePubSub_subEvents_Params](l), err
}

// CapServicePubSub_subEvents_Params_Future is a wrapper for a CapServicePubSub_subEvents_Params promised by a client call.
type CapServicePubSub_subEvents_Params_Future struct{ *capnp.Future }

func (f CapServicePubSub_subEvents_Params_Future) Struct() (CapServicePubSub_subEvents_Params, error) {
	p, err := f.Future.Ptr()
	return CapServicePubSub_subEvents_Params(p.Struct()), err
}
func (p CapServicePubSub_subEvents_Params_Future) Handler() CapSubscriptionHandler {
	return CapSubscriptionHandler(p.Future.Field(3, nil).Client())
}

type CapServicePubSub_subEvents_Results capnp.Struct

// CapServicePubSub_subEvents_Results_TypeID is the unique identifier for the type CapServicePubSub_subEvents_Results.
const CapServicePubSub_subEvents_Results_TypeID = 0xbd14e777dcf88e74

func NewCapServicePubSub_subEvents_Results(s *capnp.Segment) (CapServicePubSub_subEvents_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapServicePubSub_subEvents_Results(st), err
}

func NewRootCapServicePubSub_subEvents_Results(s *capnp.Segment) (CapServicePubSub_subEvents_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapServicePubSub_subEvents_Results(st), err
}

func ReadRootCapServicePubSub_subEvents_Results(msg *capnp.Message) (CapServicePubSub_subEvents_Results, error) {
	root, err := msg.Root()
	return CapServicePubSub_subEvents_Results(root.Struct()), err
}

func (s CapServicePubSub_subEvents_Results) String() string {
	str, _ := text.Marshal(0xbd14e777dcf88e74, capnp.Struct(s))
	return str
}

func (s CapServicePubSub_subEvents_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapServicePubSub_subEvents_Results) DecodeFromPtr(p capnp.Ptr) CapServicePubSub_subEvents_Results {
	return CapServicePubSub_subEvents_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapServicePubSub_subEvents_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapServicePubSub_subEvents_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapServicePubSub_subEvents_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapServicePubSub_subEvents_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapServicePubSub_subEvents_Results_List is a list of CapServicePubSub_subEvents_Results.
type CapServicePubSub_subEvents_Results_List = capnp.StructList[CapServicePubSub_subEvents_Results]

// NewCapServicePubSub_subEvents_Results creates a new list of CapServicePubSub_subEvents_Results.
func NewCapServicePubSub_subEvents_Results_List(s *capnp.Segment, sz int32) (CapServicePubSub_subEvents_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapServicePubSub_subEvents_Results](l), err
}

// CapServicePubSub_subEvents_Results_Future is a wrapper for a CapServicePubSub_subEvents_Results promised by a client call.
type CapServicePubSub_subEvents_Results_Future struct{ *capnp.Future }

func (f CapServicePubSub_subEvents_Results_Future) Struct() (CapServicePubSub_subEvents_Results, error) {
	p, err := f.Future.Ptr()
	return CapServicePubSub_subEvents_Results(p.Struct()), err
}

type CapUserPubSub capnp.Client

// CapUserPubSub_TypeID is the unique identifier for the type CapUserPubSub.
const CapUserPubSub_TypeID = 0xad556cb9c8905a7b

func (c CapUserPubSub) PubAction(ctx context.Context, params func(CapUserPubSub_pubAction_Params) error) (CapUserPubSub_pubAction_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "pubAction",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapUserPubSub_pubAction_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapUserPubSub_pubAction_Results_Future{Future: ans.Future()}, release
}
func (c CapUserPubSub) SubEvent(ctx context.Context, params func(CapUserPubSub_subEvent_Params) error) (CapUserPubSub_subEvent_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "subEvent",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapUserPubSub_subEvent_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapUserPubSub_subEvent_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapUserPubSub) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapUserPubSub) AddRef() CapUserPubSub {
	return CapUserPubSub(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapUserPubSub) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapUserPubSub) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapUserPubSub) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapUserPubSub) DecodeFromPtr(p capnp.Ptr) CapUserPubSub {
	return CapUserPubSub(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapUserPubSub) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapUserPubSub) IsSame(other CapUserPubSub) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapUserPubSub) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapUserPubSub) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapUserPubSub_Server is a CapUserPubSub with a local implementation.
type CapUserPubSub_Server interface {
	PubAction(context.Context, CapUserPubSub_pubAction) error

	SubEvent(context.Context, CapUserPubSub_subEvent) error
}

// CapUserPubSub_NewServer creates a new Server from an implementation of CapUserPubSub_Server.
func CapUserPubSub_NewServer(s CapUserPubSub_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapUserPubSub_Methods(nil, s), s, c)
}

// CapUserPubSub_ServerToClient creates a new Client from an implementation of CapUserPubSub_Server.
// The caller is responsible for calling Release on the returned Client.
func CapUserPubSub_ServerToClient(s CapUserPubSub_Server) CapUserPubSub {
	return CapUserPubSub(capnp.NewClient(CapUserPubSub_NewServer(s)))
}

// CapUserPubSub_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapUserPubSub_Methods(methods []server.Method, s CapUserPubSub_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "pubAction",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PubAction(ctx, CapUserPubSub_pubAction{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "subEvent",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SubEvent(ctx, CapUserPubSub_subEvent{call})
		},
	})

	return methods
}

// CapUserPubSub_pubAction holds the state for a server call to CapUserPubSub.pubAction.
// See server.Call for documentation.
type CapUserPubSub_pubAction struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapUserPubSub_pubAction) Args() CapUserPubSub_pubAction_Params {
	return CapUserPubSub_pubAction_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapUserPubSub_pubAction) AllocResults() (CapUserPubSub_pubAction_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUserPubSub_pubAction_Results(r), err
}

// CapUserPubSub_subEvent holds the state for a server call to CapUserPubSub.subEvent.
// See server.Call for documentation.
type CapUserPubSub_subEvent struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapUserPubSub_subEvent) Args() CapUserPubSub_subEvent_Params {
	return CapUserPubSub_subEvent_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapUserPubSub_subEvent) AllocResults() (CapUserPubSub_subEvent_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUserPubSub_subEvent_Results(r), err
}

// CapUserPubSub_List is a list of CapUserPubSub.
type CapUserPubSub_List = capnp.CapList[CapUserPubSub]

// NewCapUserPubSub creates a new list of CapUserPubSub.
func NewCapUserPubSub_List(s *capnp.Segment, sz int32) (CapUserPubSub_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapUserPubSub](l), err
}

type CapUserPubSub_pubAction_Params capnp.Struct

// CapUserPubSub_pubAction_Params_TypeID is the unique identifier for the type CapUserPubSub_pubAction_Params.
const CapUserPubSub_pubAction_Params_TypeID = 0x913808ae28ff6473

func NewCapUserPubSub_pubAction_Params(s *capnp.Segment) (CapUserPubSub_pubAction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CapUserPubSub_pubAction_Params(st), err
}

func NewRootCapUserPubSub_pubAction_Params(s *capnp.Segment) (CapUserPubSub_pubAction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CapUserPubSub_pubAction_Params(st), err
}

func ReadRootCapUserPubSub_pubAction_Params(msg *capnp.Message) (CapUserPubSub_pubAction_Params, error) {
	root, err := msg.Root()
	return CapUserPubSub_pubAction_Params(root.Struct()), err
}

func (s CapUserPubSub_pubAction_Params) String() string {
	str, _ := text.Marshal(0x913808ae28ff6473, capnp.Struct(s))
	return str
}

func (s CapUserPubSub_pubAction_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUserPubSub_pubAction_Params) DecodeFromPtr(p capnp.Ptr) CapUserPubSub_pubAction_Params {
	return CapUserPubSub_pubAction_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUserPubSub_pubAction_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUserPubSub_pubAction_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUserPubSub_pubAction_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUserPubSub_pubAction_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapUserPubSub_pubAction_Params) PublisherID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapUserPubSub_pubAction_Params) HasPublisherID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapUserPubSub_pubAction_Params) PublisherIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapUserPubSub_pubAction_Params) SetPublisherID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapUserPubSub_pubAction_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapUserPubSub_pubAction_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapUserPubSub_pubAction_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapUserPubSub_pubAction_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapUserPubSub_pubAction_Params) ActionID() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CapUserPubSub_pubAction_Params) HasActionID() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapUserPubSub_pubAction_Params) ActionIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CapUserPubSub_pubAction_Params) SetActionID(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s CapUserPubSub_pubAction_Params) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s CapUserPubSub_pubAction_Params) HasValue() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CapUserPubSub_pubAction_Params) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

// CapUserPubSub_pubAction_Params_List is a list of CapUserPubSub_pubAction_Params.
type CapUserPubSub_pubAction_Params_List = capnp.StructList[CapUserPubSub_pubAction_Params]

// NewCapUserPubSub_pubAction_Params creates a new list of CapUserPubSub_pubAction_Params.
func NewCapUserPubSub_pubAction_Params_List(s *capnp.Segment, sz int32) (CapUserPubSub_pubAction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[CapUserPubSub_pubAction_Params](l), err
}

// CapUserPubSub_pubAction_Params_Future is a wrapper for a CapUserPubSub_pubAction_Params promised by a client call.
type CapUserPubSub_pubAction_Params_Future struct{ *capnp.Future }

func (f CapUserPubSub_pubAction_Params_Future) Struct() (CapUserPubSub_pubAction_Params, error) {
	p, err := f.Future.Ptr()
	return CapUserPubSub_pubAction_Params(p.Struct()), err
}

type CapUserPubSub_pubAction_Results capnp.Struct

// CapUserPubSub_pubAction_Results_TypeID is the unique identifier for the type CapUserPubSub_pubAction_Results.
const CapUserPubSub_pubAction_Results_TypeID = 0xc3ba28619686bf88

func NewCapUserPubSub_pubAction_Results(s *capnp.Segment) (CapUserPubSub_pubAction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUserPubSub_pubAction_Results(st), err
}

func NewRootCapUserPubSub_pubAction_Results(s *capnp.Segment) (CapUserPubSub_pubAction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUserPubSub_pubAction_Results(st), err
}

func ReadRootCapUserPubSub_pubAction_Results(msg *capnp.Message) (CapUserPubSub_pubAction_Results, error) {
	root, err := msg.Root()
	return CapUserPubSub_pubAction_Results(root.Struct()), err
}

func (s CapUserPubSub_pubAction_Results) String() string {
	str, _ := text.Marshal(0xc3ba28619686bf88, capnp.Struct(s))
	return str
}

func (s CapUserPubSub_pubAction_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUserPubSub_pubAction_Results) DecodeFromPtr(p capnp.Ptr) CapUserPubSub_pubAction_Results {
	return CapUserPubSub_pubAction_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUserPubSub_pubAction_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUserPubSub_pubAction_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUserPubSub_pubAction_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUserPubSub_pubAction_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapUserPubSub_pubAction_Results_List is a list of CapUserPubSub_pubAction_Results.
type CapUserPubSub_pubAction_Results_List = capnp.StructList[CapUserPubSub_pubAction_Results]

// NewCapUserPubSub_pubAction_Results creates a new list of CapUserPubSub_pubAction_Results.
func NewCapUserPubSub_pubAction_Results_List(s *capnp.Segment, sz int32) (CapUserPubSub_pubAction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapUserPubSub_pubAction_Results](l), err
}

// CapUserPubSub_pubAction_Results_Future is a wrapper for a CapUserPubSub_pubAction_Results promised by a client call.
type CapUserPubSub_pubAction_Results_Future struct{ *capnp.Future }

func (f CapUserPubSub_pubAction_Results_Future) Struct() (CapUserPubSub_pubAction_Results, error) {
	p, err := f.Future.Ptr()
	return CapUserPubSub_pubAction_Results(p.Struct()), err
}

type CapUserPubSub_subEvent_Params capnp.Struct

// CapUserPubSub_subEvent_Params_TypeID is the unique identifier for the type CapUserPubSub_subEvent_Params.
const CapUserPubSub_subEvent_Params_TypeID = 0xae7ce3209daecb9a

func NewCapUserPubSub_subEvent_Params(s *capnp.Segment) (CapUserPubSub_subEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CapUserPubSub_subEvent_Params(st), err
}

func NewRootCapUserPubSub_subEvent_Params(s *capnp.Segment) (CapUserPubSub_subEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CapUserPubSub_subEvent_Params(st), err
}

func ReadRootCapUserPubSub_subEvent_Params(msg *capnp.Message) (CapUserPubSub_subEvent_Params, error) {
	root, err := msg.Root()
	return CapUserPubSub_subEvent_Params(root.Struct()), err
}

func (s CapUserPubSub_subEvent_Params) String() string {
	str, _ := text.Marshal(0xae7ce3209daecb9a, capnp.Struct(s))
	return str
}

func (s CapUserPubSub_subEvent_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUserPubSub_subEvent_Params) DecodeFromPtr(p capnp.Ptr) CapUserPubSub_subEvent_Params {
	return CapUserPubSub_subEvent_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUserPubSub_subEvent_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUserPubSub_subEvent_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUserPubSub_subEvent_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUserPubSub_subEvent_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapUserPubSub_subEvent_Params) PublisherID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapUserPubSub_subEvent_Params) HasPublisherID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapUserPubSub_subEvent_Params) PublisherIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapUserPubSub_subEvent_Params) SetPublisherID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapUserPubSub_subEvent_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapUserPubSub_subEvent_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapUserPubSub_subEvent_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapUserPubSub_subEvent_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapUserPubSub_subEvent_Params) EventID() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CapUserPubSub_subEvent_Params) HasEventID() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapUserPubSub_subEvent_Params) EventIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CapUserPubSub_subEvent_Params) SetEventID(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s CapUserPubSub_subEvent_Params) Handler() CapSubscriptionHandler {
	p, _ := capnp.Struct(s).Ptr(3)
	return CapSubscriptionHandler(p.Interface().Client())
}

func (s CapUserPubSub_subEvent_Params) HasHandler() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CapUserPubSub_subEvent_Params) SetHandler(v CapSubscriptionHandler) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

// CapUserPubSub_subEvent_Params_List is a list of CapUserPubSub_subEvent_Params.
type CapUserPubSub_subEvent_Params_List = capnp.StructList[CapUserPubSub_subEvent_Params]

// NewCapUserPubSub_subEvent_Params creates a new list of CapUserPubSub_subEvent_Params.
func NewCapUserPubSub_subEvent_Params_List(s *capnp.Segment, sz int32) (CapUserPubSub_subEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[CapUserPubSub_subEvent_Params](l), err
}

// CapUserPubSub_subEvent_Params_Future is a wrapper for a CapUserPubSub_subEvent_Params promised by a client call.
type CapUserPubSub_subEvent_Params_Future struct{ *capnp.Future }

func (f CapUserPubSub_subEvent_Params_Future) Struct() (CapUserPubSub_subEvent_Params, error) {
	p, err := f.Future.Ptr()
	return CapUserPubSub_subEvent_Params(p.Struct()), err
}
func (p CapUserPubSub_subEvent_Params_Future) Handler() CapSubscriptionHandler {
	return CapSubscriptionHandler(p.Future.Field(3, nil).Client())
}

type CapUserPubSub_subEvent_Results capnp.Struct

// CapUserPubSub_subEvent_Results_TypeID is the unique identifier for the type CapUserPubSub_subEvent_Results.
const CapUserPubSub_subEvent_Results_TypeID = 0x95c0951f289d3d1a

func NewCapUserPubSub_subEvent_Results(s *capnp.Segment) (CapUserPubSub_subEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUserPubSub_subEvent_Results(st), err
}

func NewRootCapUserPubSub_subEvent_Results(s *capnp.Segment) (CapUserPubSub_subEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUserPubSub_subEvent_Results(st), err
}

func ReadRootCapUserPubSub_subEvent_Results(msg *capnp.Message) (CapUserPubSub_subEvent_Results, error) {
	root, err := msg.Root()
	return CapUserPubSub_subEvent_Results(root.Struct()), err
}

func (s CapUserPubSub_subEvent_Results) String() string {
	str, _ := text.Marshal(0x95c0951f289d3d1a, capnp.Struct(s))
	return str
}

func (s CapUserPubSub_subEvent_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUserPubSub_subEvent_Results) DecodeFromPtr(p capnp.Ptr) CapUserPubSub_subEvent_Results {
	return CapUserPubSub_subEvent_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUserPubSub_subEvent_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUserPubSub_subEvent_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUserPubSub_subEvent_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUserPubSub_subEvent_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapUserPubSub_subEvent_Results_List is a list of CapUserPubSub_subEvent_Results.
type CapUserPubSub_subEvent_Results_List = capnp.StructList[CapUserPubSub_subEvent_Results]

// NewCapUserPubSub_subEvent_Results creates a new list of CapUserPubSub_subEvent_Results.
func NewCapUserPubSub_subEvent_Results_List(s *capnp.Segment, sz int32) (CapUserPubSub_subEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapUserPubSub_subEvent_Results](l), err
}

// CapUserPubSub_subEvent_Results_Future is a wrapper for a CapUserPubSub_subEvent_Results promised by a client call.
type CapUserPubSub_subEvent_Results_Future struct{ *capnp.Future }

func (f CapUserPubSub_subEvent_Results_Future) Struct() (CapUserPubSub_subEvent_Results, error) {
	p, err := f.Future.Ptr()
	return CapUserPubSub_subEvent_Results(p.Struct()), err
}

type CapSubscriptionHandler capnp.Client

// CapSubscriptionHandler_TypeID is the unique identifier for the type CapSubscriptionHandler.
const CapSubscriptionHandler_TypeID = 0x80433d2ee6f482f5

func (c CapSubscriptionHandler) HandleValue(ctx context.Context, params func(CapSubscriptionHandler_handleValue_Params) error) (CapSubscriptionHandler_handleValue_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x80433d2ee6f482f5,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapSubscriptionHandler",
			MethodName:    "handleValue",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapSubscriptionHandler_handleValue_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapSubscriptionHandler_handleValue_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapSubscriptionHandler) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapSubscriptionHandler) AddRef() CapSubscriptionHandler {
	return CapSubscriptionHandler(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapSubscriptionHandler) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapSubscriptionHandler) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapSubscriptionHandler) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapSubscriptionHandler) DecodeFromPtr(p capnp.Ptr) CapSubscriptionHandler {
	return CapSubscriptionHandler(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapSubscriptionHandler) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapSubscriptionHandler) IsSame(other CapSubscriptionHandler) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapSubscriptionHandler) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapSubscriptionHandler) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapSubscriptionHandler_Server is a CapSubscriptionHandler with a local implementation.
type CapSubscriptionHandler_Server interface {
	HandleValue(context.Context, CapSubscriptionHandler_handleValue) error
}

// CapSubscriptionHandler_NewServer creates a new Server from an implementation of CapSubscriptionHandler_Server.
func CapSubscriptionHandler_NewServer(s CapSubscriptionHandler_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapSubscriptionHandler_Methods(nil, s), s, c)
}

// CapSubscriptionHandler_ServerToClient creates a new Client from an implementation of CapSubscriptionHandler_Server.
// The caller is responsible for calling Release on the returned Client.
func CapSubscriptionHandler_ServerToClient(s CapSubscriptionHandler_Server) CapSubscriptionHandler {
	return CapSubscriptionHandler(capnp.NewClient(CapSubscriptionHandler_NewServer(s)))
}

// CapSubscriptionHandler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapSubscriptionHandler_Methods(methods []server.Method, s CapSubscriptionHandler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x80433d2ee6f482f5,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapSubscriptionHandler",
			MethodName:    "handleValue",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.HandleValue(ctx, CapSubscriptionHandler_handleValue{call})
		},
	})

	return methods
}

// CapSubscriptionHandler_handleValue holds the state for a server call to CapSubscriptionHandler.handleValue.
// See server.Call for documentation.
type CapSubscriptionHandler_handleValue struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapSubscriptionHandler_handleValue) Args() CapSubscriptionHandler_handleValue_Params {
	return CapSubscriptionHandler_handleValue_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapSubscriptionHandler_handleValue) AllocResults() (CapSubscriptionHandler_handleValue_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapSubscriptionHandler_handleValue_Results(r), err
}

// CapSubscriptionHandler_List is a list of CapSubscriptionHandler.
type CapSubscriptionHandler_List = capnp.CapList[CapSubscriptionHandler]

// NewCapSubscriptionHandler creates a new list of CapSubscriptionHandler.
func NewCapSubscriptionHandler_List(s *capnp.Segment, sz int32) (CapSubscriptionHandler_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapSubscriptionHandler](l), err
}

type CapSubscriptionHandler_handleValue_Params capnp.Struct

// CapSubscriptionHandler_handleValue_Params_TypeID is the unique identifier for the type CapSubscriptionHandler_handleValue_Params.
const CapSubscriptionHandler_handleValue_Params_TypeID = 0x9290df923ae70938

func NewCapSubscriptionHandler_handleValue_Params(s *capnp.Segment) (CapSubscriptionHandler_handleValue_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapSubscriptionHandler_handleValue_Params(st), err
}

func NewRootCapSubscriptionHandler_handleValue_Params(s *capnp.Segment) (CapSubscriptionHandler_handleValue_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapSubscriptionHandler_handleValue_Params(st), err
}

func ReadRootCapSubscriptionHandler_handleValue_Params(msg *capnp.Message) (CapSubscriptionHandler_handleValue_Params, error) {
	root, err := msg.Root()
	return CapSubscriptionHandler_handleValue_Params(root.Struct()), err
}

func (s CapSubscriptionHandler_handleValue_Params) String() string {
	str, _ := text.Marshal(0x9290df923ae70938, capnp.Struct(s))
	return str
}

func (s CapSubscriptionHandler_handleValue_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapSubscriptionHandler_handleValue_Params) DecodeFromPtr(p capnp.Ptr) CapSubscriptionHandler_handleValue_Params {
	return CapSubscriptionHandler_handleValue_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapSubscriptionHandler_handleValue_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapSubscriptionHandler_handleValue_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapSubscriptionHandler_handleValue_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapSubscriptionHandler_handleValue_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapSubscriptionHandler_handleValue_Params) Value() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapSubscriptionHandler_handleValue_Params) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapSubscriptionHandler_handleValue_Params) SetValue(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapSubscriptionHandler_handleValue_Params) NewValue() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapSubscriptionHandler_handleValue_Params_List is a list of CapSubscriptionHandler_handleValue_Params.
type CapSubscriptionHandler_handleValue_Params_List = capnp.StructList[CapSubscriptionHandler_handleValue_Params]

// NewCapSubscriptionHandler_handleValue_Params creates a new list of CapSubscriptionHandler_handleValue_Params.
func NewCapSubscriptionHandler_handleValue_Params_List(s *capnp.Segment, sz int32) (CapSubscriptionHandler_handleValue_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapSubscriptionHandler_handleValue_Params](l), err
}

// CapSubscriptionHandler_handleValue_Params_Future is a wrapper for a CapSubscriptionHandler_handleValue_Params promised by a client call.
type CapSubscriptionHandler_handleValue_Params_Future struct{ *capnp.Future }

func (f CapSubscriptionHandler_handleValue_Params_Future) Struct() (CapSubscriptionHandler_handleValue_Params, error) {
	p, err := f.Future.Ptr()
	return CapSubscriptionHandler_handleValue_Params(p.Struct()), err
}
func (p CapSubscriptionHandler_handleValue_Params_Future) Value() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapSubscriptionHandler_handleValue_Results capnp.Struct

// CapSubscriptionHandler_handleValue_Results_TypeID is the unique identifier for the type CapSubscriptionHandler_handleValue_Results.
const CapSubscriptionHandler_handleValue_Results_TypeID = 0xc6a7b2614c3fad2c

func NewCapSubscriptionHandler_handleValue_Results(s *capnp.Segment) (CapSubscriptionHandler_handleValue_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapSubscriptionHandler_handleValue_Results(st), err
}

func NewRootCapSubscriptionHandler_handleValue_Results(s *capnp.Segment) (CapSubscriptionHandler_handleValue_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapSubscriptionHandler_handleValue_Results(st), err
}

func ReadRootCapSubscriptionHandler_handleValue_Results(msg *capnp.Message) (CapSubscriptionHandler_handleValue_Results, error) {
	root, err := msg.Root()
	return CapSubscriptionHandler_handleValue_Results(root.Struct()), err
}

func (s CapSubscriptionHandler_handleValue_Results) String() string {
	str, _ := text.Marshal(0xc6a7b2614c3fad2c, capnp.Struct(s))
	return str
}

func (s CapSubscriptionHandler_handleValue_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapSubscriptionHandler_handleValue_Results) DecodeFromPtr(p capnp.Ptr) CapSubscriptionHandler_handleValue_Results {
	return CapSubscriptionHandler_handleValue_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapSubscriptionHandler_handleValue_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapSubscriptionHandler_handleValue_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapSubscriptionHandler_handleValue_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapSubscriptionHandler_handleValue_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapSubscriptionHandler_handleValue_Results_List is a list of CapSubscriptionHandler_handleValue_Results.
type CapSubscriptionHandler_handleValue_Results_List = capnp.StructList[CapSubscriptionHandler_handleValue_Results]

// NewCapSubscriptionHandler_handleValue_Results creates a new list of CapSubscriptionHandler_handleValue_Results.
func NewCapSubscriptionHandler_handleValue_Results_List(s *capnp.Segment, sz int32) (CapSubscriptionHandler_handleValue_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapSubscriptionHandler_handleValue_Results](l), err
}

// CapSubscriptionHandler_handleValue_Results_Future is a wrapper for a CapSubscriptionHandler_handleValue_Results promised by a client call.
type CapSubscriptionHandler_handleValue_Results_Future struct{ *capnp.Future }

func (f CapSubscriptionHandler_handleValue_Results_Future) Struct() (CapSubscriptionHandler_handleValue_Results, error) {
	p, err := f.Future.Ptr()
	return CapSubscriptionHandler_handleValue_Results(p.Struct()), err
}

const schema_f33c8b5943a21269 = "x\xda\xd4X\x7fp\x14\xd5\x1d\xff~w\xef\xd8l\xee" +
	"\x17\xcf\x8dc\xc1\xa6'L\xd0H[08v \x16" +
	"\x13B\x98\x92\x94\xda\xdb\\\xe8Tf\x98\xe9\xdee!" +
	"7s\x17\xce\xdd\xdb(\xa3\x08b%\xa8\xd0!Q\x98" +
	"\x02b+:\xa5\x05DA\x9d\"B\xa9X+3e" +
	":\xd4\x0e\x8c\xd3V\xb0Z\x08\xed\x1f8\xd52\xb4\xa6" +
	"u;\xefm\xde\xde\xbb\xbb\x10\x12\xda\x7f\xfc/y\xfb" +
	"y\xdf\xef\xe7}\x7f|\xde\xf7\xddm\x9d\xc1\xe6@C" +
	"$\x1e\x05I\x7f>8\xc1\xbd\xb4\xf6\x1f\xe7g\xcc\x9d" +
	"\xbf\x06H\x8d\xecf\xae\xdb9\xff\x9e'\xbe\xfe\x09\x00" +
	"\xde~i\xc2\x12\xd4TE\x01\xd0\x82\xca7\xb4\x06\xfa" +
	"\x97{C\xdd\xd0\xa3\xd2{\x9d\xeb\x80\xd4!@PV" +
	"\x00n\x9f\xa4\xecF@\xedV\xe5E@w\xc3}'" +
	"?[\x968\xd1'\x02\xdeRvR\xc0)\x06\xb0\xbb" +
	"\xdc\xfa}U\xb3\xfb\x81L\xa5\x80\x00\x05\xe4\xaa\xb6Q" +
	"\xc0\xaa\xaaA@w\xb6:\xd88pv\xd3\x00\x90/" +
	"S\x00R\xc0=\xea\xc7\x14\x90S\x9b\x00\xdd=\xf5\xee" +
	"\xc0G\xaf\xbf\xfe\x14\x90\x9a@\x09\xe3\x8d\xea,\xd4v" +
	"\xa8\x0a@\xf2\x87\xaa\x8c\xc9\xe7U\x09\x01\xdc\xc9sw" +
	"\xd4\xc77\xffr\xb3\xe7\x919\xdc\xaanC\x08\xb8'" +
	"_\x9a\xd9\xbbw\xe1\xec-\x1eY\xf6\xe51\xf5\x00\xfd" +
	"\xd2\xb6\xef\xa5#\xb7\x1c{`+\x90i>\x89\x95\xea" +
	"\x07\x94\xc4FF\xe2\x98v\xf2\xc2\xb7\x89\xb2\xbb\x82\xc4" +
	"~J\xe2\x0dF\xe20%q\xdc#\xf1\xf4S\x97_" +
	"}\x7fO\xc3\x9e\x0a\xfc\x11\xb5\x1d\xb5\xdf1\xfc\x09\x8a" +
	"\x7f\xd7\xc3?\xb0d\xd3\xf1\xd7\xb2\x8b_\xa8H\xcb)" +
	"\xf5:\xd4\xceQ\xbc\xf6g\xb5O\x9bSM\xd3\xb2\xed" +
	"7\xfbv\xdc\xf4\xe1\x83\xfb\xc4\xa0N\xa9\x1e\xa0t\x1b" +
	"\xaaiP\x03[\x1eY\xfa\xc4\xdc/\xbdX\xe1^\x0d" +
	"MGmR\x88\xba\xaf\x09\xc9\x98\xbc)\xc4\xdc\xff\xfc" +
	"\x9d\xbbc\xdbo\xde\xfc\x8aw~foR\xe8\x18\x8d" +
	"\xcc\xe4\x1f\xf7\xc9\xbb\xaa#\x87\xc5\xc8\xa8\xa1\xbfQW" +
	"\xb5!\x1a\x99\xc2\x0f\xfe\xf9\xa7\xfb\x06k\x8e\x08[\xe7" +
	"\x85\x0e\xd1\xad\xeb\x8f\xae\xdbb\xd4\x1fzSHDC" +
	"h'\xfd2\xf4\xea\xe5)\xb3\xd3\xbb\xde\x12\x8dN\x09" +
	"\xbdC\x8d\xde\xc1\x8c~\xe5\x85\xa6E\xc6\x81]\xbf\xf6" +
	"\x8a\x82m]\x1c\xfa\x94n\xbd\xf3\xb6w\xef\x88\xfd\xfb" +
	"\xe6\xdf\x8b[\xdbB\xac\\\x96\xb2\xadw\x1e_\xf4\xda" +
	"\x93\xcf\xbcyJ\x04\xac\x0a\xfd\x81\x02\xfa\x19 \xbd\xfd" +
	"\x17/\xd7\xbb\x7f=-T\xc1\xfe\xd0nj\xbb\xb6\x7f" +
	"\xef\x93\xeb~\xf6\xc1\x1f+\xa2\xf6l\xa8\x05\xb5\xfd," +
	"j{i\xd4\x0ezQk\x7f(sa\xd3O\x0e\x9e" +
	"\xadH\xda\xfe\xd0T\xd4\xde\xa0x\xedH\xa8O\xbb>" +
	"L\x93vv\xe6\xdb\x83G?\xfc\xe9_*\xd0\xff\xa1" +
	"9\x89P\x8c\xa6\x86\xdf\xd6\xfa\x19z\xda\xfa\xaf=g" +
	"\xbf2p\xae\x82\xcb\xca\xf0,\xd4\x1e\xa3\x98\xe4\xf7\xc3" +
	"2&7\x85\x19\x97_\xe5.\xdc\xf5\xc8s\x87\xcf\x0f" +
	"\x1f\xdb+\xee\xf0\x01z\xec\xadaZ\x12\x17\x1f\xba\xf1" +
	"\xb7\xab&\xdeuQ\x04\xdc\x1b9D\x01\x0fG(`" +
	"\xe3\x8d\x9f\xceY\xffl\xef\xc5\x0a\x8fK\xa3\xd5\xa8\xe5" +
	"\xa2\xd4cwT\xc6d!\xca<\x16\x06\xbf\xf9\xcc\xfb" +
	"\x97?\xfe\xa8\x02\x9f\x89\xb6\xa0\xb6\x92\xe1\x0b\x14\xbff" +
	"\x18\xbf\xe1L\xcb\xd0\x99\xdaK\x95'\x8aJ\xa8=\xca" +
	"\xf0k(~\x83\x87?t\"b\xdd\xe0\x1e\xfdWE" +
	"\xbc\x1e\x8eNG\xad\x9f\xe2\xb5\x8d\xd1>\xed\\\xf4\x16" +
	"\x00\xf7\xcc'\xa7\xb66\x85\xe5!1\xed\xefEY\x9d" +
	"\xfe=J\xd3\xfe\xf4\xe9\x1f\xbd\xfc\xd9\xf6\xc2P\x85{" +
	"\x12\x9b\x8e\xda\x94\x18u\xff\xc5\x98\x8c\xc9\xfa\x98\x84\xd0" +
	"\xe2v;)#\x9f\x99\x99\x088\xa9\xa4\x93\x9a\x916" +
	"\xf2=\xf9\xc6\xf9F>\xe9\xa4\xec\xb4\x95\xc9\x172+" +
	"z\x16\x1a=]Y\xd9\xb4\x12\x88z@\x0e\x02\xf8j" +
	"\x86\xbc\x82\x09I\x81DT\xc5\xed\xa6X\xf3;\x06(" +
	"Y\xc7l\xc6\x04\xa2\xef\"X\xe6\xa2\xd5\xec\xcd\xa4\xcd" +
	"\x84\xb7j;\xa9yi\xea\xac.a\xc4,#g\xeb" +
	"a9\x00\x10@\x00\xb2\xa0\x05@o\x96Q_$!" +
	"A\xacA\xba\xd8\xd6\x0e\xa0/\x94Q\xef\x94\x90HR" +
	"\x0dJ\x00D\xa7\xc8E2\xea\xdf\x95pu\xa1;\xd3" +
	"\xb3\xbc\xad\x15\xc3 a\x18\xd05\x98\xfd\xb6V\x00\xe0" +
	"k\xab=\xba\x16\x92\xe2\x8d\x01\x88\x04\xc6\xc8:\xef\xa4" +
	"\x16\xf4\x9a=\x85\xba\x84a)c!M\x17[e\xd4" +
	"\x13\x02\xe9o\xcd*\x9e\xa4\x9c\xf4j\x93\x9a/\xfe\x1f" +
	"\xef5\xb2\x8e\x89\x11\x9002\x0a\xc9\xc5\xb6i\x15)" +
	"\xfa\x81\xb5\x0c9g\xeb\x13}\x8eF\x0a@\xff\x9e\x8c" +
	"zV\xe0\x98\xa1\x1c\xbbd\xd4\xf3\x02\xc7\x1c\x8dvV" +
	"F\xfd~\x09\x89,\xd7\xa0\x0c@\x1cJ</\xa3\xfe" +
	"\xa0\x84n\xdeIe3v\xb7\x09\x8a%\xd0\x1fC\x0e" +
	"\xaep\xa4\x09W+H\xd3\x9a\xc1\x8b-\xeb\x98u\x89" +
	"\xb8\xc1\xca&\xe0\x9f.B\xe9U\xc9\xa8\xd7H\xdc\xc9" +
	"Dw`\xcd\x96\x83;\xce\x9f\xdeN\xd3<Qp'" +
	"\x8b\xee\xf2N\xcavRI\xd3\xea\xcd\xa4\xe3\xe6\xddF" +
	"\xceL \x0e\xf3\x05\x82\x8dM\x1e`,\xe1\xb7y\x85" +
	"t\x98\xb6\x93\x95\x0b\xf6x\xdb\xa1\xc3\x8c\xdbNV\xd8" +
	"W\x1e\x18o\x87G\xd6\xa4\xcb\xa2!\xbf0\x85\xb0\xd0" +
	"T\x86e\xd4\xbf \xa1\xdb\xc5\xb0%\xf9\x189$9" +
	"\xd3\xb6\x8d\xe5f\xe7\xca\xbc9/\xce\x98\x95\x85\xc4\xcb" +
	"\xec\xc8z\x926\xf24\x88\xc3\x1c=f\x00%\x06\x1e" +
	"w\xd3F\x9e\x01\xb0\x88\x18\x99\x8a\x18`LQQ\xaa" +
	"b\xa2\xc4g0\xe472i\xe8\x00\x89\xdc\xaa \xfa" +
	"\xa3\x04\xf2\xb1\x89\xd4\xb6\x83D\xaeW\\\xde\x1f\x80=" +
	"\xcd\xe8\xf2t\x01\xc0\xe8\xe25R\x8ai\x83\xe5\xf0\x1a" +
	"\x1b\x8c.v\xcb\xa8\x17\x84\x06\xbb\xb7\xa5\xd8uck" +
	"\xb0r\xbd\x18\x83\xc0\x95\xc4\xd6\xcb\"M\xd6\xfc\x15\xb1" +
	"\x9ee\x99\xe5%I\xb2\xdc\xf4\x0a\xba\xe8X\x107J" +
	"\xd2\x1d)\xefV1\xd5\xc5j\xb6\xbd6(\xd8\xc07" +
	"^\xad\x98K\x0c\xf9w\x83P\xcd\x1dB5\xdb\x1e\xb8" +
	"\x0d\xb0\xb5\xa2\x9a\x83Wc\xc8rh\xd7u4\x99\xa5" +
	"\xfd6&m\xa5\xc7R\xc6\xd5\xa5E3~\xdd\x08\xa7" +
	"j,JW\x93c\x9bB\xc6\xafY +\x0e6a" +
	"|\xb1\xe7B$\xd2\x9cZ\xa4\xa9\xa4\x8d<\x92\xe28" +
	"SVe\xe3\x89\x07\x97\xca\xd1=\xf9o\x89k\xba\xb0" +
	";L;V\x12\x8d\x12\xc1b]\xc4t\xdfZ\x917" +
	"\xadB\xc6\xb4K\xe5j\x89\x9b\x1f\xfe\x02\xb2i_Q" +
	"\xa7|\xdfJ\xd2\x11\x94\x8a?'\x91\x0f\xe9\xa4\xa1\x9d" +
	"+\x15\x7f\x8b\"\x7f\xc6\x91\xda\x0e_\xa9\x8a\xda\xe4\xda" +
	"\xa2n\x89J%_)\xd21\xc6\x05Q\x0f3\x12\xfc" +
	"1\x88|\xa6$\xfaZ\x90H\x1b%\xc1\x9fC\xc8\xdf" +
	"!d\xee\xe3 \x919\x0aJ\xfe\xab\x06\xf9\x13\x84|" +
	"\xd5\x02\x89LS\\~\xf7 \x17\xf0f\x1cI\xd5\xbd" +
	"U\x96o\x88\xb3\xb5Q\x0e0|u0\xb4\x07.W" +
	"\xa4RS\xe3\xeew>7|\xbeD;8V\xbdm" +
	"J\xfc\x0f\xc7\x1bq\xe8k\xf9\x7f\x0c}\xe3\xbd\x97\x98" +
	"I;a\x99\xcb2\xf7\x97M\x0e\x8dM\xde\xc7QG" +
	"\x0fQ\x04J\xb7\xaf\xf5\xcb6\xc8\xbf\x8ft7\xf9\x8a" +
	"\xd0\xd9Z\xba\x7f\xb2\\\xe8\xbab\xef\xf9i\x89\xa5J" +
	"\x04\x80\xbfR\x91\xff\"A\x1a\x96p\x01\xe0O\\\xe4" +
	"?9\xf8\x02\xe0\xb7\xbc\xdcc\x8b\xb3\x0a\xda\xcd\xa8W" +
	"!\x16_\xea\xe2O-\xc2\x185\xbe\xd1\x91K\xe4\xe8" +
	"2\\\xf49J\xfa\x84\xe9qA\x8cr.\x09\xe1\xac" +
	"8\x8b\xee\x7f\x03\x00\x00\xff\xff\xdf.\xb4~"

func init() {
	schemas.Register(schema_f33c8b5943a21269,
		0x80433d2ee6f482f5,
		0x8654dd0285fb2417,
		0x87cc5066fed0778c,
		0x913808ae28ff6473,
		0x9290df923ae70938,
		0x94bbbbef92ff28ab,
		0x95c0951f289d3d1a,
		0x963848ac762fb0d0,
		0x997bc227bdb0ae49,
		0xaa07114fe8d013c2,
		0xab31abe0b5f7949c,
		0xad556cb9c8905a7b,
		0xae7ce3209daecb9a,
		0xaf1e3d8b5d839604,
		0xb495269b0f4ed2b7,
		0xbc0d0aa70387a01a,
		0xbd14e777dcf88e74,
		0xc3ba28619686bf88,
		0xc5a7633821f7b5fb,
		0xc6a7b2614c3fad2c,
		0xd326fc0f35d8303b,
		0xd5c39e93b94cc83b,
		0xd6e9ff28b3be9b63,
		0xdbe2a98693ac911d,
		0xdfb8a690e8697e4a,
		0xe4a8e3bfe7c72fdf,
		0xe592b473a3368825,
		0xe6bca3833ee86dc4,
		0xee3e107dce1b7eee,
		0xee76a18839fa1b8d,
		0xeff2f7e09e4be774,
		0xf51ddefb42de8c74,
		0xf9bfff17720dccba,
		0xfb030c3f99d5f3de,
		0xfb749bfeb39fd69c)
}

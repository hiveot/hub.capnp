// Code generated by capnpc-go. DO NOT EDIT.

package hubapi

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

// Constants defined in PubSub.capnp.
const (
	PubsubServiceName    = "pubsub"
	CapNameDevicePubSub  = "capDevicePubSub"
	CapNameServicePubSub = "capServicePubSub"
	CapNameUserPubSub    = "capUserPubSub"
)

type CapPubSubService capnp.Client

// CapPubSubService_TypeID is the unique identifier for the type CapPubSubService.
const CapPubSubService_TypeID = 0xe4a8e3bfe7c72fdf

func (c CapPubSubService) CapDevicePubSub(ctx context.Context, params func(CapPubSubService_capDevicePubSub_Params) error) (CapPubSubService_capDevicePubSub_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe4a8e3bfe7c72fdf,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapPubSubService",
			MethodName:    "capDevicePubSub",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapPubSubService_capDevicePubSub_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapPubSubService_capDevicePubSub_Results_Future{Future: ans.Future()}, release
}
func (c CapPubSubService) CapServicePubSub(ctx context.Context, params func(CapPubSubService_capServicePubSub_Params) error) (CapPubSubService_capServicePubSub_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe4a8e3bfe7c72fdf,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapPubSubService",
			MethodName:    "capServicePubSub",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapPubSubService_capServicePubSub_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapPubSubService_capServicePubSub_Results_Future{Future: ans.Future()}, release
}
func (c CapPubSubService) CapUserPubSub(ctx context.Context, params func(CapPubSubService_capUserPubSub_Params) error) (CapPubSubService_capUserPubSub_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe4a8e3bfe7c72fdf,
			MethodID:      2,
			InterfaceName: "hubapi/PubSub.capnp:CapPubSubService",
			MethodName:    "capUserPubSub",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapPubSubService_capUserPubSub_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapPubSubService_capUserPubSub_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapPubSubService) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapPubSubService) AddRef() CapPubSubService {
	return CapPubSubService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapPubSubService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapPubSubService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapPubSubService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapPubSubService) DecodeFromPtr(p capnp.Ptr) CapPubSubService {
	return CapPubSubService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapPubSubService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapPubSubService) IsSame(other CapPubSubService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapPubSubService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapPubSubService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapPubSubService_Server is a CapPubSubService with a local implementation.
type CapPubSubService_Server interface {
	CapDevicePubSub(context.Context, CapPubSubService_capDevicePubSub) error

	CapServicePubSub(context.Context, CapPubSubService_capServicePubSub) error

	CapUserPubSub(context.Context, CapPubSubService_capUserPubSub) error
}

// CapPubSubService_NewServer creates a new Server from an implementation of CapPubSubService_Server.
func CapPubSubService_NewServer(s CapPubSubService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapPubSubService_Methods(nil, s), s, c)
}

// CapPubSubService_ServerToClient creates a new Client from an implementation of CapPubSubService_Server.
// The caller is responsible for calling Release on the returned Client.
func CapPubSubService_ServerToClient(s CapPubSubService_Server) CapPubSubService {
	return CapPubSubService(capnp.NewClient(CapPubSubService_NewServer(s)))
}

// CapPubSubService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapPubSubService_Methods(methods []server.Method, s CapPubSubService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe4a8e3bfe7c72fdf,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapPubSubService",
			MethodName:    "capDevicePubSub",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapDevicePubSub(ctx, CapPubSubService_capDevicePubSub{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe4a8e3bfe7c72fdf,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapPubSubService",
			MethodName:    "capServicePubSub",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapServicePubSub(ctx, CapPubSubService_capServicePubSub{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe4a8e3bfe7c72fdf,
			MethodID:      2,
			InterfaceName: "hubapi/PubSub.capnp:CapPubSubService",
			MethodName:    "capUserPubSub",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapUserPubSub(ctx, CapPubSubService_capUserPubSub{call})
		},
	})

	return methods
}

// CapPubSubService_capDevicePubSub holds the state for a server call to CapPubSubService.capDevicePubSub.
// See server.Call for documentation.
type CapPubSubService_capDevicePubSub struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapPubSubService_capDevicePubSub) Args() CapPubSubService_capDevicePubSub_Params {
	return CapPubSubService_capDevicePubSub_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapPubSubService_capDevicePubSub) AllocResults() (CapPubSubService_capDevicePubSub_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capDevicePubSub_Results(r), err
}

// CapPubSubService_capServicePubSub holds the state for a server call to CapPubSubService.capServicePubSub.
// See server.Call for documentation.
type CapPubSubService_capServicePubSub struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapPubSubService_capServicePubSub) Args() CapPubSubService_capServicePubSub_Params {
	return CapPubSubService_capServicePubSub_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapPubSubService_capServicePubSub) AllocResults() (CapPubSubService_capServicePubSub_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capServicePubSub_Results(r), err
}

// CapPubSubService_capUserPubSub holds the state for a server call to CapPubSubService.capUserPubSub.
// See server.Call for documentation.
type CapPubSubService_capUserPubSub struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapPubSubService_capUserPubSub) Args() CapPubSubService_capUserPubSub_Params {
	return CapPubSubService_capUserPubSub_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapPubSubService_capUserPubSub) AllocResults() (CapPubSubService_capUserPubSub_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capUserPubSub_Results(r), err
}

// CapPubSubService_List is a list of CapPubSubService.
type CapPubSubService_List = capnp.CapList[CapPubSubService]

// NewCapPubSubService creates a new list of CapPubSubService.
func NewCapPubSubService_List(s *capnp.Segment, sz int32) (CapPubSubService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapPubSubService](l), err
}

type CapPubSubService_capDevicePubSub_Params capnp.Struct

// CapPubSubService_capDevicePubSub_Params_TypeID is the unique identifier for the type CapPubSubService_capDevicePubSub_Params.
const CapPubSubService_capDevicePubSub_Params_TypeID = 0x997bc227bdb0ae49

func NewCapPubSubService_capDevicePubSub_Params(s *capnp.Segment) (CapPubSubService_capDevicePubSub_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capDevicePubSub_Params(st), err
}

func NewRootCapPubSubService_capDevicePubSub_Params(s *capnp.Segment) (CapPubSubService_capDevicePubSub_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capDevicePubSub_Params(st), err
}

func ReadRootCapPubSubService_capDevicePubSub_Params(msg *capnp.Message) (CapPubSubService_capDevicePubSub_Params, error) {
	root, err := msg.Root()
	return CapPubSubService_capDevicePubSub_Params(root.Struct()), err
}

func (s CapPubSubService_capDevicePubSub_Params) String() string {
	str, _ := text.Marshal(0x997bc227bdb0ae49, capnp.Struct(s))
	return str
}

func (s CapPubSubService_capDevicePubSub_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapPubSubService_capDevicePubSub_Params) DecodeFromPtr(p capnp.Ptr) CapPubSubService_capDevicePubSub_Params {
	return CapPubSubService_capDevicePubSub_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapPubSubService_capDevicePubSub_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapPubSubService_capDevicePubSub_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapPubSubService_capDevicePubSub_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapPubSubService_capDevicePubSub_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapPubSubService_capDevicePubSub_Params) DeviceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapPubSubService_capDevicePubSub_Params) HasDeviceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapPubSubService_capDevicePubSub_Params) DeviceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapPubSubService_capDevicePubSub_Params) SetDeviceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapPubSubService_capDevicePubSub_Params_List is a list of CapPubSubService_capDevicePubSub_Params.
type CapPubSubService_capDevicePubSub_Params_List = capnp.StructList[CapPubSubService_capDevicePubSub_Params]

// NewCapPubSubService_capDevicePubSub_Params creates a new list of CapPubSubService_capDevicePubSub_Params.
func NewCapPubSubService_capDevicePubSub_Params_List(s *capnp.Segment, sz int32) (CapPubSubService_capDevicePubSub_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapPubSubService_capDevicePubSub_Params](l), err
}

// CapPubSubService_capDevicePubSub_Params_Future is a wrapper for a CapPubSubService_capDevicePubSub_Params promised by a client call.
type CapPubSubService_capDevicePubSub_Params_Future struct{ *capnp.Future }

func (f CapPubSubService_capDevicePubSub_Params_Future) Struct() (CapPubSubService_capDevicePubSub_Params, error) {
	p, err := f.Future.Ptr()
	return CapPubSubService_capDevicePubSub_Params(p.Struct()), err
}

type CapPubSubService_capDevicePubSub_Results capnp.Struct

// CapPubSubService_capDevicePubSub_Results_TypeID is the unique identifier for the type CapPubSubService_capDevicePubSub_Results.
const CapPubSubService_capDevicePubSub_Results_TypeID = 0xfb030c3f99d5f3de

func NewCapPubSubService_capDevicePubSub_Results(s *capnp.Segment) (CapPubSubService_capDevicePubSub_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capDevicePubSub_Results(st), err
}

func NewRootCapPubSubService_capDevicePubSub_Results(s *capnp.Segment) (CapPubSubService_capDevicePubSub_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capDevicePubSub_Results(st), err
}

func ReadRootCapPubSubService_capDevicePubSub_Results(msg *capnp.Message) (CapPubSubService_capDevicePubSub_Results, error) {
	root, err := msg.Root()
	return CapPubSubService_capDevicePubSub_Results(root.Struct()), err
}

func (s CapPubSubService_capDevicePubSub_Results) String() string {
	str, _ := text.Marshal(0xfb030c3f99d5f3de, capnp.Struct(s))
	return str
}

func (s CapPubSubService_capDevicePubSub_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapPubSubService_capDevicePubSub_Results) DecodeFromPtr(p capnp.Ptr) CapPubSubService_capDevicePubSub_Results {
	return CapPubSubService_capDevicePubSub_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapPubSubService_capDevicePubSub_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapPubSubService_capDevicePubSub_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapPubSubService_capDevicePubSub_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapPubSubService_capDevicePubSub_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapPubSubService_capDevicePubSub_Results) Cap() CapDevicePubSub {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapDevicePubSub(p.Interface().Client())
}

func (s CapPubSubService_capDevicePubSub_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapPubSubService_capDevicePubSub_Results) SetCap(v CapDevicePubSub) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapPubSubService_capDevicePubSub_Results_List is a list of CapPubSubService_capDevicePubSub_Results.
type CapPubSubService_capDevicePubSub_Results_List = capnp.StructList[CapPubSubService_capDevicePubSub_Results]

// NewCapPubSubService_capDevicePubSub_Results creates a new list of CapPubSubService_capDevicePubSub_Results.
func NewCapPubSubService_capDevicePubSub_Results_List(s *capnp.Segment, sz int32) (CapPubSubService_capDevicePubSub_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapPubSubService_capDevicePubSub_Results](l), err
}

// CapPubSubService_capDevicePubSub_Results_Future is a wrapper for a CapPubSubService_capDevicePubSub_Results promised by a client call.
type CapPubSubService_capDevicePubSub_Results_Future struct{ *capnp.Future }

func (f CapPubSubService_capDevicePubSub_Results_Future) Struct() (CapPubSubService_capDevicePubSub_Results, error) {
	p, err := f.Future.Ptr()
	return CapPubSubService_capDevicePubSub_Results(p.Struct()), err
}
func (p CapPubSubService_capDevicePubSub_Results_Future) Cap() CapDevicePubSub {
	return CapDevicePubSub(p.Future.Field(0, nil).Client())
}

type CapPubSubService_capServicePubSub_Params capnp.Struct

// CapPubSubService_capServicePubSub_Params_TypeID is the unique identifier for the type CapPubSubService_capServicePubSub_Params.
const CapPubSubService_capServicePubSub_Params_TypeID = 0xbc0d0aa70387a01a

func NewCapPubSubService_capServicePubSub_Params(s *capnp.Segment) (CapPubSubService_capServicePubSub_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capServicePubSub_Params(st), err
}

func NewRootCapPubSubService_capServicePubSub_Params(s *capnp.Segment) (CapPubSubService_capServicePubSub_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capServicePubSub_Params(st), err
}

func ReadRootCapPubSubService_capServicePubSub_Params(msg *capnp.Message) (CapPubSubService_capServicePubSub_Params, error) {
	root, err := msg.Root()
	return CapPubSubService_capServicePubSub_Params(root.Struct()), err
}

func (s CapPubSubService_capServicePubSub_Params) String() string {
	str, _ := text.Marshal(0xbc0d0aa70387a01a, capnp.Struct(s))
	return str
}

func (s CapPubSubService_capServicePubSub_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapPubSubService_capServicePubSub_Params) DecodeFromPtr(p capnp.Ptr) CapPubSubService_capServicePubSub_Params {
	return CapPubSubService_capServicePubSub_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapPubSubService_capServicePubSub_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapPubSubService_capServicePubSub_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapPubSubService_capServicePubSub_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapPubSubService_capServicePubSub_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapPubSubService_capServicePubSub_Params) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapPubSubService_capServicePubSub_Params) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapPubSubService_capServicePubSub_Params) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapPubSubService_capServicePubSub_Params) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapPubSubService_capServicePubSub_Params_List is a list of CapPubSubService_capServicePubSub_Params.
type CapPubSubService_capServicePubSub_Params_List = capnp.StructList[CapPubSubService_capServicePubSub_Params]

// NewCapPubSubService_capServicePubSub_Params creates a new list of CapPubSubService_capServicePubSub_Params.
func NewCapPubSubService_capServicePubSub_Params_List(s *capnp.Segment, sz int32) (CapPubSubService_capServicePubSub_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapPubSubService_capServicePubSub_Params](l), err
}

// CapPubSubService_capServicePubSub_Params_Future is a wrapper for a CapPubSubService_capServicePubSub_Params promised by a client call.
type CapPubSubService_capServicePubSub_Params_Future struct{ *capnp.Future }

func (f CapPubSubService_capServicePubSub_Params_Future) Struct() (CapPubSubService_capServicePubSub_Params, error) {
	p, err := f.Future.Ptr()
	return CapPubSubService_capServicePubSub_Params(p.Struct()), err
}

type CapPubSubService_capServicePubSub_Results capnp.Struct

// CapPubSubService_capServicePubSub_Results_TypeID is the unique identifier for the type CapPubSubService_capServicePubSub_Results.
const CapPubSubService_capServicePubSub_Results_TypeID = 0xd326fc0f35d8303b

func NewCapPubSubService_capServicePubSub_Results(s *capnp.Segment) (CapPubSubService_capServicePubSub_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capServicePubSub_Results(st), err
}

func NewRootCapPubSubService_capServicePubSub_Results(s *capnp.Segment) (CapPubSubService_capServicePubSub_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capServicePubSub_Results(st), err
}

func ReadRootCapPubSubService_capServicePubSub_Results(msg *capnp.Message) (CapPubSubService_capServicePubSub_Results, error) {
	root, err := msg.Root()
	return CapPubSubService_capServicePubSub_Results(root.Struct()), err
}

func (s CapPubSubService_capServicePubSub_Results) String() string {
	str, _ := text.Marshal(0xd326fc0f35d8303b, capnp.Struct(s))
	return str
}

func (s CapPubSubService_capServicePubSub_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapPubSubService_capServicePubSub_Results) DecodeFromPtr(p capnp.Ptr) CapPubSubService_capServicePubSub_Results {
	return CapPubSubService_capServicePubSub_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapPubSubService_capServicePubSub_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapPubSubService_capServicePubSub_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapPubSubService_capServicePubSub_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapPubSubService_capServicePubSub_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapPubSubService_capServicePubSub_Results) Cap() CapServicePubSub {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapServicePubSub(p.Interface().Client())
}

func (s CapPubSubService_capServicePubSub_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapPubSubService_capServicePubSub_Results) SetCap(v CapServicePubSub) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapPubSubService_capServicePubSub_Results_List is a list of CapPubSubService_capServicePubSub_Results.
type CapPubSubService_capServicePubSub_Results_List = capnp.StructList[CapPubSubService_capServicePubSub_Results]

// NewCapPubSubService_capServicePubSub_Results creates a new list of CapPubSubService_capServicePubSub_Results.
func NewCapPubSubService_capServicePubSub_Results_List(s *capnp.Segment, sz int32) (CapPubSubService_capServicePubSub_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapPubSubService_capServicePubSub_Results](l), err
}

// CapPubSubService_capServicePubSub_Results_Future is a wrapper for a CapPubSubService_capServicePubSub_Results promised by a client call.
type CapPubSubService_capServicePubSub_Results_Future struct{ *capnp.Future }

func (f CapPubSubService_capServicePubSub_Results_Future) Struct() (CapPubSubService_capServicePubSub_Results, error) {
	p, err := f.Future.Ptr()
	return CapPubSubService_capServicePubSub_Results(p.Struct()), err
}
func (p CapPubSubService_capServicePubSub_Results_Future) Cap() CapServicePubSub {
	return CapServicePubSub(p.Future.Field(0, nil).Client())
}

type CapPubSubService_capUserPubSub_Params capnp.Struct

// CapPubSubService_capUserPubSub_Params_TypeID is the unique identifier for the type CapPubSubService_capUserPubSub_Params.
const CapPubSubService_capUserPubSub_Params_TypeID = 0xc5a7633821f7b5fb

func NewCapPubSubService_capUserPubSub_Params(s *capnp.Segment) (CapPubSubService_capUserPubSub_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capUserPubSub_Params(st), err
}

func NewRootCapPubSubService_capUserPubSub_Params(s *capnp.Segment) (CapPubSubService_capUserPubSub_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capUserPubSub_Params(st), err
}

func ReadRootCapPubSubService_capUserPubSub_Params(msg *capnp.Message) (CapPubSubService_capUserPubSub_Params, error) {
	root, err := msg.Root()
	return CapPubSubService_capUserPubSub_Params(root.Struct()), err
}

func (s CapPubSubService_capUserPubSub_Params) String() string {
	str, _ := text.Marshal(0xc5a7633821f7b5fb, capnp.Struct(s))
	return str
}

func (s CapPubSubService_capUserPubSub_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapPubSubService_capUserPubSub_Params) DecodeFromPtr(p capnp.Ptr) CapPubSubService_capUserPubSub_Params {
	return CapPubSubService_capUserPubSub_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapPubSubService_capUserPubSub_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapPubSubService_capUserPubSub_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapPubSubService_capUserPubSub_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapPubSubService_capUserPubSub_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapPubSubService_capUserPubSub_Params) UserID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapPubSubService_capUserPubSub_Params) HasUserID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapPubSubService_capUserPubSub_Params) UserIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapPubSubService_capUserPubSub_Params) SetUserID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapPubSubService_capUserPubSub_Params_List is a list of CapPubSubService_capUserPubSub_Params.
type CapPubSubService_capUserPubSub_Params_List = capnp.StructList[CapPubSubService_capUserPubSub_Params]

// NewCapPubSubService_capUserPubSub_Params creates a new list of CapPubSubService_capUserPubSub_Params.
func NewCapPubSubService_capUserPubSub_Params_List(s *capnp.Segment, sz int32) (CapPubSubService_capUserPubSub_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapPubSubService_capUserPubSub_Params](l), err
}

// CapPubSubService_capUserPubSub_Params_Future is a wrapper for a CapPubSubService_capUserPubSub_Params promised by a client call.
type CapPubSubService_capUserPubSub_Params_Future struct{ *capnp.Future }

func (f CapPubSubService_capUserPubSub_Params_Future) Struct() (CapPubSubService_capUserPubSub_Params, error) {
	p, err := f.Future.Ptr()
	return CapPubSubService_capUserPubSub_Params(p.Struct()), err
}

type CapPubSubService_capUserPubSub_Results capnp.Struct

// CapPubSubService_capUserPubSub_Results_TypeID is the unique identifier for the type CapPubSubService_capUserPubSub_Results.
const CapPubSubService_capUserPubSub_Results_TypeID = 0xd5c39e93b94cc83b

func NewCapPubSubService_capUserPubSub_Results(s *capnp.Segment) (CapPubSubService_capUserPubSub_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capUserPubSub_Results(st), err
}

func NewRootCapPubSubService_capUserPubSub_Results(s *capnp.Segment) (CapPubSubService_capUserPubSub_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapPubSubService_capUserPubSub_Results(st), err
}

func ReadRootCapPubSubService_capUserPubSub_Results(msg *capnp.Message) (CapPubSubService_capUserPubSub_Results, error) {
	root, err := msg.Root()
	return CapPubSubService_capUserPubSub_Results(root.Struct()), err
}

func (s CapPubSubService_capUserPubSub_Results) String() string {
	str, _ := text.Marshal(0xd5c39e93b94cc83b, capnp.Struct(s))
	return str
}

func (s CapPubSubService_capUserPubSub_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapPubSubService_capUserPubSub_Results) DecodeFromPtr(p capnp.Ptr) CapPubSubService_capUserPubSub_Results {
	return CapPubSubService_capUserPubSub_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapPubSubService_capUserPubSub_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapPubSubService_capUserPubSub_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapPubSubService_capUserPubSub_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapPubSubService_capUserPubSub_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapPubSubService_capUserPubSub_Results) Cap() CapUserPubSub {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapUserPubSub(p.Interface().Client())
}

func (s CapPubSubService_capUserPubSub_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapPubSubService_capUserPubSub_Results) SetCap(v CapUserPubSub) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapPubSubService_capUserPubSub_Results_List is a list of CapPubSubService_capUserPubSub_Results.
type CapPubSubService_capUserPubSub_Results_List = capnp.StructList[CapPubSubService_capUserPubSub_Results]

// NewCapPubSubService_capUserPubSub_Results creates a new list of CapPubSubService_capUserPubSub_Results.
func NewCapPubSubService_capUserPubSub_Results_List(s *capnp.Segment, sz int32) (CapPubSubService_capUserPubSub_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapPubSubService_capUserPubSub_Results](l), err
}

// CapPubSubService_capUserPubSub_Results_Future is a wrapper for a CapPubSubService_capUserPubSub_Results promised by a client call.
type CapPubSubService_capUserPubSub_Results_Future struct{ *capnp.Future }

func (f CapPubSubService_capUserPubSub_Results_Future) Struct() (CapPubSubService_capUserPubSub_Results, error) {
	p, err := f.Future.Ptr()
	return CapPubSubService_capUserPubSub_Results(p.Struct()), err
}
func (p CapPubSubService_capUserPubSub_Results_Future) Cap() CapUserPubSub {
	return CapUserPubSub(p.Future.Field(0, nil).Client())
}

type CapDevicePubSub capnp.Client

// CapDevicePubSub_TypeID is the unique identifier for the type CapDevicePubSub.
const CapDevicePubSub_TypeID = 0xdfb8a690e8697e4a

func (c CapDevicePubSub) PubEvent(ctx context.Context, params func(CapDevicePubSub_pubEvent_Params) error) (CapDevicePubSub_pubEvent_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "pubEvent",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDevicePubSub_pubEvent_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDevicePubSub_pubEvent_Results_Future{Future: ans.Future()}, release
}
func (c CapDevicePubSub) PubProperties(ctx context.Context, params func(CapDevicePubSub_pubProperties_Params) error) (CapDevicePubSub_pubProperties_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "pubProperties",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDevicePubSub_pubProperties_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDevicePubSub_pubProperties_Results_Future{Future: ans.Future()}, release
}
func (c CapDevicePubSub) PubTD(ctx context.Context, params func(CapDevicePubSub_pubTD_Params) error) (CapDevicePubSub_pubTD_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      2,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "pubTD",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDevicePubSub_pubTD_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDevicePubSub_pubTD_Results_Future{Future: ans.Future()}, release
}
func (c CapDevicePubSub) SubAction(ctx context.Context, params func(CapDevicePubSub_subAction_Params) error) (CapDevicePubSub_subAction_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      3,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "subAction",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDevicePubSub_subAction_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDevicePubSub_subAction_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapDevicePubSub) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapDevicePubSub) AddRef() CapDevicePubSub {
	return CapDevicePubSub(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapDevicePubSub) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapDevicePubSub) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapDevicePubSub) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapDevicePubSub) DecodeFromPtr(p capnp.Ptr) CapDevicePubSub {
	return CapDevicePubSub(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapDevicePubSub) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapDevicePubSub) IsSame(other CapDevicePubSub) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapDevicePubSub) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapDevicePubSub) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapDevicePubSub_Server is a CapDevicePubSub with a local implementation.
type CapDevicePubSub_Server interface {
	PubEvent(context.Context, CapDevicePubSub_pubEvent) error

	PubProperties(context.Context, CapDevicePubSub_pubProperties) error

	PubTD(context.Context, CapDevicePubSub_pubTD) error

	SubAction(context.Context, CapDevicePubSub_subAction) error
}

// CapDevicePubSub_NewServer creates a new Server from an implementation of CapDevicePubSub_Server.
func CapDevicePubSub_NewServer(s CapDevicePubSub_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapDevicePubSub_Methods(nil, s), s, c)
}

// CapDevicePubSub_ServerToClient creates a new Client from an implementation of CapDevicePubSub_Server.
// The caller is responsible for calling Release on the returned Client.
func CapDevicePubSub_ServerToClient(s CapDevicePubSub_Server) CapDevicePubSub {
	return CapDevicePubSub(capnp.NewClient(CapDevicePubSub_NewServer(s)))
}

// CapDevicePubSub_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapDevicePubSub_Methods(methods []server.Method, s CapDevicePubSub_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "pubEvent",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PubEvent(ctx, CapDevicePubSub_pubEvent{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "pubProperties",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PubProperties(ctx, CapDevicePubSub_pubProperties{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      2,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "pubTD",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PubTD(ctx, CapDevicePubSub_pubTD{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      3,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "subAction",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SubAction(ctx, CapDevicePubSub_subAction{call})
		},
	})

	return methods
}

// CapDevicePubSub_pubEvent holds the state for a server call to CapDevicePubSub.pubEvent.
// See server.Call for documentation.
type CapDevicePubSub_pubEvent struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapDevicePubSub_pubEvent) Args() CapDevicePubSub_pubEvent_Params {
	return CapDevicePubSub_pubEvent_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapDevicePubSub_pubEvent) AllocResults() (CapDevicePubSub_pubEvent_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_pubEvent_Results(r), err
}

// CapDevicePubSub_pubProperties holds the state for a server call to CapDevicePubSub.pubProperties.
// See server.Call for documentation.
type CapDevicePubSub_pubProperties struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapDevicePubSub_pubProperties) Args() CapDevicePubSub_pubProperties_Params {
	return CapDevicePubSub_pubProperties_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapDevicePubSub_pubProperties) AllocResults() (CapDevicePubSub_pubProperties_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_pubProperties_Results(r), err
}

// CapDevicePubSub_pubTD holds the state for a server call to CapDevicePubSub.pubTD.
// See server.Call for documentation.
type CapDevicePubSub_pubTD struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapDevicePubSub_pubTD) Args() CapDevicePubSub_pubTD_Params {
	return CapDevicePubSub_pubTD_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapDevicePubSub_pubTD) AllocResults() (CapDevicePubSub_pubTD_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_pubTD_Results(r), err
}

// CapDevicePubSub_subAction holds the state for a server call to CapDevicePubSub.subAction.
// See server.Call for documentation.
type CapDevicePubSub_subAction struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapDevicePubSub_subAction) Args() CapDevicePubSub_subAction_Params {
	return CapDevicePubSub_subAction_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapDevicePubSub_subAction) AllocResults() (CapDevicePubSub_subAction_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_subAction_Results(r), err
}

// CapDevicePubSub_List is a list of CapDevicePubSub.
type CapDevicePubSub_List = capnp.CapList[CapDevicePubSub]

// NewCapDevicePubSub creates a new list of CapDevicePubSub.
func NewCapDevicePubSub_List(s *capnp.Segment, sz int32) (CapDevicePubSub_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapDevicePubSub](l), err
}

type CapDevicePubSub_pubEvent_Params capnp.Struct

// CapDevicePubSub_pubEvent_Params_TypeID is the unique identifier for the type CapDevicePubSub_pubEvent_Params.
const CapDevicePubSub_pubEvent_Params_TypeID = 0x87cc5066fed0778c

func NewCapDevicePubSub_pubEvent_Params(s *capnp.Segment) (CapDevicePubSub_pubEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapDevicePubSub_pubEvent_Params(st), err
}

func NewRootCapDevicePubSub_pubEvent_Params(s *capnp.Segment) (CapDevicePubSub_pubEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapDevicePubSub_pubEvent_Params(st), err
}

func ReadRootCapDevicePubSub_pubEvent_Params(msg *capnp.Message) (CapDevicePubSub_pubEvent_Params, error) {
	root, err := msg.Root()
	return CapDevicePubSub_pubEvent_Params(root.Struct()), err
}

func (s CapDevicePubSub_pubEvent_Params) String() string {
	str, _ := text.Marshal(0x87cc5066fed0778c, capnp.Struct(s))
	return str
}

func (s CapDevicePubSub_pubEvent_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDevicePubSub_pubEvent_Params) DecodeFromPtr(p capnp.Ptr) CapDevicePubSub_pubEvent_Params {
	return CapDevicePubSub_pubEvent_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDevicePubSub_pubEvent_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDevicePubSub_pubEvent_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDevicePubSub_pubEvent_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDevicePubSub_pubEvent_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDevicePubSub_pubEvent_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapDevicePubSub_pubEvent_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDevicePubSub_pubEvent_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapDevicePubSub_pubEvent_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapDevicePubSub_pubEvent_Params) EventID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapDevicePubSub_pubEvent_Params) HasEventID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapDevicePubSub_pubEvent_Params) EventIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapDevicePubSub_pubEvent_Params) SetEventID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapDevicePubSub_pubEvent_Params) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s CapDevicePubSub_pubEvent_Params) HasValue() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapDevicePubSub_pubEvent_Params) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

// CapDevicePubSub_pubEvent_Params_List is a list of CapDevicePubSub_pubEvent_Params.
type CapDevicePubSub_pubEvent_Params_List = capnp.StructList[CapDevicePubSub_pubEvent_Params]

// NewCapDevicePubSub_pubEvent_Params creates a new list of CapDevicePubSub_pubEvent_Params.
func NewCapDevicePubSub_pubEvent_Params_List(s *capnp.Segment, sz int32) (CapDevicePubSub_pubEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[CapDevicePubSub_pubEvent_Params](l), err
}

// CapDevicePubSub_pubEvent_Params_Future is a wrapper for a CapDevicePubSub_pubEvent_Params promised by a client call.
type CapDevicePubSub_pubEvent_Params_Future struct{ *capnp.Future }

func (f CapDevicePubSub_pubEvent_Params_Future) Struct() (CapDevicePubSub_pubEvent_Params, error) {
	p, err := f.Future.Ptr()
	return CapDevicePubSub_pubEvent_Params(p.Struct()), err
}

type CapDevicePubSub_pubEvent_Results capnp.Struct

// CapDevicePubSub_pubEvent_Results_TypeID is the unique identifier for the type CapDevicePubSub_pubEvent_Results.
const CapDevicePubSub_pubEvent_Results_TypeID = 0xd6e9ff28b3be9b63

func NewCapDevicePubSub_pubEvent_Results(s *capnp.Segment) (CapDevicePubSub_pubEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_pubEvent_Results(st), err
}

func NewRootCapDevicePubSub_pubEvent_Results(s *capnp.Segment) (CapDevicePubSub_pubEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_pubEvent_Results(st), err
}

func ReadRootCapDevicePubSub_pubEvent_Results(msg *capnp.Message) (CapDevicePubSub_pubEvent_Results, error) {
	root, err := msg.Root()
	return CapDevicePubSub_pubEvent_Results(root.Struct()), err
}

func (s CapDevicePubSub_pubEvent_Results) String() string {
	str, _ := text.Marshal(0xd6e9ff28b3be9b63, capnp.Struct(s))
	return str
}

func (s CapDevicePubSub_pubEvent_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDevicePubSub_pubEvent_Results) DecodeFromPtr(p capnp.Ptr) CapDevicePubSub_pubEvent_Results {
	return CapDevicePubSub_pubEvent_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDevicePubSub_pubEvent_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDevicePubSub_pubEvent_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDevicePubSub_pubEvent_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDevicePubSub_pubEvent_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapDevicePubSub_pubEvent_Results_List is a list of CapDevicePubSub_pubEvent_Results.
type CapDevicePubSub_pubEvent_Results_List = capnp.StructList[CapDevicePubSub_pubEvent_Results]

// NewCapDevicePubSub_pubEvent_Results creates a new list of CapDevicePubSub_pubEvent_Results.
func NewCapDevicePubSub_pubEvent_Results_List(s *capnp.Segment, sz int32) (CapDevicePubSub_pubEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapDevicePubSub_pubEvent_Results](l), err
}

// CapDevicePubSub_pubEvent_Results_Future is a wrapper for a CapDevicePubSub_pubEvent_Results promised by a client call.
type CapDevicePubSub_pubEvent_Results_Future struct{ *capnp.Future }

func (f CapDevicePubSub_pubEvent_Results_Future) Struct() (CapDevicePubSub_pubEvent_Results, error) {
	p, err := f.Future.Ptr()
	return CapDevicePubSub_pubEvent_Results(p.Struct()), err
}

type CapDevicePubSub_pubProperties_Params capnp.Struct

// CapDevicePubSub_pubProperties_Params_TypeID is the unique identifier for the type CapDevicePubSub_pubProperties_Params.
const CapDevicePubSub_pubProperties_Params_TypeID = 0x8654dd0285fb2417

func NewCapDevicePubSub_pubProperties_Params(s *capnp.Segment) (CapDevicePubSub_pubProperties_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapDevicePubSub_pubProperties_Params(st), err
}

func NewRootCapDevicePubSub_pubProperties_Params(s *capnp.Segment) (CapDevicePubSub_pubProperties_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapDevicePubSub_pubProperties_Params(st), err
}

func ReadRootCapDevicePubSub_pubProperties_Params(msg *capnp.Message) (CapDevicePubSub_pubProperties_Params, error) {
	root, err := msg.Root()
	return CapDevicePubSub_pubProperties_Params(root.Struct()), err
}

func (s CapDevicePubSub_pubProperties_Params) String() string {
	str, _ := text.Marshal(0x8654dd0285fb2417, capnp.Struct(s))
	return str
}

func (s CapDevicePubSub_pubProperties_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDevicePubSub_pubProperties_Params) DecodeFromPtr(p capnp.Ptr) CapDevicePubSub_pubProperties_Params {
	return CapDevicePubSub_pubProperties_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDevicePubSub_pubProperties_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDevicePubSub_pubProperties_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDevicePubSub_pubProperties_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDevicePubSub_pubProperties_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDevicePubSub_pubProperties_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapDevicePubSub_pubProperties_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDevicePubSub_pubProperties_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapDevicePubSub_pubProperties_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapDevicePubSub_pubProperties_Params) Props() (KeyValueMap, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return KeyValueMap(p.Struct()), err
}

func (s CapDevicePubSub_pubProperties_Params) HasProps() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapDevicePubSub_pubProperties_Params) SetProps(v KeyValueMap) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewProps sets the props field to a newly
// allocated KeyValueMap struct, preferring placement in s's segment.
func (s CapDevicePubSub_pubProperties_Params) NewProps() (KeyValueMap, error) {
	ss, err := NewKeyValueMap(capnp.Struct(s).Segment())
	if err != nil {
		return KeyValueMap{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapDevicePubSub_pubProperties_Params_List is a list of CapDevicePubSub_pubProperties_Params.
type CapDevicePubSub_pubProperties_Params_List = capnp.StructList[CapDevicePubSub_pubProperties_Params]

// NewCapDevicePubSub_pubProperties_Params creates a new list of CapDevicePubSub_pubProperties_Params.
func NewCapDevicePubSub_pubProperties_Params_List(s *capnp.Segment, sz int32) (CapDevicePubSub_pubProperties_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapDevicePubSub_pubProperties_Params](l), err
}

// CapDevicePubSub_pubProperties_Params_Future is a wrapper for a CapDevicePubSub_pubProperties_Params promised by a client call.
type CapDevicePubSub_pubProperties_Params_Future struct{ *capnp.Future }

func (f CapDevicePubSub_pubProperties_Params_Future) Struct() (CapDevicePubSub_pubProperties_Params, error) {
	p, err := f.Future.Ptr()
	return CapDevicePubSub_pubProperties_Params(p.Struct()), err
}
func (p CapDevicePubSub_pubProperties_Params_Future) Props() KeyValueMap_Future {
	return KeyValueMap_Future{Future: p.Future.Field(1, nil)}
}

type CapDevicePubSub_pubProperties_Results capnp.Struct

// CapDevicePubSub_pubProperties_Results_TypeID is the unique identifier for the type CapDevicePubSub_pubProperties_Results.
const CapDevicePubSub_pubProperties_Results_TypeID = 0x963848ac762fb0d0

func NewCapDevicePubSub_pubProperties_Results(s *capnp.Segment) (CapDevicePubSub_pubProperties_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_pubProperties_Results(st), err
}

func NewRootCapDevicePubSub_pubProperties_Results(s *capnp.Segment) (CapDevicePubSub_pubProperties_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_pubProperties_Results(st), err
}

func ReadRootCapDevicePubSub_pubProperties_Results(msg *capnp.Message) (CapDevicePubSub_pubProperties_Results, error) {
	root, err := msg.Root()
	return CapDevicePubSub_pubProperties_Results(root.Struct()), err
}

func (s CapDevicePubSub_pubProperties_Results) String() string {
	str, _ := text.Marshal(0x963848ac762fb0d0, capnp.Struct(s))
	return str
}

func (s CapDevicePubSub_pubProperties_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDevicePubSub_pubProperties_Results) DecodeFromPtr(p capnp.Ptr) CapDevicePubSub_pubProperties_Results {
	return CapDevicePubSub_pubProperties_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDevicePubSub_pubProperties_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDevicePubSub_pubProperties_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDevicePubSub_pubProperties_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDevicePubSub_pubProperties_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapDevicePubSub_pubProperties_Results_List is a list of CapDevicePubSub_pubProperties_Results.
type CapDevicePubSub_pubProperties_Results_List = capnp.StructList[CapDevicePubSub_pubProperties_Results]

// NewCapDevicePubSub_pubProperties_Results creates a new list of CapDevicePubSub_pubProperties_Results.
func NewCapDevicePubSub_pubProperties_Results_List(s *capnp.Segment, sz int32) (CapDevicePubSub_pubProperties_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapDevicePubSub_pubProperties_Results](l), err
}

// CapDevicePubSub_pubProperties_Results_Future is a wrapper for a CapDevicePubSub_pubProperties_Results promised by a client call.
type CapDevicePubSub_pubProperties_Results_Future struct{ *capnp.Future }

func (f CapDevicePubSub_pubProperties_Results_Future) Struct() (CapDevicePubSub_pubProperties_Results, error) {
	p, err := f.Future.Ptr()
	return CapDevicePubSub_pubProperties_Results(p.Struct()), err
}

type CapDevicePubSub_pubTD_Params capnp.Struct

// CapDevicePubSub_pubTD_Params_TypeID is the unique identifier for the type CapDevicePubSub_pubTD_Params.
const CapDevicePubSub_pubTD_Params_TypeID = 0xf42f5607f8b83318

func NewCapDevicePubSub_pubTD_Params(s *capnp.Segment) (CapDevicePubSub_pubTD_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapDevicePubSub_pubTD_Params(st), err
}

func NewRootCapDevicePubSub_pubTD_Params(s *capnp.Segment) (CapDevicePubSub_pubTD_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapDevicePubSub_pubTD_Params(st), err
}

func ReadRootCapDevicePubSub_pubTD_Params(msg *capnp.Message) (CapDevicePubSub_pubTD_Params, error) {
	root, err := msg.Root()
	return CapDevicePubSub_pubTD_Params(root.Struct()), err
}

func (s CapDevicePubSub_pubTD_Params) String() string {
	str, _ := text.Marshal(0xf42f5607f8b83318, capnp.Struct(s))
	return str
}

func (s CapDevicePubSub_pubTD_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDevicePubSub_pubTD_Params) DecodeFromPtr(p capnp.Ptr) CapDevicePubSub_pubTD_Params {
	return CapDevicePubSub_pubTD_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDevicePubSub_pubTD_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDevicePubSub_pubTD_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDevicePubSub_pubTD_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDevicePubSub_pubTD_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDevicePubSub_pubTD_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapDevicePubSub_pubTD_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDevicePubSub_pubTD_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapDevicePubSub_pubTD_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapDevicePubSub_pubTD_Params) TdDoc() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s CapDevicePubSub_pubTD_Params) HasTdDoc() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapDevicePubSub_pubTD_Params) SetTdDoc(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// CapDevicePubSub_pubTD_Params_List is a list of CapDevicePubSub_pubTD_Params.
type CapDevicePubSub_pubTD_Params_List = capnp.StructList[CapDevicePubSub_pubTD_Params]

// NewCapDevicePubSub_pubTD_Params creates a new list of CapDevicePubSub_pubTD_Params.
func NewCapDevicePubSub_pubTD_Params_List(s *capnp.Segment, sz int32) (CapDevicePubSub_pubTD_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapDevicePubSub_pubTD_Params](l), err
}

// CapDevicePubSub_pubTD_Params_Future is a wrapper for a CapDevicePubSub_pubTD_Params promised by a client call.
type CapDevicePubSub_pubTD_Params_Future struct{ *capnp.Future }

func (f CapDevicePubSub_pubTD_Params_Future) Struct() (CapDevicePubSub_pubTD_Params, error) {
	p, err := f.Future.Ptr()
	return CapDevicePubSub_pubTD_Params(p.Struct()), err
}

type CapDevicePubSub_pubTD_Results capnp.Struct

// CapDevicePubSub_pubTD_Results_TypeID is the unique identifier for the type CapDevicePubSub_pubTD_Results.
const CapDevicePubSub_pubTD_Results_TypeID = 0x8a5bb4a2615ad89f

func NewCapDevicePubSub_pubTD_Results(s *capnp.Segment) (CapDevicePubSub_pubTD_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_pubTD_Results(st), err
}

func NewRootCapDevicePubSub_pubTD_Results(s *capnp.Segment) (CapDevicePubSub_pubTD_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_pubTD_Results(st), err
}

func ReadRootCapDevicePubSub_pubTD_Results(msg *capnp.Message) (CapDevicePubSub_pubTD_Results, error) {
	root, err := msg.Root()
	return CapDevicePubSub_pubTD_Results(root.Struct()), err
}

func (s CapDevicePubSub_pubTD_Results) String() string {
	str, _ := text.Marshal(0x8a5bb4a2615ad89f, capnp.Struct(s))
	return str
}

func (s CapDevicePubSub_pubTD_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDevicePubSub_pubTD_Results) DecodeFromPtr(p capnp.Ptr) CapDevicePubSub_pubTD_Results {
	return CapDevicePubSub_pubTD_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDevicePubSub_pubTD_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDevicePubSub_pubTD_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDevicePubSub_pubTD_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDevicePubSub_pubTD_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapDevicePubSub_pubTD_Results_List is a list of CapDevicePubSub_pubTD_Results.
type CapDevicePubSub_pubTD_Results_List = capnp.StructList[CapDevicePubSub_pubTD_Results]

// NewCapDevicePubSub_pubTD_Results creates a new list of CapDevicePubSub_pubTD_Results.
func NewCapDevicePubSub_pubTD_Results_List(s *capnp.Segment, sz int32) (CapDevicePubSub_pubTD_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapDevicePubSub_pubTD_Results](l), err
}

// CapDevicePubSub_pubTD_Results_Future is a wrapper for a CapDevicePubSub_pubTD_Results promised by a client call.
type CapDevicePubSub_pubTD_Results_Future struct{ *capnp.Future }

func (f CapDevicePubSub_pubTD_Results_Future) Struct() (CapDevicePubSub_pubTD_Results, error) {
	p, err := f.Future.Ptr()
	return CapDevicePubSub_pubTD_Results(p.Struct()), err
}

type CapDevicePubSub_subAction_Params capnp.Struct

// CapDevicePubSub_subAction_Params_TypeID is the unique identifier for the type CapDevicePubSub_subAction_Params.
const CapDevicePubSub_subAction_Params_TypeID = 0x8efab8ac3a0cf3ae

func NewCapDevicePubSub_subAction_Params(s *capnp.Segment) (CapDevicePubSub_subAction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapDevicePubSub_subAction_Params(st), err
}

func NewRootCapDevicePubSub_subAction_Params(s *capnp.Segment) (CapDevicePubSub_subAction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapDevicePubSub_subAction_Params(st), err
}

func ReadRootCapDevicePubSub_subAction_Params(msg *capnp.Message) (CapDevicePubSub_subAction_Params, error) {
	root, err := msg.Root()
	return CapDevicePubSub_subAction_Params(root.Struct()), err
}

func (s CapDevicePubSub_subAction_Params) String() string {
	str, _ := text.Marshal(0x8efab8ac3a0cf3ae, capnp.Struct(s))
	return str
}

func (s CapDevicePubSub_subAction_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDevicePubSub_subAction_Params) DecodeFromPtr(p capnp.Ptr) CapDevicePubSub_subAction_Params {
	return CapDevicePubSub_subAction_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDevicePubSub_subAction_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDevicePubSub_subAction_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDevicePubSub_subAction_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDevicePubSub_subAction_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapDevicePubSub_subAction_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapDevicePubSub_subAction_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapDevicePubSub_subAction_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapDevicePubSub_subAction_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapDevicePubSub_subAction_Params) ActionID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapDevicePubSub_subAction_Params) HasActionID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapDevicePubSub_subAction_Params) ActionIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapDevicePubSub_subAction_Params) SetActionID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapDevicePubSub_subAction_Params) Handler() CapSubscriptionHandler {
	p, _ := capnp.Struct(s).Ptr(2)
	return CapSubscriptionHandler(p.Interface().Client())
}

func (s CapDevicePubSub_subAction_Params) HasHandler() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapDevicePubSub_subAction_Params) SetHandler(v CapSubscriptionHandler) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

// CapDevicePubSub_subAction_Params_List is a list of CapDevicePubSub_subAction_Params.
type CapDevicePubSub_subAction_Params_List = capnp.StructList[CapDevicePubSub_subAction_Params]

// NewCapDevicePubSub_subAction_Params creates a new list of CapDevicePubSub_subAction_Params.
func NewCapDevicePubSub_subAction_Params_List(s *capnp.Segment, sz int32) (CapDevicePubSub_subAction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[CapDevicePubSub_subAction_Params](l), err
}

// CapDevicePubSub_subAction_Params_Future is a wrapper for a CapDevicePubSub_subAction_Params promised by a client call.
type CapDevicePubSub_subAction_Params_Future struct{ *capnp.Future }

func (f CapDevicePubSub_subAction_Params_Future) Struct() (CapDevicePubSub_subAction_Params, error) {
	p, err := f.Future.Ptr()
	return CapDevicePubSub_subAction_Params(p.Struct()), err
}
func (p CapDevicePubSub_subAction_Params_Future) Handler() CapSubscriptionHandler {
	return CapSubscriptionHandler(p.Future.Field(2, nil).Client())
}

type CapDevicePubSub_subAction_Results capnp.Struct

// CapDevicePubSub_subAction_Results_TypeID is the unique identifier for the type CapDevicePubSub_subAction_Results.
const CapDevicePubSub_subAction_Results_TypeID = 0xf69c375c3a85d655

func NewCapDevicePubSub_subAction_Results(s *capnp.Segment) (CapDevicePubSub_subAction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_subAction_Results(st), err
}

func NewRootCapDevicePubSub_subAction_Results(s *capnp.Segment) (CapDevicePubSub_subAction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapDevicePubSub_subAction_Results(st), err
}

func ReadRootCapDevicePubSub_subAction_Results(msg *capnp.Message) (CapDevicePubSub_subAction_Results, error) {
	root, err := msg.Root()
	return CapDevicePubSub_subAction_Results(root.Struct()), err
}

func (s CapDevicePubSub_subAction_Results) String() string {
	str, _ := text.Marshal(0xf69c375c3a85d655, capnp.Struct(s))
	return str
}

func (s CapDevicePubSub_subAction_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapDevicePubSub_subAction_Results) DecodeFromPtr(p capnp.Ptr) CapDevicePubSub_subAction_Results {
	return CapDevicePubSub_subAction_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapDevicePubSub_subAction_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapDevicePubSub_subAction_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapDevicePubSub_subAction_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapDevicePubSub_subAction_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapDevicePubSub_subAction_Results_List is a list of CapDevicePubSub_subAction_Results.
type CapDevicePubSub_subAction_Results_List = capnp.StructList[CapDevicePubSub_subAction_Results]

// NewCapDevicePubSub_subAction_Results creates a new list of CapDevicePubSub_subAction_Results.
func NewCapDevicePubSub_subAction_Results_List(s *capnp.Segment, sz int32) (CapDevicePubSub_subAction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapDevicePubSub_subAction_Results](l), err
}

// CapDevicePubSub_subAction_Results_Future is a wrapper for a CapDevicePubSub_subAction_Results promised by a client call.
type CapDevicePubSub_subAction_Results_Future struct{ *capnp.Future }

func (f CapDevicePubSub_subAction_Results_Future) Struct() (CapDevicePubSub_subAction_Results, error) {
	p, err := f.Future.Ptr()
	return CapDevicePubSub_subAction_Results(p.Struct()), err
}

type CapServicePubSub capnp.Client

// CapServicePubSub_TypeID is the unique identifier for the type CapServicePubSub.
const CapServicePubSub_TypeID = 0xf9bfff17720dccba

func (c CapServicePubSub) SubActions(ctx context.Context, params func(CapServicePubSub_subActions_Params) error) (CapServicePubSub_subActions_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf9bfff17720dccba,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapServicePubSub",
			MethodName:    "subActions",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapServicePubSub_subActions_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapServicePubSub_subActions_Results_Future{Future: ans.Future()}, release
}
func (c CapServicePubSub) PubEvent(ctx context.Context, params func(CapDevicePubSub_pubEvent_Params) error) (CapDevicePubSub_pubEvent_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "pubEvent",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDevicePubSub_pubEvent_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDevicePubSub_pubEvent_Results_Future{Future: ans.Future()}, release
}
func (c CapServicePubSub) PubProperties(ctx context.Context, params func(CapDevicePubSub_pubProperties_Params) error) (CapDevicePubSub_pubProperties_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "pubProperties",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDevicePubSub_pubProperties_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDevicePubSub_pubProperties_Results_Future{Future: ans.Future()}, release
}
func (c CapServicePubSub) PubTD(ctx context.Context, params func(CapDevicePubSub_pubTD_Params) error) (CapDevicePubSub_pubTD_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      2,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "pubTD",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDevicePubSub_pubTD_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDevicePubSub_pubTD_Results_Future{Future: ans.Future()}, release
}
func (c CapServicePubSub) SubAction(ctx context.Context, params func(CapDevicePubSub_subAction_Params) error) (CapDevicePubSub_subAction_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      3,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "subAction",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapDevicePubSub_subAction_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapDevicePubSub_subAction_Results_Future{Future: ans.Future()}, release
}
func (c CapServicePubSub) PubAction(ctx context.Context, params func(CapUserPubSub_pubAction_Params) error) (CapUserPubSub_pubAction_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "pubAction",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapUserPubSub_pubAction_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapUserPubSub_pubAction_Results_Future{Future: ans.Future()}, release
}
func (c CapServicePubSub) SubEvent(ctx context.Context, params func(CapUserPubSub_subEvent_Params) error) (CapUserPubSub_subEvent_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "subEvent",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapUserPubSub_subEvent_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapUserPubSub_subEvent_Results_Future{Future: ans.Future()}, release
}
func (c CapServicePubSub) SubTDs(ctx context.Context, params func(CapUserPubSub_subTDs_Params) error) (CapUserPubSub_subTDs_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      2,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "subTDs",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapUserPubSub_subTDs_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapUserPubSub_subTDs_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapServicePubSub) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapServicePubSub) AddRef() CapServicePubSub {
	return CapServicePubSub(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapServicePubSub) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapServicePubSub) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapServicePubSub) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapServicePubSub) DecodeFromPtr(p capnp.Ptr) CapServicePubSub {
	return CapServicePubSub(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapServicePubSub) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapServicePubSub) IsSame(other CapServicePubSub) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapServicePubSub) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapServicePubSub) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapServicePubSub_Server is a CapServicePubSub with a local implementation.
type CapServicePubSub_Server interface {
	SubActions(context.Context, CapServicePubSub_subActions) error

	PubEvent(context.Context, CapDevicePubSub_pubEvent) error

	PubProperties(context.Context, CapDevicePubSub_pubProperties) error

	PubTD(context.Context, CapDevicePubSub_pubTD) error

	SubAction(context.Context, CapDevicePubSub_subAction) error

	PubAction(context.Context, CapUserPubSub_pubAction) error

	SubEvent(context.Context, CapUserPubSub_subEvent) error

	SubTDs(context.Context, CapUserPubSub_subTDs) error
}

// CapServicePubSub_NewServer creates a new Server from an implementation of CapServicePubSub_Server.
func CapServicePubSub_NewServer(s CapServicePubSub_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapServicePubSub_Methods(nil, s), s, c)
}

// CapServicePubSub_ServerToClient creates a new Client from an implementation of CapServicePubSub_Server.
// The caller is responsible for calling Release on the returned Client.
func CapServicePubSub_ServerToClient(s CapServicePubSub_Server) CapServicePubSub {
	return CapServicePubSub(capnp.NewClient(CapServicePubSub_NewServer(s)))
}

// CapServicePubSub_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapServicePubSub_Methods(methods []server.Method, s CapServicePubSub_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 8)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf9bfff17720dccba,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapServicePubSub",
			MethodName:    "subActions",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SubActions(ctx, CapServicePubSub_subActions{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "pubEvent",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PubEvent(ctx, CapDevicePubSub_pubEvent{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "pubProperties",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PubProperties(ctx, CapDevicePubSub_pubProperties{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      2,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "pubTD",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PubTD(ctx, CapDevicePubSub_pubTD{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfb8a690e8697e4a,
			MethodID:      3,
			InterfaceName: "hubapi/PubSub.capnp:CapDevicePubSub",
			MethodName:    "subAction",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SubAction(ctx, CapDevicePubSub_subAction{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "pubAction",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PubAction(ctx, CapUserPubSub_pubAction{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "subEvent",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SubEvent(ctx, CapUserPubSub_subEvent{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      2,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "subTDs",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SubTDs(ctx, CapUserPubSub_subTDs{call})
		},
	})

	return methods
}

// CapServicePubSub_subActions holds the state for a server call to CapServicePubSub.subActions.
// See server.Call for documentation.
type CapServicePubSub_subActions struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapServicePubSub_subActions) Args() CapServicePubSub_subActions_Params {
	return CapServicePubSub_subActions_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapServicePubSub_subActions) AllocResults() (CapServicePubSub_subActions_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapServicePubSub_subActions_Results(r), err
}

// CapServicePubSub_List is a list of CapServicePubSub.
type CapServicePubSub_List = capnp.CapList[CapServicePubSub]

// NewCapServicePubSub creates a new list of CapServicePubSub.
func NewCapServicePubSub_List(s *capnp.Segment, sz int32) (CapServicePubSub_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapServicePubSub](l), err
}

type CapServicePubSub_subActions_Params capnp.Struct

// CapServicePubSub_subActions_Params_TypeID is the unique identifier for the type CapServicePubSub_subActions_Params.
const CapServicePubSub_subActions_Params_TypeID = 0xee3e107dce1b7eee

func NewCapServicePubSub_subActions_Params(s *capnp.Segment) (CapServicePubSub_subActions_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CapServicePubSub_subActions_Params(st), err
}

func NewRootCapServicePubSub_subActions_Params(s *capnp.Segment) (CapServicePubSub_subActions_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CapServicePubSub_subActions_Params(st), err
}

func ReadRootCapServicePubSub_subActions_Params(msg *capnp.Message) (CapServicePubSub_subActions_Params, error) {
	root, err := msg.Root()
	return CapServicePubSub_subActions_Params(root.Struct()), err
}

func (s CapServicePubSub_subActions_Params) String() string {
	str, _ := text.Marshal(0xee3e107dce1b7eee, capnp.Struct(s))
	return str
}

func (s CapServicePubSub_subActions_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapServicePubSub_subActions_Params) DecodeFromPtr(p capnp.Ptr) CapServicePubSub_subActions_Params {
	return CapServicePubSub_subActions_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapServicePubSub_subActions_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapServicePubSub_subActions_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapServicePubSub_subActions_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapServicePubSub_subActions_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapServicePubSub_subActions_Params) PublisherID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapServicePubSub_subActions_Params) HasPublisherID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapServicePubSub_subActions_Params) PublisherIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapServicePubSub_subActions_Params) SetPublisherID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapServicePubSub_subActions_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapServicePubSub_subActions_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapServicePubSub_subActions_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapServicePubSub_subActions_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapServicePubSub_subActions_Params) ActionID() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CapServicePubSub_subActions_Params) HasActionID() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapServicePubSub_subActions_Params) ActionIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CapServicePubSub_subActions_Params) SetActionID(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s CapServicePubSub_subActions_Params) Handler() CapSubscriptionHandler {
	p, _ := capnp.Struct(s).Ptr(3)
	return CapSubscriptionHandler(p.Interface().Client())
}

func (s CapServicePubSub_subActions_Params) HasHandler() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CapServicePubSub_subActions_Params) SetHandler(v CapSubscriptionHandler) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

// CapServicePubSub_subActions_Params_List is a list of CapServicePubSub_subActions_Params.
type CapServicePubSub_subActions_Params_List = capnp.StructList[CapServicePubSub_subActions_Params]

// NewCapServicePubSub_subActions_Params creates a new list of CapServicePubSub_subActions_Params.
func NewCapServicePubSub_subActions_Params_List(s *capnp.Segment, sz int32) (CapServicePubSub_subActions_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[CapServicePubSub_subActions_Params](l), err
}

// CapServicePubSub_subActions_Params_Future is a wrapper for a CapServicePubSub_subActions_Params promised by a client call.
type CapServicePubSub_subActions_Params_Future struct{ *capnp.Future }

func (f CapServicePubSub_subActions_Params_Future) Struct() (CapServicePubSub_subActions_Params, error) {
	p, err := f.Future.Ptr()
	return CapServicePubSub_subActions_Params(p.Struct()), err
}
func (p CapServicePubSub_subActions_Params_Future) Handler() CapSubscriptionHandler {
	return CapSubscriptionHandler(p.Future.Field(3, nil).Client())
}

type CapServicePubSub_subActions_Results capnp.Struct

// CapServicePubSub_subActions_Results_TypeID is the unique identifier for the type CapServicePubSub_subActions_Results.
const CapServicePubSub_subActions_Results_TypeID = 0xb495269b0f4ed2b7

func NewCapServicePubSub_subActions_Results(s *capnp.Segment) (CapServicePubSub_subActions_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapServicePubSub_subActions_Results(st), err
}

func NewRootCapServicePubSub_subActions_Results(s *capnp.Segment) (CapServicePubSub_subActions_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapServicePubSub_subActions_Results(st), err
}

func ReadRootCapServicePubSub_subActions_Results(msg *capnp.Message) (CapServicePubSub_subActions_Results, error) {
	root, err := msg.Root()
	return CapServicePubSub_subActions_Results(root.Struct()), err
}

func (s CapServicePubSub_subActions_Results) String() string {
	str, _ := text.Marshal(0xb495269b0f4ed2b7, capnp.Struct(s))
	return str
}

func (s CapServicePubSub_subActions_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapServicePubSub_subActions_Results) DecodeFromPtr(p capnp.Ptr) CapServicePubSub_subActions_Results {
	return CapServicePubSub_subActions_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapServicePubSub_subActions_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapServicePubSub_subActions_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapServicePubSub_subActions_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapServicePubSub_subActions_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapServicePubSub_subActions_Results_List is a list of CapServicePubSub_subActions_Results.
type CapServicePubSub_subActions_Results_List = capnp.StructList[CapServicePubSub_subActions_Results]

// NewCapServicePubSub_subActions_Results creates a new list of CapServicePubSub_subActions_Results.
func NewCapServicePubSub_subActions_Results_List(s *capnp.Segment, sz int32) (CapServicePubSub_subActions_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapServicePubSub_subActions_Results](l), err
}

// CapServicePubSub_subActions_Results_Future is a wrapper for a CapServicePubSub_subActions_Results promised by a client call.
type CapServicePubSub_subActions_Results_Future struct{ *capnp.Future }

func (f CapServicePubSub_subActions_Results_Future) Struct() (CapServicePubSub_subActions_Results, error) {
	p, err := f.Future.Ptr()
	return CapServicePubSub_subActions_Results(p.Struct()), err
}

type CapUserPubSub capnp.Client

// CapUserPubSub_TypeID is the unique identifier for the type CapUserPubSub.
const CapUserPubSub_TypeID = 0xad556cb9c8905a7b

func (c CapUserPubSub) PubAction(ctx context.Context, params func(CapUserPubSub_pubAction_Params) error) (CapUserPubSub_pubAction_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "pubAction",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapUserPubSub_pubAction_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapUserPubSub_pubAction_Results_Future{Future: ans.Future()}, release
}
func (c CapUserPubSub) SubEvent(ctx context.Context, params func(CapUserPubSub_subEvent_Params) error) (CapUserPubSub_subEvent_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "subEvent",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapUserPubSub_subEvent_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapUserPubSub_subEvent_Results_Future{Future: ans.Future()}, release
}
func (c CapUserPubSub) SubTDs(ctx context.Context, params func(CapUserPubSub_subTDs_Params) error) (CapUserPubSub_subTDs_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      2,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "subTDs",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapUserPubSub_subTDs_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapUserPubSub_subTDs_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapUserPubSub) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapUserPubSub) AddRef() CapUserPubSub {
	return CapUserPubSub(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapUserPubSub) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapUserPubSub) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapUserPubSub) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapUserPubSub) DecodeFromPtr(p capnp.Ptr) CapUserPubSub {
	return CapUserPubSub(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapUserPubSub) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapUserPubSub) IsSame(other CapUserPubSub) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapUserPubSub) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapUserPubSub) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapUserPubSub_Server is a CapUserPubSub with a local implementation.
type CapUserPubSub_Server interface {
	PubAction(context.Context, CapUserPubSub_pubAction) error

	SubEvent(context.Context, CapUserPubSub_subEvent) error

	SubTDs(context.Context, CapUserPubSub_subTDs) error
}

// CapUserPubSub_NewServer creates a new Server from an implementation of CapUserPubSub_Server.
func CapUserPubSub_NewServer(s CapUserPubSub_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapUserPubSub_Methods(nil, s), s, c)
}

// CapUserPubSub_ServerToClient creates a new Client from an implementation of CapUserPubSub_Server.
// The caller is responsible for calling Release on the returned Client.
func CapUserPubSub_ServerToClient(s CapUserPubSub_Server) CapUserPubSub {
	return CapUserPubSub(capnp.NewClient(CapUserPubSub_NewServer(s)))
}

// CapUserPubSub_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapUserPubSub_Methods(methods []server.Method, s CapUserPubSub_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "pubAction",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PubAction(ctx, CapUserPubSub_pubAction{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      1,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "subEvent",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SubEvent(ctx, CapUserPubSub_subEvent{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xad556cb9c8905a7b,
			MethodID:      2,
			InterfaceName: "hubapi/PubSub.capnp:CapUserPubSub",
			MethodName:    "subTDs",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SubTDs(ctx, CapUserPubSub_subTDs{call})
		},
	})

	return methods
}

// CapUserPubSub_pubAction holds the state for a server call to CapUserPubSub.pubAction.
// See server.Call for documentation.
type CapUserPubSub_pubAction struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapUserPubSub_pubAction) Args() CapUserPubSub_pubAction_Params {
	return CapUserPubSub_pubAction_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapUserPubSub_pubAction) AllocResults() (CapUserPubSub_pubAction_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUserPubSub_pubAction_Results(r), err
}

// CapUserPubSub_subEvent holds the state for a server call to CapUserPubSub.subEvent.
// See server.Call for documentation.
type CapUserPubSub_subEvent struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapUserPubSub_subEvent) Args() CapUserPubSub_subEvent_Params {
	return CapUserPubSub_subEvent_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapUserPubSub_subEvent) AllocResults() (CapUserPubSub_subEvent_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUserPubSub_subEvent_Results(r), err
}

// CapUserPubSub_subTDs holds the state for a server call to CapUserPubSub.subTDs.
// See server.Call for documentation.
type CapUserPubSub_subTDs struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapUserPubSub_subTDs) Args() CapUserPubSub_subTDs_Params {
	return CapUserPubSub_subTDs_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapUserPubSub_subTDs) AllocResults() (CapUserPubSub_subTDs_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUserPubSub_subTDs_Results(r), err
}

// CapUserPubSub_List is a list of CapUserPubSub.
type CapUserPubSub_List = capnp.CapList[CapUserPubSub]

// NewCapUserPubSub creates a new list of CapUserPubSub.
func NewCapUserPubSub_List(s *capnp.Segment, sz int32) (CapUserPubSub_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapUserPubSub](l), err
}

type CapUserPubSub_pubAction_Params capnp.Struct

// CapUserPubSub_pubAction_Params_TypeID is the unique identifier for the type CapUserPubSub_pubAction_Params.
const CapUserPubSub_pubAction_Params_TypeID = 0x913808ae28ff6473

func NewCapUserPubSub_pubAction_Params(s *capnp.Segment) (CapUserPubSub_pubAction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CapUserPubSub_pubAction_Params(st), err
}

func NewRootCapUserPubSub_pubAction_Params(s *capnp.Segment) (CapUserPubSub_pubAction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CapUserPubSub_pubAction_Params(st), err
}

func ReadRootCapUserPubSub_pubAction_Params(msg *capnp.Message) (CapUserPubSub_pubAction_Params, error) {
	root, err := msg.Root()
	return CapUserPubSub_pubAction_Params(root.Struct()), err
}

func (s CapUserPubSub_pubAction_Params) String() string {
	str, _ := text.Marshal(0x913808ae28ff6473, capnp.Struct(s))
	return str
}

func (s CapUserPubSub_pubAction_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUserPubSub_pubAction_Params) DecodeFromPtr(p capnp.Ptr) CapUserPubSub_pubAction_Params {
	return CapUserPubSub_pubAction_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUserPubSub_pubAction_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUserPubSub_pubAction_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUserPubSub_pubAction_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUserPubSub_pubAction_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapUserPubSub_pubAction_Params) PublisherID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapUserPubSub_pubAction_Params) HasPublisherID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapUserPubSub_pubAction_Params) PublisherIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapUserPubSub_pubAction_Params) SetPublisherID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapUserPubSub_pubAction_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapUserPubSub_pubAction_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapUserPubSub_pubAction_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapUserPubSub_pubAction_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapUserPubSub_pubAction_Params) ActionID() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CapUserPubSub_pubAction_Params) HasActionID() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapUserPubSub_pubAction_Params) ActionIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CapUserPubSub_pubAction_Params) SetActionID(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s CapUserPubSub_pubAction_Params) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s CapUserPubSub_pubAction_Params) HasValue() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CapUserPubSub_pubAction_Params) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

// CapUserPubSub_pubAction_Params_List is a list of CapUserPubSub_pubAction_Params.
type CapUserPubSub_pubAction_Params_List = capnp.StructList[CapUserPubSub_pubAction_Params]

// NewCapUserPubSub_pubAction_Params creates a new list of CapUserPubSub_pubAction_Params.
func NewCapUserPubSub_pubAction_Params_List(s *capnp.Segment, sz int32) (CapUserPubSub_pubAction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[CapUserPubSub_pubAction_Params](l), err
}

// CapUserPubSub_pubAction_Params_Future is a wrapper for a CapUserPubSub_pubAction_Params promised by a client call.
type CapUserPubSub_pubAction_Params_Future struct{ *capnp.Future }

func (f CapUserPubSub_pubAction_Params_Future) Struct() (CapUserPubSub_pubAction_Params, error) {
	p, err := f.Future.Ptr()
	return CapUserPubSub_pubAction_Params(p.Struct()), err
}

type CapUserPubSub_pubAction_Results capnp.Struct

// CapUserPubSub_pubAction_Results_TypeID is the unique identifier for the type CapUserPubSub_pubAction_Results.
const CapUserPubSub_pubAction_Results_TypeID = 0xc3ba28619686bf88

func NewCapUserPubSub_pubAction_Results(s *capnp.Segment) (CapUserPubSub_pubAction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUserPubSub_pubAction_Results(st), err
}

func NewRootCapUserPubSub_pubAction_Results(s *capnp.Segment) (CapUserPubSub_pubAction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUserPubSub_pubAction_Results(st), err
}

func ReadRootCapUserPubSub_pubAction_Results(msg *capnp.Message) (CapUserPubSub_pubAction_Results, error) {
	root, err := msg.Root()
	return CapUserPubSub_pubAction_Results(root.Struct()), err
}

func (s CapUserPubSub_pubAction_Results) String() string {
	str, _ := text.Marshal(0xc3ba28619686bf88, capnp.Struct(s))
	return str
}

func (s CapUserPubSub_pubAction_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUserPubSub_pubAction_Results) DecodeFromPtr(p capnp.Ptr) CapUserPubSub_pubAction_Results {
	return CapUserPubSub_pubAction_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUserPubSub_pubAction_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUserPubSub_pubAction_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUserPubSub_pubAction_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUserPubSub_pubAction_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapUserPubSub_pubAction_Results_List is a list of CapUserPubSub_pubAction_Results.
type CapUserPubSub_pubAction_Results_List = capnp.StructList[CapUserPubSub_pubAction_Results]

// NewCapUserPubSub_pubAction_Results creates a new list of CapUserPubSub_pubAction_Results.
func NewCapUserPubSub_pubAction_Results_List(s *capnp.Segment, sz int32) (CapUserPubSub_pubAction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapUserPubSub_pubAction_Results](l), err
}

// CapUserPubSub_pubAction_Results_Future is a wrapper for a CapUserPubSub_pubAction_Results promised by a client call.
type CapUserPubSub_pubAction_Results_Future struct{ *capnp.Future }

func (f CapUserPubSub_pubAction_Results_Future) Struct() (CapUserPubSub_pubAction_Results, error) {
	p, err := f.Future.Ptr()
	return CapUserPubSub_pubAction_Results(p.Struct()), err
}

type CapUserPubSub_subEvent_Params capnp.Struct

// CapUserPubSub_subEvent_Params_TypeID is the unique identifier for the type CapUserPubSub_subEvent_Params.
const CapUserPubSub_subEvent_Params_TypeID = 0xae7ce3209daecb9a

func NewCapUserPubSub_subEvent_Params(s *capnp.Segment) (CapUserPubSub_subEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CapUserPubSub_subEvent_Params(st), err
}

func NewRootCapUserPubSub_subEvent_Params(s *capnp.Segment) (CapUserPubSub_subEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return CapUserPubSub_subEvent_Params(st), err
}

func ReadRootCapUserPubSub_subEvent_Params(msg *capnp.Message) (CapUserPubSub_subEvent_Params, error) {
	root, err := msg.Root()
	return CapUserPubSub_subEvent_Params(root.Struct()), err
}

func (s CapUserPubSub_subEvent_Params) String() string {
	str, _ := text.Marshal(0xae7ce3209daecb9a, capnp.Struct(s))
	return str
}

func (s CapUserPubSub_subEvent_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUserPubSub_subEvent_Params) DecodeFromPtr(p capnp.Ptr) CapUserPubSub_subEvent_Params {
	return CapUserPubSub_subEvent_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUserPubSub_subEvent_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUserPubSub_subEvent_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUserPubSub_subEvent_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUserPubSub_subEvent_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapUserPubSub_subEvent_Params) PublisherID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapUserPubSub_subEvent_Params) HasPublisherID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapUserPubSub_subEvent_Params) PublisherIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapUserPubSub_subEvent_Params) SetPublisherID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapUserPubSub_subEvent_Params) ThingID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapUserPubSub_subEvent_Params) HasThingID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapUserPubSub_subEvent_Params) ThingIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapUserPubSub_subEvent_Params) SetThingID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapUserPubSub_subEvent_Params) EventID() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CapUserPubSub_subEvent_Params) HasEventID() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapUserPubSub_subEvent_Params) EventIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CapUserPubSub_subEvent_Params) SetEventID(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s CapUserPubSub_subEvent_Params) Handler() CapSubscriptionHandler {
	p, _ := capnp.Struct(s).Ptr(3)
	return CapSubscriptionHandler(p.Interface().Client())
}

func (s CapUserPubSub_subEvent_Params) HasHandler() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CapUserPubSub_subEvent_Params) SetHandler(v CapSubscriptionHandler) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

// CapUserPubSub_subEvent_Params_List is a list of CapUserPubSub_subEvent_Params.
type CapUserPubSub_subEvent_Params_List = capnp.StructList[CapUserPubSub_subEvent_Params]

// NewCapUserPubSub_subEvent_Params creates a new list of CapUserPubSub_subEvent_Params.
func NewCapUserPubSub_subEvent_Params_List(s *capnp.Segment, sz int32) (CapUserPubSub_subEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[CapUserPubSub_subEvent_Params](l), err
}

// CapUserPubSub_subEvent_Params_Future is a wrapper for a CapUserPubSub_subEvent_Params promised by a client call.
type CapUserPubSub_subEvent_Params_Future struct{ *capnp.Future }

func (f CapUserPubSub_subEvent_Params_Future) Struct() (CapUserPubSub_subEvent_Params, error) {
	p, err := f.Future.Ptr()
	return CapUserPubSub_subEvent_Params(p.Struct()), err
}
func (p CapUserPubSub_subEvent_Params_Future) Handler() CapSubscriptionHandler {
	return CapSubscriptionHandler(p.Future.Field(3, nil).Client())
}

type CapUserPubSub_subEvent_Results capnp.Struct

// CapUserPubSub_subEvent_Results_TypeID is the unique identifier for the type CapUserPubSub_subEvent_Results.
const CapUserPubSub_subEvent_Results_TypeID = 0x95c0951f289d3d1a

func NewCapUserPubSub_subEvent_Results(s *capnp.Segment) (CapUserPubSub_subEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUserPubSub_subEvent_Results(st), err
}

func NewRootCapUserPubSub_subEvent_Results(s *capnp.Segment) (CapUserPubSub_subEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUserPubSub_subEvent_Results(st), err
}

func ReadRootCapUserPubSub_subEvent_Results(msg *capnp.Message) (CapUserPubSub_subEvent_Results, error) {
	root, err := msg.Root()
	return CapUserPubSub_subEvent_Results(root.Struct()), err
}

func (s CapUserPubSub_subEvent_Results) String() string {
	str, _ := text.Marshal(0x95c0951f289d3d1a, capnp.Struct(s))
	return str
}

func (s CapUserPubSub_subEvent_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUserPubSub_subEvent_Results) DecodeFromPtr(p capnp.Ptr) CapUserPubSub_subEvent_Results {
	return CapUserPubSub_subEvent_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUserPubSub_subEvent_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUserPubSub_subEvent_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUserPubSub_subEvent_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUserPubSub_subEvent_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapUserPubSub_subEvent_Results_List is a list of CapUserPubSub_subEvent_Results.
type CapUserPubSub_subEvent_Results_List = capnp.StructList[CapUserPubSub_subEvent_Results]

// NewCapUserPubSub_subEvent_Results creates a new list of CapUserPubSub_subEvent_Results.
func NewCapUserPubSub_subEvent_Results_List(s *capnp.Segment, sz int32) (CapUserPubSub_subEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapUserPubSub_subEvent_Results](l), err
}

// CapUserPubSub_subEvent_Results_Future is a wrapper for a CapUserPubSub_subEvent_Results promised by a client call.
type CapUserPubSub_subEvent_Results_Future struct{ *capnp.Future }

func (f CapUserPubSub_subEvent_Results_Future) Struct() (CapUserPubSub_subEvent_Results, error) {
	p, err := f.Future.Ptr()
	return CapUserPubSub_subEvent_Results(p.Struct()), err
}

type CapUserPubSub_subTDs_Params capnp.Struct

// CapUserPubSub_subTDs_Params_TypeID is the unique identifier for the type CapUserPubSub_subTDs_Params.
const CapUserPubSub_subTDs_Params_TypeID = 0xa1fcad99b548f00c

func NewCapUserPubSub_subTDs_Params(s *capnp.Segment) (CapUserPubSub_subTDs_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapUserPubSub_subTDs_Params(st), err
}

func NewRootCapUserPubSub_subTDs_Params(s *capnp.Segment) (CapUserPubSub_subTDs_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapUserPubSub_subTDs_Params(st), err
}

func ReadRootCapUserPubSub_subTDs_Params(msg *capnp.Message) (CapUserPubSub_subTDs_Params, error) {
	root, err := msg.Root()
	return CapUserPubSub_subTDs_Params(root.Struct()), err
}

func (s CapUserPubSub_subTDs_Params) String() string {
	str, _ := text.Marshal(0xa1fcad99b548f00c, capnp.Struct(s))
	return str
}

func (s CapUserPubSub_subTDs_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUserPubSub_subTDs_Params) DecodeFromPtr(p capnp.Ptr) CapUserPubSub_subTDs_Params {
	return CapUserPubSub_subTDs_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUserPubSub_subTDs_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUserPubSub_subTDs_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUserPubSub_subTDs_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUserPubSub_subTDs_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapUserPubSub_subTDs_Params) Handler() CapSubscriptionHandler {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapSubscriptionHandler(p.Interface().Client())
}

func (s CapUserPubSub_subTDs_Params) HasHandler() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapUserPubSub_subTDs_Params) SetHandler(v CapSubscriptionHandler) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapUserPubSub_subTDs_Params_List is a list of CapUserPubSub_subTDs_Params.
type CapUserPubSub_subTDs_Params_List = capnp.StructList[CapUserPubSub_subTDs_Params]

// NewCapUserPubSub_subTDs_Params creates a new list of CapUserPubSub_subTDs_Params.
func NewCapUserPubSub_subTDs_Params_List(s *capnp.Segment, sz int32) (CapUserPubSub_subTDs_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapUserPubSub_subTDs_Params](l), err
}

// CapUserPubSub_subTDs_Params_Future is a wrapper for a CapUserPubSub_subTDs_Params promised by a client call.
type CapUserPubSub_subTDs_Params_Future struct{ *capnp.Future }

func (f CapUserPubSub_subTDs_Params_Future) Struct() (CapUserPubSub_subTDs_Params, error) {
	p, err := f.Future.Ptr()
	return CapUserPubSub_subTDs_Params(p.Struct()), err
}
func (p CapUserPubSub_subTDs_Params_Future) Handler() CapSubscriptionHandler {
	return CapSubscriptionHandler(p.Future.Field(0, nil).Client())
}

type CapUserPubSub_subTDs_Results capnp.Struct

// CapUserPubSub_subTDs_Results_TypeID is the unique identifier for the type CapUserPubSub_subTDs_Results.
const CapUserPubSub_subTDs_Results_TypeID = 0x8f93aea5ec1f82bf

func NewCapUserPubSub_subTDs_Results(s *capnp.Segment) (CapUserPubSub_subTDs_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUserPubSub_subTDs_Results(st), err
}

func NewRootCapUserPubSub_subTDs_Results(s *capnp.Segment) (CapUserPubSub_subTDs_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapUserPubSub_subTDs_Results(st), err
}

func ReadRootCapUserPubSub_subTDs_Results(msg *capnp.Message) (CapUserPubSub_subTDs_Results, error) {
	root, err := msg.Root()
	return CapUserPubSub_subTDs_Results(root.Struct()), err
}

func (s CapUserPubSub_subTDs_Results) String() string {
	str, _ := text.Marshal(0x8f93aea5ec1f82bf, capnp.Struct(s))
	return str
}

func (s CapUserPubSub_subTDs_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapUserPubSub_subTDs_Results) DecodeFromPtr(p capnp.Ptr) CapUserPubSub_subTDs_Results {
	return CapUserPubSub_subTDs_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapUserPubSub_subTDs_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapUserPubSub_subTDs_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapUserPubSub_subTDs_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapUserPubSub_subTDs_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapUserPubSub_subTDs_Results_List is a list of CapUserPubSub_subTDs_Results.
type CapUserPubSub_subTDs_Results_List = capnp.StructList[CapUserPubSub_subTDs_Results]

// NewCapUserPubSub_subTDs_Results creates a new list of CapUserPubSub_subTDs_Results.
func NewCapUserPubSub_subTDs_Results_List(s *capnp.Segment, sz int32) (CapUserPubSub_subTDs_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapUserPubSub_subTDs_Results](l), err
}

// CapUserPubSub_subTDs_Results_Future is a wrapper for a CapUserPubSub_subTDs_Results promised by a client call.
type CapUserPubSub_subTDs_Results_Future struct{ *capnp.Future }

func (f CapUserPubSub_subTDs_Results_Future) Struct() (CapUserPubSub_subTDs_Results, error) {
	p, err := f.Future.Ptr()
	return CapUserPubSub_subTDs_Results(p.Struct()), err
}

type CapSubscriptionHandler capnp.Client

// CapSubscriptionHandler_TypeID is the unique identifier for the type CapSubscriptionHandler.
const CapSubscriptionHandler_TypeID = 0x80433d2ee6f482f5

func (c CapSubscriptionHandler) HandleValue(ctx context.Context, params func(CapSubscriptionHandler_handleValue_Params) error) (CapSubscriptionHandler_handleValue_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x80433d2ee6f482f5,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapSubscriptionHandler",
			MethodName:    "handleValue",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapSubscriptionHandler_handleValue_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapSubscriptionHandler_handleValue_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapSubscriptionHandler) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapSubscriptionHandler) AddRef() CapSubscriptionHandler {
	return CapSubscriptionHandler(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapSubscriptionHandler) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapSubscriptionHandler) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapSubscriptionHandler) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapSubscriptionHandler) DecodeFromPtr(p capnp.Ptr) CapSubscriptionHandler {
	return CapSubscriptionHandler(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapSubscriptionHandler) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapSubscriptionHandler) IsSame(other CapSubscriptionHandler) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapSubscriptionHandler) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapSubscriptionHandler) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapSubscriptionHandler_Server is a CapSubscriptionHandler with a local implementation.
type CapSubscriptionHandler_Server interface {
	HandleValue(context.Context, CapSubscriptionHandler_handleValue) error
}

// CapSubscriptionHandler_NewServer creates a new Server from an implementation of CapSubscriptionHandler_Server.
func CapSubscriptionHandler_NewServer(s CapSubscriptionHandler_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapSubscriptionHandler_Methods(nil, s), s, c)
}

// CapSubscriptionHandler_ServerToClient creates a new Client from an implementation of CapSubscriptionHandler_Server.
// The caller is responsible for calling Release on the returned Client.
func CapSubscriptionHandler_ServerToClient(s CapSubscriptionHandler_Server) CapSubscriptionHandler {
	return CapSubscriptionHandler(capnp.NewClient(CapSubscriptionHandler_NewServer(s)))
}

// CapSubscriptionHandler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapSubscriptionHandler_Methods(methods []server.Method, s CapSubscriptionHandler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x80433d2ee6f482f5,
			MethodID:      0,
			InterfaceName: "hubapi/PubSub.capnp:CapSubscriptionHandler",
			MethodName:    "handleValue",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.HandleValue(ctx, CapSubscriptionHandler_handleValue{call})
		},
	})

	return methods
}

// CapSubscriptionHandler_handleValue holds the state for a server call to CapSubscriptionHandler.handleValue.
// See server.Call for documentation.
type CapSubscriptionHandler_handleValue struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapSubscriptionHandler_handleValue) Args() CapSubscriptionHandler_handleValue_Params {
	return CapSubscriptionHandler_handleValue_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapSubscriptionHandler_handleValue) AllocResults() (CapSubscriptionHandler_handleValue_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapSubscriptionHandler_handleValue_Results(r), err
}

// CapSubscriptionHandler_List is a list of CapSubscriptionHandler.
type CapSubscriptionHandler_List = capnp.CapList[CapSubscriptionHandler]

// NewCapSubscriptionHandler creates a new list of CapSubscriptionHandler.
func NewCapSubscriptionHandler_List(s *capnp.Segment, sz int32) (CapSubscriptionHandler_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapSubscriptionHandler](l), err
}

type CapSubscriptionHandler_handleValue_Params capnp.Struct

// CapSubscriptionHandler_handleValue_Params_TypeID is the unique identifier for the type CapSubscriptionHandler_handleValue_Params.
const CapSubscriptionHandler_handleValue_Params_TypeID = 0x9290df923ae70938

func NewCapSubscriptionHandler_handleValue_Params(s *capnp.Segment) (CapSubscriptionHandler_handleValue_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapSubscriptionHandler_handleValue_Params(st), err
}

func NewRootCapSubscriptionHandler_handleValue_Params(s *capnp.Segment) (CapSubscriptionHandler_handleValue_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapSubscriptionHandler_handleValue_Params(st), err
}

func ReadRootCapSubscriptionHandler_handleValue_Params(msg *capnp.Message) (CapSubscriptionHandler_handleValue_Params, error) {
	root, err := msg.Root()
	return CapSubscriptionHandler_handleValue_Params(root.Struct()), err
}

func (s CapSubscriptionHandler_handleValue_Params) String() string {
	str, _ := text.Marshal(0x9290df923ae70938, capnp.Struct(s))
	return str
}

func (s CapSubscriptionHandler_handleValue_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapSubscriptionHandler_handleValue_Params) DecodeFromPtr(p capnp.Ptr) CapSubscriptionHandler_handleValue_Params {
	return CapSubscriptionHandler_handleValue_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapSubscriptionHandler_handleValue_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapSubscriptionHandler_handleValue_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapSubscriptionHandler_handleValue_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapSubscriptionHandler_handleValue_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapSubscriptionHandler_handleValue_Params) Value() (ThingValue, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ThingValue(p.Struct()), err
}

func (s CapSubscriptionHandler_handleValue_Params) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapSubscriptionHandler_handleValue_Params) SetValue(v ThingValue) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated ThingValue struct, preferring placement in s's segment.
func (s CapSubscriptionHandler_handleValue_Params) NewValue() (ThingValue, error) {
	ss, err := NewThingValue(capnp.Struct(s).Segment())
	if err != nil {
		return ThingValue{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapSubscriptionHandler_handleValue_Params_List is a list of CapSubscriptionHandler_handleValue_Params.
type CapSubscriptionHandler_handleValue_Params_List = capnp.StructList[CapSubscriptionHandler_handleValue_Params]

// NewCapSubscriptionHandler_handleValue_Params creates a new list of CapSubscriptionHandler_handleValue_Params.
func NewCapSubscriptionHandler_handleValue_Params_List(s *capnp.Segment, sz int32) (CapSubscriptionHandler_handleValue_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapSubscriptionHandler_handleValue_Params](l), err
}

// CapSubscriptionHandler_handleValue_Params_Future is a wrapper for a CapSubscriptionHandler_handleValue_Params promised by a client call.
type CapSubscriptionHandler_handleValue_Params_Future struct{ *capnp.Future }

func (f CapSubscriptionHandler_handleValue_Params_Future) Struct() (CapSubscriptionHandler_handleValue_Params, error) {
	p, err := f.Future.Ptr()
	return CapSubscriptionHandler_handleValue_Params(p.Struct()), err
}
func (p CapSubscriptionHandler_handleValue_Params_Future) Value() ThingValue_Future {
	return ThingValue_Future{Future: p.Future.Field(0, nil)}
}

type CapSubscriptionHandler_handleValue_Results capnp.Struct

// CapSubscriptionHandler_handleValue_Results_TypeID is the unique identifier for the type CapSubscriptionHandler_handleValue_Results.
const CapSubscriptionHandler_handleValue_Results_TypeID = 0xc6a7b2614c3fad2c

func NewCapSubscriptionHandler_handleValue_Results(s *capnp.Segment) (CapSubscriptionHandler_handleValue_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapSubscriptionHandler_handleValue_Results(st), err
}

func NewRootCapSubscriptionHandler_handleValue_Results(s *capnp.Segment) (CapSubscriptionHandler_handleValue_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapSubscriptionHandler_handleValue_Results(st), err
}

func ReadRootCapSubscriptionHandler_handleValue_Results(msg *capnp.Message) (CapSubscriptionHandler_handleValue_Results, error) {
	root, err := msg.Root()
	return CapSubscriptionHandler_handleValue_Results(root.Struct()), err
}

func (s CapSubscriptionHandler_handleValue_Results) String() string {
	str, _ := text.Marshal(0xc6a7b2614c3fad2c, capnp.Struct(s))
	return str
}

func (s CapSubscriptionHandler_handleValue_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapSubscriptionHandler_handleValue_Results) DecodeFromPtr(p capnp.Ptr) CapSubscriptionHandler_handleValue_Results {
	return CapSubscriptionHandler_handleValue_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapSubscriptionHandler_handleValue_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapSubscriptionHandler_handleValue_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapSubscriptionHandler_handleValue_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapSubscriptionHandler_handleValue_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapSubscriptionHandler_handleValue_Results_List is a list of CapSubscriptionHandler_handleValue_Results.
type CapSubscriptionHandler_handleValue_Results_List = capnp.StructList[CapSubscriptionHandler_handleValue_Results]

// NewCapSubscriptionHandler_handleValue_Results creates a new list of CapSubscriptionHandler_handleValue_Results.
func NewCapSubscriptionHandler_handleValue_Results_List(s *capnp.Segment, sz int32) (CapSubscriptionHandler_handleValue_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapSubscriptionHandler_handleValue_Results](l), err
}

// CapSubscriptionHandler_handleValue_Results_Future is a wrapper for a CapSubscriptionHandler_handleValue_Results promised by a client call.
type CapSubscriptionHandler_handleValue_Results_Future struct{ *capnp.Future }

func (f CapSubscriptionHandler_handleValue_Results_Future) Struct() (CapSubscriptionHandler_handleValue_Results, error) {
	p, err := f.Future.Ptr()
	return CapSubscriptionHandler_handleValue_Results(p.Struct()), err
}

const schema_f33c8b5943a21269 = "x\xda\xacX}l\x1cW\x11\x9f\xd9=g\xcf\xe7\xfb" +
	"\xf0\xeb\xba\xea\x07\x8a\xae\x89\xec\xd6)4\x89\x1dR\x82" +
	"\x8b9\xe38j\x9c\xa6\xd5\xad/\xa9H\xc0\x12{\xe7" +
	"\x05\x9ftv6\xbb\xb7N\xab~[J[\x99\x02\x89" +
	"[G\xe4\xab\xd0\xa0\x92\xaaiLU\x12\xe1\xa6@\xa0" +
	"UI\x05\x15*A\x89*$HE\xa1!\x08Z\xd4" +
	"4\x047\x0d[\xbd\xb7\xf7v\xdf\xf9b\xe7l\xe5\xbf" +
	"\xd3\xee\xcc{\xbf\x99\xdf\xccogn\xe9\x1d5\x1d\xa1" +
	"\x96\xd8\x968H\xdas5\xf3\xdcs\xc3\x1f\xbd\xb7\xb8" +
	"}\xe5\xc3@\x1ad7\x7f\xd5\xbe\x95\x1b\xbe\xfd\xa5\xb3" +
	"\x00\xb8l\x81\xb2\x11\xd5\xe5\x8a\x02\xa0\xb6(\xb7\xab\xbd" +
	"\xf4\x97{M\xe3\x85\xad\xd2\x9f\xd7=\x0a\xa4\x11\x01j" +
	"$\x05`\xd9*\xe5\xb7\x08\xa8nP\xb6\x00\xbaOl" +
	"y\xeb\xff\xdfL\xbf\xf9X\xc9@\xa6\x06\x87\x95}\xd4" +
	"\xe0u\xe5'\x80\xee\x0f\xde\xde\xa8\xef;\xf4\xb5\x11\xcf" +
	" D\xdf\xf7\x86G\x11B\xee\xf8\xd9h\xdb\x0b\x13\x1f" +
	"\x7fWt\xbd3\xfc<u\xed\x0dS\xd7\xa3\xc3\xc9\x7f" +
	"=;\xfe\xe4\xf7\x80,\xe4\xae\x93\xe1\x11\xeaj\xf7\xb9" +
	"\xcd\xe3\xe1\x15\xdb\xbd75\xec\xd5\x99\xf0.\xea:\x19" +
	">\x0d\xe8\xae\xa8=\xdd6zj\xdb(\x90\xcfR\x03" +
	"\xa4\x06'j?\xa4\x06gjS\x80\xee\x81fw\xf4" +
	"\x83W^y\x0aHC\xa8,\x0d\xb5\x91VT\xaf\x8b" +
	"(\x00\x99\x86\x88\x8c\x99\x1b\"\x12\x02\xb8\xd7\xb7\xefm" +
	"N\x8e\xfdjL\xc0rud\x17\xc5\xf2\xd6\x8bK\x86" +
	"^X\xbdb\x87\x10`M\xe48}\xd3=\xfe\xe2/" +
	"nz\xf5\xbe\x9d@\x9a|\x10\x93\xb5\x7f\xa5 b\x11" +
	"\x0a\"\xfa\x9f\xd5\x87w\x1e\xfc\xe4\x99R\x18\xcc\xa0%" +
	"2L\x0d\xda\x99\xc1\x9e\xa7\xce\x1f~\xe7@\xcb\x81\x0a" +
	"\x94\xbd\x915\xa8nf(\x0b\x14\xe5=\x1e\xca\xfb6" +
	"n{\xe3\xe5\xc2\xfa\x83\x15\xe4:\x91\xabP\xddJ\xed" +
	"\xd5G\"\xc7T\xac\xa3\xe4\xee\xfa\xdd\xf8\xde\x1b\xde\xbd" +
	"\x7f\xbc,\x8b\x91Q\x96\xc5\x08\xcd\xe2\xcf\x8e\xdf\x95\xd8" +
	"}\xe3\xd8!/\x00\xf6\xfe\x0fu\xaf\xd2\xd0\xae\xff\xe1" +
	"c\xf2\xfeH\xec\xe7bh\xbf\xae\xfb'u=QG" +
	"\x91?~\xf4\xd1\x1dz\xf3\x91\xd7D\xee\xea\xf6Q\xd7" +
	"\x0b\x87\xcf/X\x91\xdb\xff\xba\xe8z\xa6\xee8u\xbd" +
	"\xc8\\?w0\xb5V\x7fi\xffo<\xee\x98\xeb\xfc" +
	"\xe8\xc7\xd4\xf5\xb6\xa5o/O|r\xe3\x1fEW\x12" +
	"e\xac6E\xa9\xebmo\xac}\xf9\xc9\xa7_;!" +
	"\x1a\xac\x8a\xfe\x89\x95+3\xc8\xed\xfe\xe5O\x9b\xdd3" +
	"'\x05\xb2\xee\x8d>O\xcf^\xf3`\xfe\x1f\xdb~<" +
	"q\xaa\"u\xf9\xe8BT\xef\x8dRS'\xaa\xa0\xba" +
	" Fswj\xc9\xb1\xd3G\xdf}\xeeo\x15\xe6\xb5" +
	"\xb1\x9bQ\xbd\x8e\xda\xa8W\xc7\x8e\xa9{\x99u\xd3\xe3" +
	"\xb7\xfe\xc8>4\xfa\xf7\x0a\x1e\xb7\xc6ZQ\x1d\xa36" +
	"\x99m1\x193{b\x8c\xc7\xf7\x1f\xfc\xcc\xef\x1f\xa8" +
	"\xff\xf2\xfb\xa58\x18\xce\xb1\xd8\x11\x1a\xc7\xb31\xcaL" +
	"\xf1\xf4\x1dO\xbfs\xfe\xc3\x0f*\x0e|$\xde\x89\xea" +
	"\xf68=\xf0\x89\xb8\x8c\x99\xef\xc7\xd9\x81\xd7.\x9b\xf8" +
	"\x9fr\xf7\x92\x8f\xc4>\xde\x1e\x1f\xa1\x07>\x13\xa7}" +
	"\xbc\xfe\xe4\xd6\xb6\xaf\x7fa\xcf\x7f\x85\xc4\\\x8c\xbfD" +
	"\x13s\xe4\xcd\x98u\x8d{t\xb2\"\xd2\x7f\xc7oF" +
	"\xf5\"\xbdJ\x9d\x8c\xdf\xae6%n\x02p\xffr\xf6" +
	"\xc4\xceTT\xbe 20?\xc1\x0a\xa3%\x91\x82>" +
	"\xb7\xdf\xc9\xeaf~I:\xe4d3NvqN7" +
	"\x07\xcd\xb6\x95\xba\x99q\xb2v\xce\xca\x9b\xc5\xfc\xa6\xc1" +
	"\xd5\xfa`_A6\xac4\xa2\x16\x92k\x00\xfc~F" +
	"^\x1c\x84dA\"\xb5\x8a\xdbOm\x8d\xbbuP\x0a" +
	"\x8e\xd1\x81iD\xff\x8ayS\xae\xe82\x86\xf29#" +
	"\xed=5\x9dl\xda\xdad\x1aV1o\xd8\x8di\xdd" +
	"\xd2\x07l\x00-,\x87\x00B\x08@\x16u\x02h\x8d" +
	"2jK%$\x88\x0dH\x1f\xde\xd2\x0a\xa05\xcb\xa8" +
	"}^\xc2\x87\x8a\xfd\xf9\xc1ouwa\x14$\x8c\x02" +
	"&Mk\x93ic\xbd\xfb\xc0w\x06o\xddpn\xe2" +
	"\x1c\x00b=\x04xj.\x83g\xd5\x901X\xa4P" +
	"\x14}\xc0\xd6\xa2>\x92U\x14I\x87\x8c\xdaZ\x01I" +
	"7}\xd8%\xa3\x96\x96\x90HR\x03J\x00\xe4N\x0a" +
	"o\xb5\x8c\xda\xbaJx\x0f\x19\xf4x\x01\xee\x90^p" +
	"\x0c\x8c\x81\x84\xb1Y\x80\\\xd7\xd5\xd8c\xd8N\xa1\x88" +
	"vu>\xb6\x93\xfdJ\x8e\xb2\xda\x98\xd6\x13V5\x91" +
	"\xad\x09\x82\xf0#\xd3\xa8\xe5Z\x19\xb5\xafVF\xe6\xea" +
	"\xec\xfc\xee.\x00\xf0\xa3\xf5\xea\xc2B\x12|\xf1\x00\x91" +
	"\xcc\x10\xe9z\xdb\xb0\x02\xcc\xeb\xba\xecR\xa06@5" +
	">\xa6\x10\xa7\xa5\xcb\x03\xb6V\xef\xc7\xa9g\x01\xb4o" +
	"\xc8\xa8\x15\x848\xf34\xa4>\x195S\x88s\x80\x06" +
	"_\x90Q\xbbGB\"\xcb\x0d(\x03\x10\x87\xd2j\xca" +
	"\xa8\xdd/\xa1k:\xd9B\xde\xee7@\xb1\x04r\xab" +
	"H\xc94\x84\xcf\xbb\\#\x1a\xd6b\xded\x05\xc7h" +
	"L'Y\xafh!?\xbaX+k\x1c\xd4\x1a$~" +
	"I\xbd;\xfa\xf0\x8e\x89\xbd\xef\x9d\xdc=\xb5\x09d\xf1" +
	":\xd3\xc9\xdaN6cXC\xf9\\\xd2\xb8K\x1f0" +
	"\xd2\x88%\xbc@\xb0-\xe5\x19TI\x99\xd7?\x8c4" +
	"\xb9h\xcfE\x06**{\xaa\xaf\xe7\xe5\x016\xe8c" +
	"\xf10\xbfu\x85\xd4P:\xa32j\xd7J\xe8\xf61" +
	"\xdb2NfQ\x8c%\x89\x12\x0f\xef\x0c\xf2^E\xbd" +
	"\x97)nN7i\xbaK\x91x7\x01\x94e\x7f\xc4" +
	"\xcd\xe9&3\xc0\xc0\xe2\xd2<\x8a\x801Ke;\xca" +
	"d\x9b\xcfi\xc8\xc7\x01\xa2\xf5\x80D\xba\x15D\x7f\xfa" +
	"@>Z\x91\xf65 \x91\xe5\x0aJ\xfe`\x84|\x04" +
	"$\x8b\xda@\"\xf3\x15\x97w\x19\xe0`\x07\xba\x9ct" +
	"\x00\xe8\xc0\x94\x97\xa8\xf2o@5\x15\xc32\x8bs\xec" +
	"W\xfa\xb0_F\xad(\xf4\xeb\xe6\xce\xa0\x89\xab\xeb\xd7" +
	"\xa9\xe2\\\x05\x9d\xb1\xa9}+R\x19\xa8n\xa0b\xdc" +
	"\xf1r%]v\x90/\xdaB\xd9\xf5\x085m{\xc6" +
	"\xdd\x80]\xb3\xa9\xe9@,):\xa5P\x9cE\xcb\x05" +
	"\xc7\xf8\xcc\x09\xe0\xda\x82\x9eH9\xb6!\xe4|\xce\x8a" +
	"\xd7\x93\xf22X=\xc4\xf2\x14\xf6\x18I\xe6/\xc2\\" +
	"\x18\xc0Tr\xba\x89$\x98\xb3\xa6\xf0<\x9b|p\xed" +
	"\x9b\xf9&\x7fK\xb8\xcc\x07\xf1\xd2\xf3I\x8fa'\xca" +
	"\xb2!O\xe7\xa6d\x1c\xa6\x05\xf5L\x0b\xf8\xa6\x88|" +
	"\x06'\x9bi\xbf\xe7\xa9\x16\xf05\x13\xf92Ez-" +
	"\x90\xc8z\xaa\x05|tE\xbeI\x92\xeeV\x90H\xbb" +
	"\x82\xb2\xbfB\"\x1f_I\x0b\xd5\x97EL'\x02e" +
	"p\xb9\xcaC\x92\xe9|\x07&\xd9$\xe3)H\xa0'" +
	"\xa2p\xc8\xd3\xa5=\xc1\xa2\xf3%\x8e/y\xc8'_" +
	"\xa2\x0ds\x89\xe3[\x12\xf2\xc5\x85\xb4\x8f\x80D\xbeH" +
	"\xc3\xe2k\x10\xf2\x9d\x85\xdcBCnR\\\xfeUA" +
	".\xba\x1dx)%\xf6\x9e2\xf2!\xc9\x9e\xcd\x10@" +
	"I\xee\x99\xb5g\\&\xf5\xd6\xd4\xa3\xa6\xad\x89iU" +
	"&\xe5}\x9f\xae\xe0\xd0\xd3y%\x86\x9e9~\x17\xc5" +
	"\xd2/\xff*\x0e\xfb\xfc(\xfc\xfd4\xc2z\x89\xc9\xf9" +
	"\x8a\xac\x19\xc5\xbe\xaeM\xb9\xd9\xcd\xed\xb6 \xb7I{" +
	"\xc6\xee\xf5\x09N\x94\xaa\xa4\xb4\x81\xf1\x95\x14\xf9\x9f\x02" +
	"\x84l\xf460\xbf\x85\xe4A\xbb\x03\xb50b\xb0L" +
	"\x8b\xffI\x08\xc3\xc3\xec\xc6*\xae83\xabZp'" +
	"\xa3\xf7\xd3\x00\x00\x00\xff\xff\x8a\x12}\xf4"

func init() {
	schemas.Register(schema_f33c8b5943a21269,
		0x80433d2ee6f482f5,
		0x8654dd0285fb2417,
		0x87cc5066fed0778c,
		0x8a5bb4a2615ad89f,
		0x8efab8ac3a0cf3ae,
		0x8f93aea5ec1f82bf,
		0x913808ae28ff6473,
		0x9290df923ae70938,
		0x94bbbbef92ff28ab,
		0x95c0951f289d3d1a,
		0x963848ac762fb0d0,
		0x997bc227bdb0ae49,
		0xa1fcad99b548f00c,
		0xab31abe0b5f7949c,
		0xad556cb9c8905a7b,
		0xae7ce3209daecb9a,
		0xb495269b0f4ed2b7,
		0xbc0d0aa70387a01a,
		0xc3ba28619686bf88,
		0xc5a7633821f7b5fb,
		0xc6a7b2614c3fad2c,
		0xd326fc0f35d8303b,
		0xd5c39e93b94cc83b,
		0xd6e9ff28b3be9b63,
		0xdfb8a690e8697e4a,
		0xe4a8e3bfe7c72fdf,
		0xe592b473a3368825,
		0xee3e107dce1b7eee,
		0xeff2f7e09e4be774,
		0xf42f5607f8b83318,
		0xf69c375c3a85d655,
		0xf9bfff17720dccba,
		0xfb030c3f99d5f3de)
}

// Code generated by capnpc-go. DO NOT EDIT.

package hubapi

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

// Constants defined in Provisioning.capnp.
const (
	ProvisioningServiceName    = "provisioning"
	CapNameManageProvisioning  = "capManageProvisioning"
	CapNameRequestProvisioning = "capRequestProvisioning"
	CapNameRefreshProvisioning = "capRefreshProvisioning"
)

type OOBSecret capnp.Struct

// OOBSecret_TypeID is the unique identifier for the type OOBSecret.
const OOBSecret_TypeID = 0xf57827bb15119eee

func NewOOBSecret(s *capnp.Segment) (OOBSecret, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return OOBSecret(st), err
}

func NewRootOOBSecret(s *capnp.Segment) (OOBSecret, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return OOBSecret(st), err
}

func ReadRootOOBSecret(msg *capnp.Message) (OOBSecret, error) {
	root, err := msg.Root()
	return OOBSecret(root.Struct()), err
}

func (s OOBSecret) String() string {
	str, _ := text.Marshal(0xf57827bb15119eee, capnp.Struct(s))
	return str
}

func (s OOBSecret) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (OOBSecret) DecodeFromPtr(p capnp.Ptr) OOBSecret {
	return OOBSecret(capnp.Struct{}.DecodeFromPtr(p))
}

func (s OOBSecret) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s OOBSecret) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OOBSecret) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OOBSecret) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s OOBSecret) DeviceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s OOBSecret) HasDeviceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s OOBSecret) DeviceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s OOBSecret) SetDeviceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s OOBSecret) OobSecret() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s OOBSecret) HasOobSecret() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s OOBSecret) OobSecretBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s OOBSecret) SetOobSecret(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// OOBSecret_List is a list of OOBSecret.
type OOBSecret_List = capnp.StructList[OOBSecret]

// NewOOBSecret creates a new list of OOBSecret.
func NewOOBSecret_List(s *capnp.Segment, sz int32) (OOBSecret_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[OOBSecret](l), err
}

// OOBSecret_Future is a wrapper for a OOBSecret promised by a client call.
type OOBSecret_Future struct{ *capnp.Future }

func (f OOBSecret_Future) Struct() (OOBSecret, error) {
	p, err := f.Future.Ptr()
	return OOBSecret(p.Struct()), err
}

type ProvisionStatus capnp.Struct

// ProvisionStatus_TypeID is the unique identifier for the type ProvisionStatus.
const ProvisionStatus_TypeID = 0xfc89b3e24fe8aa64

func NewProvisionStatus(s *capnp.Segment) (ProvisionStatus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return ProvisionStatus(st), err
}

func NewRootProvisionStatus(s *capnp.Segment) (ProvisionStatus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return ProvisionStatus(st), err
}

func ReadRootProvisionStatus(msg *capnp.Message) (ProvisionStatus, error) {
	root, err := msg.Root()
	return ProvisionStatus(root.Struct()), err
}

func (s ProvisionStatus) String() string {
	str, _ := text.Marshal(0xfc89b3e24fe8aa64, capnp.Struct(s))
	return str
}

func (s ProvisionStatus) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProvisionStatus) DecodeFromPtr(p capnp.Ptr) ProvisionStatus {
	return ProvisionStatus(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProvisionStatus) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProvisionStatus) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProvisionStatus) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProvisionStatus) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProvisionStatus) DeviceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ProvisionStatus) HasDeviceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProvisionStatus) DeviceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ProvisionStatus) SetDeviceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ProvisionStatus) CaCertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ProvisionStatus) HasCaCertPEM() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ProvisionStatus) CaCertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ProvisionStatus) SetCaCertPEM(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ProvisionStatus) ClientCertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ProvisionStatus) HasClientCertPEM() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ProvisionStatus) ClientCertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ProvisionStatus) SetClientCertPEM(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s ProvisionStatus) Pending() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ProvisionStatus) SetPending(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s ProvisionStatus) PubKeyPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s ProvisionStatus) HasPubKeyPEM() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ProvisionStatus) PubKeyPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s ProvisionStatus) SetPubKeyPEM(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s ProvisionStatus) RequestTime() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s ProvisionStatus) HasRequestTime() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s ProvisionStatus) RequestTimeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s ProvisionStatus) SetRequestTime(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s ProvisionStatus) RetrySec() int32 {
	return int32(capnp.Struct(s).Uint32(4) ^ 3600)
}

func (s ProvisionStatus) SetRetrySec(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v)^3600)
}

// ProvisionStatus_List is a list of ProvisionStatus.
type ProvisionStatus_List = capnp.StructList[ProvisionStatus]

// NewProvisionStatus creates a new list of ProvisionStatus.
func NewProvisionStatus_List(s *capnp.Segment, sz int32) (ProvisionStatus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return capnp.StructList[ProvisionStatus](l), err
}

// ProvisionStatus_Future is a wrapper for a ProvisionStatus promised by a client call.
type ProvisionStatus_Future struct{ *capnp.Future }

func (f ProvisionStatus_Future) Struct() (ProvisionStatus, error) {
	p, err := f.Future.Ptr()
	return ProvisionStatus(p.Struct()), err
}

type CapProvisioning capnp.Client

// CapProvisioning_TypeID is the unique identifier for the type CapProvisioning.
const CapProvisioning_TypeID = 0xb27307efca3363be

func (c CapProvisioning) CapManageProvisioning(ctx context.Context, params func(CapProvisioning_capManageProvisioning_Params) error) (CapProvisioning_capManageProvisioning_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb27307efca3363be,
			MethodID:      0,
			InterfaceName: "hubapi/Provisioning.capnp:CapProvisioning",
			MethodName:    "capManageProvisioning",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapProvisioning_capManageProvisioning_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapProvisioning_capManageProvisioning_Results_Future{Future: ans.Future()}, release
}
func (c CapProvisioning) CapRequestProvisioning(ctx context.Context, params func(CapProvisioning_capRequestProvisioning_Params) error) (CapProvisioning_capRequestProvisioning_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb27307efca3363be,
			MethodID:      1,
			InterfaceName: "hubapi/Provisioning.capnp:CapProvisioning",
			MethodName:    "capRequestProvisioning",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapProvisioning_capRequestProvisioning_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapProvisioning_capRequestProvisioning_Results_Future{Future: ans.Future()}, release
}
func (c CapProvisioning) CapRefreshProvisioning(ctx context.Context, params func(CapProvisioning_capRefreshProvisioning_Params) error) (CapProvisioning_capRefreshProvisioning_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb27307efca3363be,
			MethodID:      2,
			InterfaceName: "hubapi/Provisioning.capnp:CapProvisioning",
			MethodName:    "capRefreshProvisioning",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapProvisioning_capRefreshProvisioning_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapProvisioning_capRefreshProvisioning_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapProvisioning) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapProvisioning) AddRef() CapProvisioning {
	return CapProvisioning(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapProvisioning) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapProvisioning) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapProvisioning) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapProvisioning) DecodeFromPtr(p capnp.Ptr) CapProvisioning {
	return CapProvisioning(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapProvisioning) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapProvisioning) IsSame(other CapProvisioning) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapProvisioning) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapProvisioning) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapProvisioning_Server is a CapProvisioning with a local implementation.
type CapProvisioning_Server interface {
	CapManageProvisioning(context.Context, CapProvisioning_capManageProvisioning) error

	CapRequestProvisioning(context.Context, CapProvisioning_capRequestProvisioning) error

	CapRefreshProvisioning(context.Context, CapProvisioning_capRefreshProvisioning) error
}

// CapProvisioning_NewServer creates a new Server from an implementation of CapProvisioning_Server.
func CapProvisioning_NewServer(s CapProvisioning_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapProvisioning_Methods(nil, s), s, c)
}

// CapProvisioning_ServerToClient creates a new Client from an implementation of CapProvisioning_Server.
// The caller is responsible for calling Release on the returned Client.
func CapProvisioning_ServerToClient(s CapProvisioning_Server) CapProvisioning {
	return CapProvisioning(capnp.NewClient(CapProvisioning_NewServer(s)))
}

// CapProvisioning_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapProvisioning_Methods(methods []server.Method, s CapProvisioning_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb27307efca3363be,
			MethodID:      0,
			InterfaceName: "hubapi/Provisioning.capnp:CapProvisioning",
			MethodName:    "capManageProvisioning",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapManageProvisioning(ctx, CapProvisioning_capManageProvisioning{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb27307efca3363be,
			MethodID:      1,
			InterfaceName: "hubapi/Provisioning.capnp:CapProvisioning",
			MethodName:    "capRequestProvisioning",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapRequestProvisioning(ctx, CapProvisioning_capRequestProvisioning{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb27307efca3363be,
			MethodID:      2,
			InterfaceName: "hubapi/Provisioning.capnp:CapProvisioning",
			MethodName:    "capRefreshProvisioning",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapRefreshProvisioning(ctx, CapProvisioning_capRefreshProvisioning{call})
		},
	})

	return methods
}

// CapProvisioning_capManageProvisioning holds the state for a server call to CapProvisioning.capManageProvisioning.
// See server.Call for documentation.
type CapProvisioning_capManageProvisioning struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapProvisioning_capManageProvisioning) Args() CapProvisioning_capManageProvisioning_Params {
	return CapProvisioning_capManageProvisioning_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapProvisioning_capManageProvisioning) AllocResults() (CapProvisioning_capManageProvisioning_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapProvisioning_capManageProvisioning_Results(r), err
}

// CapProvisioning_capRequestProvisioning holds the state for a server call to CapProvisioning.capRequestProvisioning.
// See server.Call for documentation.
type CapProvisioning_capRequestProvisioning struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapProvisioning_capRequestProvisioning) Args() CapProvisioning_capRequestProvisioning_Params {
	return CapProvisioning_capRequestProvisioning_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapProvisioning_capRequestProvisioning) AllocResults() (CapProvisioning_capRequestProvisioning_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapProvisioning_capRequestProvisioning_Results(r), err
}

// CapProvisioning_capRefreshProvisioning holds the state for a server call to CapProvisioning.capRefreshProvisioning.
// See server.Call for documentation.
type CapProvisioning_capRefreshProvisioning struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapProvisioning_capRefreshProvisioning) Args() CapProvisioning_capRefreshProvisioning_Params {
	return CapProvisioning_capRefreshProvisioning_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapProvisioning_capRefreshProvisioning) AllocResults() (CapProvisioning_capRefreshProvisioning_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapProvisioning_capRefreshProvisioning_Results(r), err
}

// CapProvisioning_List is a list of CapProvisioning.
type CapProvisioning_List = capnp.CapList[CapProvisioning]

// NewCapProvisioning creates a new list of CapProvisioning.
func NewCapProvisioning_List(s *capnp.Segment, sz int32) (CapProvisioning_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapProvisioning](l), err
}

type CapProvisioning_capManageProvisioning_Params capnp.Struct

// CapProvisioning_capManageProvisioning_Params_TypeID is the unique identifier for the type CapProvisioning_capManageProvisioning_Params.
const CapProvisioning_capManageProvisioning_Params_TypeID = 0xfc3703eae91b8639

func NewCapProvisioning_capManageProvisioning_Params(s *capnp.Segment) (CapProvisioning_capManageProvisioning_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapProvisioning_capManageProvisioning_Params(st), err
}

func NewRootCapProvisioning_capManageProvisioning_Params(s *capnp.Segment) (CapProvisioning_capManageProvisioning_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapProvisioning_capManageProvisioning_Params(st), err
}

func ReadRootCapProvisioning_capManageProvisioning_Params(msg *capnp.Message) (CapProvisioning_capManageProvisioning_Params, error) {
	root, err := msg.Root()
	return CapProvisioning_capManageProvisioning_Params(root.Struct()), err
}

func (s CapProvisioning_capManageProvisioning_Params) String() string {
	str, _ := text.Marshal(0xfc3703eae91b8639, capnp.Struct(s))
	return str
}

func (s CapProvisioning_capManageProvisioning_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapProvisioning_capManageProvisioning_Params) DecodeFromPtr(p capnp.Ptr) CapProvisioning_capManageProvisioning_Params {
	return CapProvisioning_capManageProvisioning_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapProvisioning_capManageProvisioning_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapProvisioning_capManageProvisioning_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapProvisioning_capManageProvisioning_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapProvisioning_capManageProvisioning_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapProvisioning_capManageProvisioning_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapProvisioning_capManageProvisioning_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapProvisioning_capManageProvisioning_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapProvisioning_capManageProvisioning_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapProvisioning_capManageProvisioning_Params_List is a list of CapProvisioning_capManageProvisioning_Params.
type CapProvisioning_capManageProvisioning_Params_List = capnp.StructList[CapProvisioning_capManageProvisioning_Params]

// NewCapProvisioning_capManageProvisioning_Params creates a new list of CapProvisioning_capManageProvisioning_Params.
func NewCapProvisioning_capManageProvisioning_Params_List(s *capnp.Segment, sz int32) (CapProvisioning_capManageProvisioning_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapProvisioning_capManageProvisioning_Params](l), err
}

// CapProvisioning_capManageProvisioning_Params_Future is a wrapper for a CapProvisioning_capManageProvisioning_Params promised by a client call.
type CapProvisioning_capManageProvisioning_Params_Future struct{ *capnp.Future }

func (f CapProvisioning_capManageProvisioning_Params_Future) Struct() (CapProvisioning_capManageProvisioning_Params, error) {
	p, err := f.Future.Ptr()
	return CapProvisioning_capManageProvisioning_Params(p.Struct()), err
}

type CapProvisioning_capManageProvisioning_Results capnp.Struct

// CapProvisioning_capManageProvisioning_Results_TypeID is the unique identifier for the type CapProvisioning_capManageProvisioning_Results.
const CapProvisioning_capManageProvisioning_Results_TypeID = 0xf402ccb00738f2d2

func NewCapProvisioning_capManageProvisioning_Results(s *capnp.Segment) (CapProvisioning_capManageProvisioning_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapProvisioning_capManageProvisioning_Results(st), err
}

func NewRootCapProvisioning_capManageProvisioning_Results(s *capnp.Segment) (CapProvisioning_capManageProvisioning_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapProvisioning_capManageProvisioning_Results(st), err
}

func ReadRootCapProvisioning_capManageProvisioning_Results(msg *capnp.Message) (CapProvisioning_capManageProvisioning_Results, error) {
	root, err := msg.Root()
	return CapProvisioning_capManageProvisioning_Results(root.Struct()), err
}

func (s CapProvisioning_capManageProvisioning_Results) String() string {
	str, _ := text.Marshal(0xf402ccb00738f2d2, capnp.Struct(s))
	return str
}

func (s CapProvisioning_capManageProvisioning_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapProvisioning_capManageProvisioning_Results) DecodeFromPtr(p capnp.Ptr) CapProvisioning_capManageProvisioning_Results {
	return CapProvisioning_capManageProvisioning_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapProvisioning_capManageProvisioning_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapProvisioning_capManageProvisioning_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapProvisioning_capManageProvisioning_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapProvisioning_capManageProvisioning_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapProvisioning_capManageProvisioning_Results) Cap() CapManageProvisioning {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapManageProvisioning(p.Interface().Client())
}

func (s CapProvisioning_capManageProvisioning_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapProvisioning_capManageProvisioning_Results) SetCap(v CapManageProvisioning) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapProvisioning_capManageProvisioning_Results_List is a list of CapProvisioning_capManageProvisioning_Results.
type CapProvisioning_capManageProvisioning_Results_List = capnp.StructList[CapProvisioning_capManageProvisioning_Results]

// NewCapProvisioning_capManageProvisioning_Results creates a new list of CapProvisioning_capManageProvisioning_Results.
func NewCapProvisioning_capManageProvisioning_Results_List(s *capnp.Segment, sz int32) (CapProvisioning_capManageProvisioning_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapProvisioning_capManageProvisioning_Results](l), err
}

// CapProvisioning_capManageProvisioning_Results_Future is a wrapper for a CapProvisioning_capManageProvisioning_Results promised by a client call.
type CapProvisioning_capManageProvisioning_Results_Future struct{ *capnp.Future }

func (f CapProvisioning_capManageProvisioning_Results_Future) Struct() (CapProvisioning_capManageProvisioning_Results, error) {
	p, err := f.Future.Ptr()
	return CapProvisioning_capManageProvisioning_Results(p.Struct()), err
}
func (p CapProvisioning_capManageProvisioning_Results_Future) Cap() CapManageProvisioning {
	return CapManageProvisioning(p.Future.Field(0, nil).Client())
}

type CapProvisioning_capRequestProvisioning_Params capnp.Struct

// CapProvisioning_capRequestProvisioning_Params_TypeID is the unique identifier for the type CapProvisioning_capRequestProvisioning_Params.
const CapProvisioning_capRequestProvisioning_Params_TypeID = 0xd639555807730795

func NewCapProvisioning_capRequestProvisioning_Params(s *capnp.Segment) (CapProvisioning_capRequestProvisioning_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapProvisioning_capRequestProvisioning_Params(st), err
}

func NewRootCapProvisioning_capRequestProvisioning_Params(s *capnp.Segment) (CapProvisioning_capRequestProvisioning_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapProvisioning_capRequestProvisioning_Params(st), err
}

func ReadRootCapProvisioning_capRequestProvisioning_Params(msg *capnp.Message) (CapProvisioning_capRequestProvisioning_Params, error) {
	root, err := msg.Root()
	return CapProvisioning_capRequestProvisioning_Params(root.Struct()), err
}

func (s CapProvisioning_capRequestProvisioning_Params) String() string {
	str, _ := text.Marshal(0xd639555807730795, capnp.Struct(s))
	return str
}

func (s CapProvisioning_capRequestProvisioning_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapProvisioning_capRequestProvisioning_Params) DecodeFromPtr(p capnp.Ptr) CapProvisioning_capRequestProvisioning_Params {
	return CapProvisioning_capRequestProvisioning_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapProvisioning_capRequestProvisioning_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapProvisioning_capRequestProvisioning_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapProvisioning_capRequestProvisioning_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapProvisioning_capRequestProvisioning_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapProvisioning_capRequestProvisioning_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapProvisioning_capRequestProvisioning_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapProvisioning_capRequestProvisioning_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapProvisioning_capRequestProvisioning_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapProvisioning_capRequestProvisioning_Params_List is a list of CapProvisioning_capRequestProvisioning_Params.
type CapProvisioning_capRequestProvisioning_Params_List = capnp.StructList[CapProvisioning_capRequestProvisioning_Params]

// NewCapProvisioning_capRequestProvisioning_Params creates a new list of CapProvisioning_capRequestProvisioning_Params.
func NewCapProvisioning_capRequestProvisioning_Params_List(s *capnp.Segment, sz int32) (CapProvisioning_capRequestProvisioning_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapProvisioning_capRequestProvisioning_Params](l), err
}

// CapProvisioning_capRequestProvisioning_Params_Future is a wrapper for a CapProvisioning_capRequestProvisioning_Params promised by a client call.
type CapProvisioning_capRequestProvisioning_Params_Future struct{ *capnp.Future }

func (f CapProvisioning_capRequestProvisioning_Params_Future) Struct() (CapProvisioning_capRequestProvisioning_Params, error) {
	p, err := f.Future.Ptr()
	return CapProvisioning_capRequestProvisioning_Params(p.Struct()), err
}

type CapProvisioning_capRequestProvisioning_Results capnp.Struct

// CapProvisioning_capRequestProvisioning_Results_TypeID is the unique identifier for the type CapProvisioning_capRequestProvisioning_Results.
const CapProvisioning_capRequestProvisioning_Results_TypeID = 0xf28d935389e9c513

func NewCapProvisioning_capRequestProvisioning_Results(s *capnp.Segment) (CapProvisioning_capRequestProvisioning_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapProvisioning_capRequestProvisioning_Results(st), err
}

func NewRootCapProvisioning_capRequestProvisioning_Results(s *capnp.Segment) (CapProvisioning_capRequestProvisioning_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapProvisioning_capRequestProvisioning_Results(st), err
}

func ReadRootCapProvisioning_capRequestProvisioning_Results(msg *capnp.Message) (CapProvisioning_capRequestProvisioning_Results, error) {
	root, err := msg.Root()
	return CapProvisioning_capRequestProvisioning_Results(root.Struct()), err
}

func (s CapProvisioning_capRequestProvisioning_Results) String() string {
	str, _ := text.Marshal(0xf28d935389e9c513, capnp.Struct(s))
	return str
}

func (s CapProvisioning_capRequestProvisioning_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapProvisioning_capRequestProvisioning_Results) DecodeFromPtr(p capnp.Ptr) CapProvisioning_capRequestProvisioning_Results {
	return CapProvisioning_capRequestProvisioning_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapProvisioning_capRequestProvisioning_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapProvisioning_capRequestProvisioning_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapProvisioning_capRequestProvisioning_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapProvisioning_capRequestProvisioning_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapProvisioning_capRequestProvisioning_Results) Cap() CapRequestProvisioning {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapRequestProvisioning(p.Interface().Client())
}

func (s CapProvisioning_capRequestProvisioning_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapProvisioning_capRequestProvisioning_Results) SetCap(v CapRequestProvisioning) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapProvisioning_capRequestProvisioning_Results_List is a list of CapProvisioning_capRequestProvisioning_Results.
type CapProvisioning_capRequestProvisioning_Results_List = capnp.StructList[CapProvisioning_capRequestProvisioning_Results]

// NewCapProvisioning_capRequestProvisioning_Results creates a new list of CapProvisioning_capRequestProvisioning_Results.
func NewCapProvisioning_capRequestProvisioning_Results_List(s *capnp.Segment, sz int32) (CapProvisioning_capRequestProvisioning_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapProvisioning_capRequestProvisioning_Results](l), err
}

// CapProvisioning_capRequestProvisioning_Results_Future is a wrapper for a CapProvisioning_capRequestProvisioning_Results promised by a client call.
type CapProvisioning_capRequestProvisioning_Results_Future struct{ *capnp.Future }

func (f CapProvisioning_capRequestProvisioning_Results_Future) Struct() (CapProvisioning_capRequestProvisioning_Results, error) {
	p, err := f.Future.Ptr()
	return CapProvisioning_capRequestProvisioning_Results(p.Struct()), err
}
func (p CapProvisioning_capRequestProvisioning_Results_Future) Cap() CapRequestProvisioning {
	return CapRequestProvisioning(p.Future.Field(0, nil).Client())
}

type CapProvisioning_capRefreshProvisioning_Params capnp.Struct

// CapProvisioning_capRefreshProvisioning_Params_TypeID is the unique identifier for the type CapProvisioning_capRefreshProvisioning_Params.
const CapProvisioning_capRefreshProvisioning_Params_TypeID = 0x8aefb2c2be92348a

func NewCapProvisioning_capRefreshProvisioning_Params(s *capnp.Segment) (CapProvisioning_capRefreshProvisioning_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapProvisioning_capRefreshProvisioning_Params(st), err
}

func NewRootCapProvisioning_capRefreshProvisioning_Params(s *capnp.Segment) (CapProvisioning_capRefreshProvisioning_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapProvisioning_capRefreshProvisioning_Params(st), err
}

func ReadRootCapProvisioning_capRefreshProvisioning_Params(msg *capnp.Message) (CapProvisioning_capRefreshProvisioning_Params, error) {
	root, err := msg.Root()
	return CapProvisioning_capRefreshProvisioning_Params(root.Struct()), err
}

func (s CapProvisioning_capRefreshProvisioning_Params) String() string {
	str, _ := text.Marshal(0x8aefb2c2be92348a, capnp.Struct(s))
	return str
}

func (s CapProvisioning_capRefreshProvisioning_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapProvisioning_capRefreshProvisioning_Params) DecodeFromPtr(p capnp.Ptr) CapProvisioning_capRefreshProvisioning_Params {
	return CapProvisioning_capRefreshProvisioning_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapProvisioning_capRefreshProvisioning_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapProvisioning_capRefreshProvisioning_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapProvisioning_capRefreshProvisioning_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapProvisioning_capRefreshProvisioning_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapProvisioning_capRefreshProvisioning_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapProvisioning_capRefreshProvisioning_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapProvisioning_capRefreshProvisioning_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapProvisioning_capRefreshProvisioning_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapProvisioning_capRefreshProvisioning_Params_List is a list of CapProvisioning_capRefreshProvisioning_Params.
type CapProvisioning_capRefreshProvisioning_Params_List = capnp.StructList[CapProvisioning_capRefreshProvisioning_Params]

// NewCapProvisioning_capRefreshProvisioning_Params creates a new list of CapProvisioning_capRefreshProvisioning_Params.
func NewCapProvisioning_capRefreshProvisioning_Params_List(s *capnp.Segment, sz int32) (CapProvisioning_capRefreshProvisioning_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapProvisioning_capRefreshProvisioning_Params](l), err
}

// CapProvisioning_capRefreshProvisioning_Params_Future is a wrapper for a CapProvisioning_capRefreshProvisioning_Params promised by a client call.
type CapProvisioning_capRefreshProvisioning_Params_Future struct{ *capnp.Future }

func (f CapProvisioning_capRefreshProvisioning_Params_Future) Struct() (CapProvisioning_capRefreshProvisioning_Params, error) {
	p, err := f.Future.Ptr()
	return CapProvisioning_capRefreshProvisioning_Params(p.Struct()), err
}

type CapProvisioning_capRefreshProvisioning_Results capnp.Struct

// CapProvisioning_capRefreshProvisioning_Results_TypeID is the unique identifier for the type CapProvisioning_capRefreshProvisioning_Results.
const CapProvisioning_capRefreshProvisioning_Results_TypeID = 0xed54d0e7b62886ec

func NewCapProvisioning_capRefreshProvisioning_Results(s *capnp.Segment) (CapProvisioning_capRefreshProvisioning_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapProvisioning_capRefreshProvisioning_Results(st), err
}

func NewRootCapProvisioning_capRefreshProvisioning_Results(s *capnp.Segment) (CapProvisioning_capRefreshProvisioning_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapProvisioning_capRefreshProvisioning_Results(st), err
}

func ReadRootCapProvisioning_capRefreshProvisioning_Results(msg *capnp.Message) (CapProvisioning_capRefreshProvisioning_Results, error) {
	root, err := msg.Root()
	return CapProvisioning_capRefreshProvisioning_Results(root.Struct()), err
}

func (s CapProvisioning_capRefreshProvisioning_Results) String() string {
	str, _ := text.Marshal(0xed54d0e7b62886ec, capnp.Struct(s))
	return str
}

func (s CapProvisioning_capRefreshProvisioning_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapProvisioning_capRefreshProvisioning_Results) DecodeFromPtr(p capnp.Ptr) CapProvisioning_capRefreshProvisioning_Results {
	return CapProvisioning_capRefreshProvisioning_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapProvisioning_capRefreshProvisioning_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapProvisioning_capRefreshProvisioning_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapProvisioning_capRefreshProvisioning_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapProvisioning_capRefreshProvisioning_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapProvisioning_capRefreshProvisioning_Results) Cap() CapRefreshProvisioning {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapRefreshProvisioning(p.Interface().Client())
}

func (s CapProvisioning_capRefreshProvisioning_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapProvisioning_capRefreshProvisioning_Results) SetCap(v CapRefreshProvisioning) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapProvisioning_capRefreshProvisioning_Results_List is a list of CapProvisioning_capRefreshProvisioning_Results.
type CapProvisioning_capRefreshProvisioning_Results_List = capnp.StructList[CapProvisioning_capRefreshProvisioning_Results]

// NewCapProvisioning_capRefreshProvisioning_Results creates a new list of CapProvisioning_capRefreshProvisioning_Results.
func NewCapProvisioning_capRefreshProvisioning_Results_List(s *capnp.Segment, sz int32) (CapProvisioning_capRefreshProvisioning_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapProvisioning_capRefreshProvisioning_Results](l), err
}

// CapProvisioning_capRefreshProvisioning_Results_Future is a wrapper for a CapProvisioning_capRefreshProvisioning_Results promised by a client call.
type CapProvisioning_capRefreshProvisioning_Results_Future struct{ *capnp.Future }

func (f CapProvisioning_capRefreshProvisioning_Results_Future) Struct() (CapProvisioning_capRefreshProvisioning_Results, error) {
	p, err := f.Future.Ptr()
	return CapProvisioning_capRefreshProvisioning_Results(p.Struct()), err
}
func (p CapProvisioning_capRefreshProvisioning_Results_Future) Cap() CapRefreshProvisioning {
	return CapRefreshProvisioning(p.Future.Field(0, nil).Client())
}

type CapManageProvisioning capnp.Client

// CapManageProvisioning_TypeID is the unique identifier for the type CapManageProvisioning.
const CapManageProvisioning_TypeID = 0xc5cabd19dec29fbb

func (c CapManageProvisioning) AddOOBSecrets(ctx context.Context, params func(CapManageProvisioning_addOOBSecrets_Params) error) (CapManageProvisioning_addOOBSecrets_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc5cabd19dec29fbb,
			MethodID:      0,
			InterfaceName: "hubapi/Provisioning.capnp:CapManageProvisioning",
			MethodName:    "addOOBSecrets",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageProvisioning_addOOBSecrets_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageProvisioning_addOOBSecrets_Results_Future{Future: ans.Future()}, release
}
func (c CapManageProvisioning) ApproveRequest(ctx context.Context, params func(CapManageProvisioning_approveRequest_Params) error) (CapManageProvisioning_approveRequest_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc5cabd19dec29fbb,
			MethodID:      1,
			InterfaceName: "hubapi/Provisioning.capnp:CapManageProvisioning",
			MethodName:    "approveRequest",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageProvisioning_approveRequest_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageProvisioning_approveRequest_Results_Future{Future: ans.Future()}, release
}
func (c CapManageProvisioning) GetApprovedRequests(ctx context.Context, params func(CapManageProvisioning_getApprovedRequests_Params) error) (CapManageProvisioning_getApprovedRequests_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc5cabd19dec29fbb,
			MethodID:      2,
			InterfaceName: "hubapi/Provisioning.capnp:CapManageProvisioning",
			MethodName:    "getApprovedRequests",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageProvisioning_getApprovedRequests_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageProvisioning_getApprovedRequests_Results_Future{Future: ans.Future()}, release
}
func (c CapManageProvisioning) GetPendingRequests(ctx context.Context, params func(CapManageProvisioning_getPendingRequests_Params) error) (CapManageProvisioning_getPendingRequests_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc5cabd19dec29fbb,
			MethodID:      3,
			InterfaceName: "hubapi/Provisioning.capnp:CapManageProvisioning",
			MethodName:    "getPendingRequests",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapManageProvisioning_getPendingRequests_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapManageProvisioning_getPendingRequests_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapManageProvisioning) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapManageProvisioning) AddRef() CapManageProvisioning {
	return CapManageProvisioning(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapManageProvisioning) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapManageProvisioning) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapManageProvisioning) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapManageProvisioning) DecodeFromPtr(p capnp.Ptr) CapManageProvisioning {
	return CapManageProvisioning(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapManageProvisioning) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapManageProvisioning) IsSame(other CapManageProvisioning) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapManageProvisioning) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapManageProvisioning) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapManageProvisioning_Server is a CapManageProvisioning with a local implementation.
type CapManageProvisioning_Server interface {
	AddOOBSecrets(context.Context, CapManageProvisioning_addOOBSecrets) error

	ApproveRequest(context.Context, CapManageProvisioning_approveRequest) error

	GetApprovedRequests(context.Context, CapManageProvisioning_getApprovedRequests) error

	GetPendingRequests(context.Context, CapManageProvisioning_getPendingRequests) error
}

// CapManageProvisioning_NewServer creates a new Server from an implementation of CapManageProvisioning_Server.
func CapManageProvisioning_NewServer(s CapManageProvisioning_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapManageProvisioning_Methods(nil, s), s, c)
}

// CapManageProvisioning_ServerToClient creates a new Client from an implementation of CapManageProvisioning_Server.
// The caller is responsible for calling Release on the returned Client.
func CapManageProvisioning_ServerToClient(s CapManageProvisioning_Server) CapManageProvisioning {
	return CapManageProvisioning(capnp.NewClient(CapManageProvisioning_NewServer(s)))
}

// CapManageProvisioning_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapManageProvisioning_Methods(methods []server.Method, s CapManageProvisioning_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc5cabd19dec29fbb,
			MethodID:      0,
			InterfaceName: "hubapi/Provisioning.capnp:CapManageProvisioning",
			MethodName:    "addOOBSecrets",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddOOBSecrets(ctx, CapManageProvisioning_addOOBSecrets{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc5cabd19dec29fbb,
			MethodID:      1,
			InterfaceName: "hubapi/Provisioning.capnp:CapManageProvisioning",
			MethodName:    "approveRequest",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ApproveRequest(ctx, CapManageProvisioning_approveRequest{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc5cabd19dec29fbb,
			MethodID:      2,
			InterfaceName: "hubapi/Provisioning.capnp:CapManageProvisioning",
			MethodName:    "getApprovedRequests",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetApprovedRequests(ctx, CapManageProvisioning_getApprovedRequests{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc5cabd19dec29fbb,
			MethodID:      3,
			InterfaceName: "hubapi/Provisioning.capnp:CapManageProvisioning",
			MethodName:    "getPendingRequests",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetPendingRequests(ctx, CapManageProvisioning_getPendingRequests{call})
		},
	})

	return methods
}

// CapManageProvisioning_addOOBSecrets holds the state for a server call to CapManageProvisioning.addOOBSecrets.
// See server.Call for documentation.
type CapManageProvisioning_addOOBSecrets struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageProvisioning_addOOBSecrets) Args() CapManageProvisioning_addOOBSecrets_Params {
	return CapManageProvisioning_addOOBSecrets_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageProvisioning_addOOBSecrets) AllocResults() (CapManageProvisioning_addOOBSecrets_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageProvisioning_addOOBSecrets_Results(r), err
}

// CapManageProvisioning_approveRequest holds the state for a server call to CapManageProvisioning.approveRequest.
// See server.Call for documentation.
type CapManageProvisioning_approveRequest struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageProvisioning_approveRequest) Args() CapManageProvisioning_approveRequest_Params {
	return CapManageProvisioning_approveRequest_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageProvisioning_approveRequest) AllocResults() (CapManageProvisioning_approveRequest_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageProvisioning_approveRequest_Results(r), err
}

// CapManageProvisioning_getApprovedRequests holds the state for a server call to CapManageProvisioning.getApprovedRequests.
// See server.Call for documentation.
type CapManageProvisioning_getApprovedRequests struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageProvisioning_getApprovedRequests) Args() CapManageProvisioning_getApprovedRequests_Params {
	return CapManageProvisioning_getApprovedRequests_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageProvisioning_getApprovedRequests) AllocResults() (CapManageProvisioning_getApprovedRequests_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageProvisioning_getApprovedRequests_Results(r), err
}

// CapManageProvisioning_getPendingRequests holds the state for a server call to CapManageProvisioning.getPendingRequests.
// See server.Call for documentation.
type CapManageProvisioning_getPendingRequests struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapManageProvisioning_getPendingRequests) Args() CapManageProvisioning_getPendingRequests_Params {
	return CapManageProvisioning_getPendingRequests_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapManageProvisioning_getPendingRequests) AllocResults() (CapManageProvisioning_getPendingRequests_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageProvisioning_getPendingRequests_Results(r), err
}

// CapManageProvisioning_List is a list of CapManageProvisioning.
type CapManageProvisioning_List = capnp.CapList[CapManageProvisioning]

// NewCapManageProvisioning creates a new list of CapManageProvisioning.
func NewCapManageProvisioning_List(s *capnp.Segment, sz int32) (CapManageProvisioning_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapManageProvisioning](l), err
}

type CapManageProvisioning_addOOBSecrets_Params capnp.Struct

// CapManageProvisioning_addOOBSecrets_Params_TypeID is the unique identifier for the type CapManageProvisioning_addOOBSecrets_Params.
const CapManageProvisioning_addOOBSecrets_Params_TypeID = 0x8ec39d491b2497d1

func NewCapManageProvisioning_addOOBSecrets_Params(s *capnp.Segment) (CapManageProvisioning_addOOBSecrets_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageProvisioning_addOOBSecrets_Params(st), err
}

func NewRootCapManageProvisioning_addOOBSecrets_Params(s *capnp.Segment) (CapManageProvisioning_addOOBSecrets_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageProvisioning_addOOBSecrets_Params(st), err
}

func ReadRootCapManageProvisioning_addOOBSecrets_Params(msg *capnp.Message) (CapManageProvisioning_addOOBSecrets_Params, error) {
	root, err := msg.Root()
	return CapManageProvisioning_addOOBSecrets_Params(root.Struct()), err
}

func (s CapManageProvisioning_addOOBSecrets_Params) String() string {
	str, _ := text.Marshal(0x8ec39d491b2497d1, capnp.Struct(s))
	return str
}

func (s CapManageProvisioning_addOOBSecrets_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageProvisioning_addOOBSecrets_Params) DecodeFromPtr(p capnp.Ptr) CapManageProvisioning_addOOBSecrets_Params {
	return CapManageProvisioning_addOOBSecrets_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageProvisioning_addOOBSecrets_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageProvisioning_addOOBSecrets_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageProvisioning_addOOBSecrets_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageProvisioning_addOOBSecrets_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageProvisioning_addOOBSecrets_Params) OobSecrets() (OOBSecret_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return OOBSecret_List(p.List()), err
}

func (s CapManageProvisioning_addOOBSecrets_Params) HasOobSecrets() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageProvisioning_addOOBSecrets_Params) SetOobSecrets(v OOBSecret_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewOobSecrets sets the oobSecrets field to a newly
// allocated OOBSecret_List, preferring placement in s's segment.
func (s CapManageProvisioning_addOOBSecrets_Params) NewOobSecrets(n int32) (OOBSecret_List, error) {
	l, err := NewOOBSecret_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return OOBSecret_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapManageProvisioning_addOOBSecrets_Params_List is a list of CapManageProvisioning_addOOBSecrets_Params.
type CapManageProvisioning_addOOBSecrets_Params_List = capnp.StructList[CapManageProvisioning_addOOBSecrets_Params]

// NewCapManageProvisioning_addOOBSecrets_Params creates a new list of CapManageProvisioning_addOOBSecrets_Params.
func NewCapManageProvisioning_addOOBSecrets_Params_List(s *capnp.Segment, sz int32) (CapManageProvisioning_addOOBSecrets_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageProvisioning_addOOBSecrets_Params](l), err
}

// CapManageProvisioning_addOOBSecrets_Params_Future is a wrapper for a CapManageProvisioning_addOOBSecrets_Params promised by a client call.
type CapManageProvisioning_addOOBSecrets_Params_Future struct{ *capnp.Future }

func (f CapManageProvisioning_addOOBSecrets_Params_Future) Struct() (CapManageProvisioning_addOOBSecrets_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageProvisioning_addOOBSecrets_Params(p.Struct()), err
}

type CapManageProvisioning_addOOBSecrets_Results capnp.Struct

// CapManageProvisioning_addOOBSecrets_Results_TypeID is the unique identifier for the type CapManageProvisioning_addOOBSecrets_Results.
const CapManageProvisioning_addOOBSecrets_Results_TypeID = 0x838ce274c4d89b89

func NewCapManageProvisioning_addOOBSecrets_Results(s *capnp.Segment) (CapManageProvisioning_addOOBSecrets_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageProvisioning_addOOBSecrets_Results(st), err
}

func NewRootCapManageProvisioning_addOOBSecrets_Results(s *capnp.Segment) (CapManageProvisioning_addOOBSecrets_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageProvisioning_addOOBSecrets_Results(st), err
}

func ReadRootCapManageProvisioning_addOOBSecrets_Results(msg *capnp.Message) (CapManageProvisioning_addOOBSecrets_Results, error) {
	root, err := msg.Root()
	return CapManageProvisioning_addOOBSecrets_Results(root.Struct()), err
}

func (s CapManageProvisioning_addOOBSecrets_Results) String() string {
	str, _ := text.Marshal(0x838ce274c4d89b89, capnp.Struct(s))
	return str
}

func (s CapManageProvisioning_addOOBSecrets_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageProvisioning_addOOBSecrets_Results) DecodeFromPtr(p capnp.Ptr) CapManageProvisioning_addOOBSecrets_Results {
	return CapManageProvisioning_addOOBSecrets_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageProvisioning_addOOBSecrets_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageProvisioning_addOOBSecrets_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageProvisioning_addOOBSecrets_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageProvisioning_addOOBSecrets_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapManageProvisioning_addOOBSecrets_Results_List is a list of CapManageProvisioning_addOOBSecrets_Results.
type CapManageProvisioning_addOOBSecrets_Results_List = capnp.StructList[CapManageProvisioning_addOOBSecrets_Results]

// NewCapManageProvisioning_addOOBSecrets_Results creates a new list of CapManageProvisioning_addOOBSecrets_Results.
func NewCapManageProvisioning_addOOBSecrets_Results_List(s *capnp.Segment, sz int32) (CapManageProvisioning_addOOBSecrets_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapManageProvisioning_addOOBSecrets_Results](l), err
}

// CapManageProvisioning_addOOBSecrets_Results_Future is a wrapper for a CapManageProvisioning_addOOBSecrets_Results promised by a client call.
type CapManageProvisioning_addOOBSecrets_Results_Future struct{ *capnp.Future }

func (f CapManageProvisioning_addOOBSecrets_Results_Future) Struct() (CapManageProvisioning_addOOBSecrets_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageProvisioning_addOOBSecrets_Results(p.Struct()), err
}

type CapManageProvisioning_approveRequest_Params capnp.Struct

// CapManageProvisioning_approveRequest_Params_TypeID is the unique identifier for the type CapManageProvisioning_approveRequest_Params.
const CapManageProvisioning_approveRequest_Params_TypeID = 0xb7048da50fee071e

func NewCapManageProvisioning_approveRequest_Params(s *capnp.Segment) (CapManageProvisioning_approveRequest_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageProvisioning_approveRequest_Params(st), err
}

func NewRootCapManageProvisioning_approveRequest_Params(s *capnp.Segment) (CapManageProvisioning_approveRequest_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageProvisioning_approveRequest_Params(st), err
}

func ReadRootCapManageProvisioning_approveRequest_Params(msg *capnp.Message) (CapManageProvisioning_approveRequest_Params, error) {
	root, err := msg.Root()
	return CapManageProvisioning_approveRequest_Params(root.Struct()), err
}

func (s CapManageProvisioning_approveRequest_Params) String() string {
	str, _ := text.Marshal(0xb7048da50fee071e, capnp.Struct(s))
	return str
}

func (s CapManageProvisioning_approveRequest_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageProvisioning_approveRequest_Params) DecodeFromPtr(p capnp.Ptr) CapManageProvisioning_approveRequest_Params {
	return CapManageProvisioning_approveRequest_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageProvisioning_approveRequest_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageProvisioning_approveRequest_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageProvisioning_approveRequest_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageProvisioning_approveRequest_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageProvisioning_approveRequest_Params) DeviceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapManageProvisioning_approveRequest_Params) HasDeviceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageProvisioning_approveRequest_Params) DeviceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapManageProvisioning_approveRequest_Params) SetDeviceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapManageProvisioning_approveRequest_Params_List is a list of CapManageProvisioning_approveRequest_Params.
type CapManageProvisioning_approveRequest_Params_List = capnp.StructList[CapManageProvisioning_approveRequest_Params]

// NewCapManageProvisioning_approveRequest_Params creates a new list of CapManageProvisioning_approveRequest_Params.
func NewCapManageProvisioning_approveRequest_Params_List(s *capnp.Segment, sz int32) (CapManageProvisioning_approveRequest_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageProvisioning_approveRequest_Params](l), err
}

// CapManageProvisioning_approveRequest_Params_Future is a wrapper for a CapManageProvisioning_approveRequest_Params promised by a client call.
type CapManageProvisioning_approveRequest_Params_Future struct{ *capnp.Future }

func (f CapManageProvisioning_approveRequest_Params_Future) Struct() (CapManageProvisioning_approveRequest_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageProvisioning_approveRequest_Params(p.Struct()), err
}

type CapManageProvisioning_approveRequest_Results capnp.Struct

// CapManageProvisioning_approveRequest_Results_TypeID is the unique identifier for the type CapManageProvisioning_approveRequest_Results.
const CapManageProvisioning_approveRequest_Results_TypeID = 0xe26c156c3850092a

func NewCapManageProvisioning_approveRequest_Results(s *capnp.Segment) (CapManageProvisioning_approveRequest_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageProvisioning_approveRequest_Results(st), err
}

func NewRootCapManageProvisioning_approveRequest_Results(s *capnp.Segment) (CapManageProvisioning_approveRequest_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageProvisioning_approveRequest_Results(st), err
}

func ReadRootCapManageProvisioning_approveRequest_Results(msg *capnp.Message) (CapManageProvisioning_approveRequest_Results, error) {
	root, err := msg.Root()
	return CapManageProvisioning_approveRequest_Results(root.Struct()), err
}

func (s CapManageProvisioning_approveRequest_Results) String() string {
	str, _ := text.Marshal(0xe26c156c3850092a, capnp.Struct(s))
	return str
}

func (s CapManageProvisioning_approveRequest_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageProvisioning_approveRequest_Results) DecodeFromPtr(p capnp.Ptr) CapManageProvisioning_approveRequest_Results {
	return CapManageProvisioning_approveRequest_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageProvisioning_approveRequest_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageProvisioning_approveRequest_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageProvisioning_approveRequest_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageProvisioning_approveRequest_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapManageProvisioning_approveRequest_Results_List is a list of CapManageProvisioning_approveRequest_Results.
type CapManageProvisioning_approveRequest_Results_List = capnp.StructList[CapManageProvisioning_approveRequest_Results]

// NewCapManageProvisioning_approveRequest_Results creates a new list of CapManageProvisioning_approveRequest_Results.
func NewCapManageProvisioning_approveRequest_Results_List(s *capnp.Segment, sz int32) (CapManageProvisioning_approveRequest_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapManageProvisioning_approveRequest_Results](l), err
}

// CapManageProvisioning_approveRequest_Results_Future is a wrapper for a CapManageProvisioning_approveRequest_Results promised by a client call.
type CapManageProvisioning_approveRequest_Results_Future struct{ *capnp.Future }

func (f CapManageProvisioning_approveRequest_Results_Future) Struct() (CapManageProvisioning_approveRequest_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageProvisioning_approveRequest_Results(p.Struct()), err
}

type CapManageProvisioning_getApprovedRequests_Params capnp.Struct

// CapManageProvisioning_getApprovedRequests_Params_TypeID is the unique identifier for the type CapManageProvisioning_getApprovedRequests_Params.
const CapManageProvisioning_getApprovedRequests_Params_TypeID = 0xe06d5ae541d18a4d

func NewCapManageProvisioning_getApprovedRequests_Params(s *capnp.Segment) (CapManageProvisioning_getApprovedRequests_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageProvisioning_getApprovedRequests_Params(st), err
}

func NewRootCapManageProvisioning_getApprovedRequests_Params(s *capnp.Segment) (CapManageProvisioning_getApprovedRequests_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageProvisioning_getApprovedRequests_Params(st), err
}

func ReadRootCapManageProvisioning_getApprovedRequests_Params(msg *capnp.Message) (CapManageProvisioning_getApprovedRequests_Params, error) {
	root, err := msg.Root()
	return CapManageProvisioning_getApprovedRequests_Params(root.Struct()), err
}

func (s CapManageProvisioning_getApprovedRequests_Params) String() string {
	str, _ := text.Marshal(0xe06d5ae541d18a4d, capnp.Struct(s))
	return str
}

func (s CapManageProvisioning_getApprovedRequests_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageProvisioning_getApprovedRequests_Params) DecodeFromPtr(p capnp.Ptr) CapManageProvisioning_getApprovedRequests_Params {
	return CapManageProvisioning_getApprovedRequests_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageProvisioning_getApprovedRequests_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageProvisioning_getApprovedRequests_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageProvisioning_getApprovedRequests_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageProvisioning_getApprovedRequests_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapManageProvisioning_getApprovedRequests_Params_List is a list of CapManageProvisioning_getApprovedRequests_Params.
type CapManageProvisioning_getApprovedRequests_Params_List = capnp.StructList[CapManageProvisioning_getApprovedRequests_Params]

// NewCapManageProvisioning_getApprovedRequests_Params creates a new list of CapManageProvisioning_getApprovedRequests_Params.
func NewCapManageProvisioning_getApprovedRequests_Params_List(s *capnp.Segment, sz int32) (CapManageProvisioning_getApprovedRequests_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapManageProvisioning_getApprovedRequests_Params](l), err
}

// CapManageProvisioning_getApprovedRequests_Params_Future is a wrapper for a CapManageProvisioning_getApprovedRequests_Params promised by a client call.
type CapManageProvisioning_getApprovedRequests_Params_Future struct{ *capnp.Future }

func (f CapManageProvisioning_getApprovedRequests_Params_Future) Struct() (CapManageProvisioning_getApprovedRequests_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageProvisioning_getApprovedRequests_Params(p.Struct()), err
}

type CapManageProvisioning_getApprovedRequests_Results capnp.Struct

// CapManageProvisioning_getApprovedRequests_Results_TypeID is the unique identifier for the type CapManageProvisioning_getApprovedRequests_Results.
const CapManageProvisioning_getApprovedRequests_Results_TypeID = 0xe35d87bd41df41a2

func NewCapManageProvisioning_getApprovedRequests_Results(s *capnp.Segment) (CapManageProvisioning_getApprovedRequests_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageProvisioning_getApprovedRequests_Results(st), err
}

func NewRootCapManageProvisioning_getApprovedRequests_Results(s *capnp.Segment) (CapManageProvisioning_getApprovedRequests_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageProvisioning_getApprovedRequests_Results(st), err
}

func ReadRootCapManageProvisioning_getApprovedRequests_Results(msg *capnp.Message) (CapManageProvisioning_getApprovedRequests_Results, error) {
	root, err := msg.Root()
	return CapManageProvisioning_getApprovedRequests_Results(root.Struct()), err
}

func (s CapManageProvisioning_getApprovedRequests_Results) String() string {
	str, _ := text.Marshal(0xe35d87bd41df41a2, capnp.Struct(s))
	return str
}

func (s CapManageProvisioning_getApprovedRequests_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageProvisioning_getApprovedRequests_Results) DecodeFromPtr(p capnp.Ptr) CapManageProvisioning_getApprovedRequests_Results {
	return CapManageProvisioning_getApprovedRequests_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageProvisioning_getApprovedRequests_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageProvisioning_getApprovedRequests_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageProvisioning_getApprovedRequests_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageProvisioning_getApprovedRequests_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageProvisioning_getApprovedRequests_Results) Requests() (ProvisionStatus_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ProvisionStatus_List(p.List()), err
}

func (s CapManageProvisioning_getApprovedRequests_Results) HasRequests() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageProvisioning_getApprovedRequests_Results) SetRequests(v ProvisionStatus_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewRequests sets the requests field to a newly
// allocated ProvisionStatus_List, preferring placement in s's segment.
func (s CapManageProvisioning_getApprovedRequests_Results) NewRequests(n int32) (ProvisionStatus_List, error) {
	l, err := NewProvisionStatus_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ProvisionStatus_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapManageProvisioning_getApprovedRequests_Results_List is a list of CapManageProvisioning_getApprovedRequests_Results.
type CapManageProvisioning_getApprovedRequests_Results_List = capnp.StructList[CapManageProvisioning_getApprovedRequests_Results]

// NewCapManageProvisioning_getApprovedRequests_Results creates a new list of CapManageProvisioning_getApprovedRequests_Results.
func NewCapManageProvisioning_getApprovedRequests_Results_List(s *capnp.Segment, sz int32) (CapManageProvisioning_getApprovedRequests_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageProvisioning_getApprovedRequests_Results](l), err
}

// CapManageProvisioning_getApprovedRequests_Results_Future is a wrapper for a CapManageProvisioning_getApprovedRequests_Results promised by a client call.
type CapManageProvisioning_getApprovedRequests_Results_Future struct{ *capnp.Future }

func (f CapManageProvisioning_getApprovedRequests_Results_Future) Struct() (CapManageProvisioning_getApprovedRequests_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageProvisioning_getApprovedRequests_Results(p.Struct()), err
}

type CapManageProvisioning_getPendingRequests_Params capnp.Struct

// CapManageProvisioning_getPendingRequests_Params_TypeID is the unique identifier for the type CapManageProvisioning_getPendingRequests_Params.
const CapManageProvisioning_getPendingRequests_Params_TypeID = 0x847e5dea644198b3

func NewCapManageProvisioning_getPendingRequests_Params(s *capnp.Segment) (CapManageProvisioning_getPendingRequests_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageProvisioning_getPendingRequests_Params(st), err
}

func NewRootCapManageProvisioning_getPendingRequests_Params(s *capnp.Segment) (CapManageProvisioning_getPendingRequests_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapManageProvisioning_getPendingRequests_Params(st), err
}

func ReadRootCapManageProvisioning_getPendingRequests_Params(msg *capnp.Message) (CapManageProvisioning_getPendingRequests_Params, error) {
	root, err := msg.Root()
	return CapManageProvisioning_getPendingRequests_Params(root.Struct()), err
}

func (s CapManageProvisioning_getPendingRequests_Params) String() string {
	str, _ := text.Marshal(0x847e5dea644198b3, capnp.Struct(s))
	return str
}

func (s CapManageProvisioning_getPendingRequests_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageProvisioning_getPendingRequests_Params) DecodeFromPtr(p capnp.Ptr) CapManageProvisioning_getPendingRequests_Params {
	return CapManageProvisioning_getPendingRequests_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageProvisioning_getPendingRequests_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageProvisioning_getPendingRequests_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageProvisioning_getPendingRequests_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageProvisioning_getPendingRequests_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapManageProvisioning_getPendingRequests_Params_List is a list of CapManageProvisioning_getPendingRequests_Params.
type CapManageProvisioning_getPendingRequests_Params_List = capnp.StructList[CapManageProvisioning_getPendingRequests_Params]

// NewCapManageProvisioning_getPendingRequests_Params creates a new list of CapManageProvisioning_getPendingRequests_Params.
func NewCapManageProvisioning_getPendingRequests_Params_List(s *capnp.Segment, sz int32) (CapManageProvisioning_getPendingRequests_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapManageProvisioning_getPendingRequests_Params](l), err
}

// CapManageProvisioning_getPendingRequests_Params_Future is a wrapper for a CapManageProvisioning_getPendingRequests_Params promised by a client call.
type CapManageProvisioning_getPendingRequests_Params_Future struct{ *capnp.Future }

func (f CapManageProvisioning_getPendingRequests_Params_Future) Struct() (CapManageProvisioning_getPendingRequests_Params, error) {
	p, err := f.Future.Ptr()
	return CapManageProvisioning_getPendingRequests_Params(p.Struct()), err
}

type CapManageProvisioning_getPendingRequests_Results capnp.Struct

// CapManageProvisioning_getPendingRequests_Results_TypeID is the unique identifier for the type CapManageProvisioning_getPendingRequests_Results.
const CapManageProvisioning_getPendingRequests_Results_TypeID = 0xb709d610e685ddfa

func NewCapManageProvisioning_getPendingRequests_Results(s *capnp.Segment) (CapManageProvisioning_getPendingRequests_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageProvisioning_getPendingRequests_Results(st), err
}

func NewRootCapManageProvisioning_getPendingRequests_Results(s *capnp.Segment) (CapManageProvisioning_getPendingRequests_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapManageProvisioning_getPendingRequests_Results(st), err
}

func ReadRootCapManageProvisioning_getPendingRequests_Results(msg *capnp.Message) (CapManageProvisioning_getPendingRequests_Results, error) {
	root, err := msg.Root()
	return CapManageProvisioning_getPendingRequests_Results(root.Struct()), err
}

func (s CapManageProvisioning_getPendingRequests_Results) String() string {
	str, _ := text.Marshal(0xb709d610e685ddfa, capnp.Struct(s))
	return str
}

func (s CapManageProvisioning_getPendingRequests_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapManageProvisioning_getPendingRequests_Results) DecodeFromPtr(p capnp.Ptr) CapManageProvisioning_getPendingRequests_Results {
	return CapManageProvisioning_getPendingRequests_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapManageProvisioning_getPendingRequests_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapManageProvisioning_getPendingRequests_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapManageProvisioning_getPendingRequests_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapManageProvisioning_getPendingRequests_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapManageProvisioning_getPendingRequests_Results) Requests() (ProvisionStatus_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ProvisionStatus_List(p.List()), err
}

func (s CapManageProvisioning_getPendingRequests_Results) HasRequests() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapManageProvisioning_getPendingRequests_Results) SetRequests(v ProvisionStatus_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewRequests sets the requests field to a newly
// allocated ProvisionStatus_List, preferring placement in s's segment.
func (s CapManageProvisioning_getPendingRequests_Results) NewRequests(n int32) (ProvisionStatus_List, error) {
	l, err := NewProvisionStatus_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ProvisionStatus_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapManageProvisioning_getPendingRequests_Results_List is a list of CapManageProvisioning_getPendingRequests_Results.
type CapManageProvisioning_getPendingRequests_Results_List = capnp.StructList[CapManageProvisioning_getPendingRequests_Results]

// NewCapManageProvisioning_getPendingRequests_Results creates a new list of CapManageProvisioning_getPendingRequests_Results.
func NewCapManageProvisioning_getPendingRequests_Results_List(s *capnp.Segment, sz int32) (CapManageProvisioning_getPendingRequests_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapManageProvisioning_getPendingRequests_Results](l), err
}

// CapManageProvisioning_getPendingRequests_Results_Future is a wrapper for a CapManageProvisioning_getPendingRequests_Results promised by a client call.
type CapManageProvisioning_getPendingRequests_Results_Future struct{ *capnp.Future }

func (f CapManageProvisioning_getPendingRequests_Results_Future) Struct() (CapManageProvisioning_getPendingRequests_Results, error) {
	p, err := f.Future.Ptr()
	return CapManageProvisioning_getPendingRequests_Results(p.Struct()), err
}

type CapRequestProvisioning capnp.Client

// CapRequestProvisioning_TypeID is the unique identifier for the type CapRequestProvisioning.
const CapRequestProvisioning_TypeID = 0xc030b983562bd8a4

func (c CapRequestProvisioning) SubmitProvisioningRequest(ctx context.Context, params func(CapRequestProvisioning_submitProvisioningRequest_Params) error) (CapRequestProvisioning_submitProvisioningRequest_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc030b983562bd8a4,
			MethodID:      0,
			InterfaceName: "hubapi/Provisioning.capnp:CapRequestProvisioning",
			MethodName:    "submitProvisioningRequest",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapRequestProvisioning_submitProvisioningRequest_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapRequestProvisioning_submitProvisioningRequest_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapRequestProvisioning) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapRequestProvisioning) AddRef() CapRequestProvisioning {
	return CapRequestProvisioning(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapRequestProvisioning) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapRequestProvisioning) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapRequestProvisioning) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapRequestProvisioning) DecodeFromPtr(p capnp.Ptr) CapRequestProvisioning {
	return CapRequestProvisioning(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapRequestProvisioning) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapRequestProvisioning) IsSame(other CapRequestProvisioning) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapRequestProvisioning) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapRequestProvisioning) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapRequestProvisioning_Server is a CapRequestProvisioning with a local implementation.
type CapRequestProvisioning_Server interface {
	SubmitProvisioningRequest(context.Context, CapRequestProvisioning_submitProvisioningRequest) error
}

// CapRequestProvisioning_NewServer creates a new Server from an implementation of CapRequestProvisioning_Server.
func CapRequestProvisioning_NewServer(s CapRequestProvisioning_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapRequestProvisioning_Methods(nil, s), s, c)
}

// CapRequestProvisioning_ServerToClient creates a new Client from an implementation of CapRequestProvisioning_Server.
// The caller is responsible for calling Release on the returned Client.
func CapRequestProvisioning_ServerToClient(s CapRequestProvisioning_Server) CapRequestProvisioning {
	return CapRequestProvisioning(capnp.NewClient(CapRequestProvisioning_NewServer(s)))
}

// CapRequestProvisioning_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapRequestProvisioning_Methods(methods []server.Method, s CapRequestProvisioning_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc030b983562bd8a4,
			MethodID:      0,
			InterfaceName: "hubapi/Provisioning.capnp:CapRequestProvisioning",
			MethodName:    "submitProvisioningRequest",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SubmitProvisioningRequest(ctx, CapRequestProvisioning_submitProvisioningRequest{call})
		},
	})

	return methods
}

// CapRequestProvisioning_submitProvisioningRequest holds the state for a server call to CapRequestProvisioning.submitProvisioningRequest.
// See server.Call for documentation.
type CapRequestProvisioning_submitProvisioningRequest struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapRequestProvisioning_submitProvisioningRequest) Args() CapRequestProvisioning_submitProvisioningRequest_Params {
	return CapRequestProvisioning_submitProvisioningRequest_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapRequestProvisioning_submitProvisioningRequest) AllocResults() (CapRequestProvisioning_submitProvisioningRequest_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapRequestProvisioning_submitProvisioningRequest_Results(r), err
}

// CapRequestProvisioning_List is a list of CapRequestProvisioning.
type CapRequestProvisioning_List = capnp.CapList[CapRequestProvisioning]

// NewCapRequestProvisioning creates a new list of CapRequestProvisioning.
func NewCapRequestProvisioning_List(s *capnp.Segment, sz int32) (CapRequestProvisioning_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapRequestProvisioning](l), err
}

type CapRequestProvisioning_submitProvisioningRequest_Params capnp.Struct

// CapRequestProvisioning_submitProvisioningRequest_Params_TypeID is the unique identifier for the type CapRequestProvisioning_submitProvisioningRequest_Params.
const CapRequestProvisioning_submitProvisioningRequest_Params_TypeID = 0xbbdcc0b62dd56424

func NewCapRequestProvisioning_submitProvisioningRequest_Params(s *capnp.Segment) (CapRequestProvisioning_submitProvisioningRequest_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapRequestProvisioning_submitProvisioningRequest_Params(st), err
}

func NewRootCapRequestProvisioning_submitProvisioningRequest_Params(s *capnp.Segment) (CapRequestProvisioning_submitProvisioningRequest_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CapRequestProvisioning_submitProvisioningRequest_Params(st), err
}

func ReadRootCapRequestProvisioning_submitProvisioningRequest_Params(msg *capnp.Message) (CapRequestProvisioning_submitProvisioningRequest_Params, error) {
	root, err := msg.Root()
	return CapRequestProvisioning_submitProvisioningRequest_Params(root.Struct()), err
}

func (s CapRequestProvisioning_submitProvisioningRequest_Params) String() string {
	str, _ := text.Marshal(0xbbdcc0b62dd56424, capnp.Struct(s))
	return str
}

func (s CapRequestProvisioning_submitProvisioningRequest_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapRequestProvisioning_submitProvisioningRequest_Params) DecodeFromPtr(p capnp.Ptr) CapRequestProvisioning_submitProvisioningRequest_Params {
	return CapRequestProvisioning_submitProvisioningRequest_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapRequestProvisioning_submitProvisioningRequest_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapRequestProvisioning_submitProvisioningRequest_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapRequestProvisioning_submitProvisioningRequest_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapRequestProvisioning_submitProvisioningRequest_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapRequestProvisioning_submitProvisioningRequest_Params) DeviceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapRequestProvisioning_submitProvisioningRequest_Params) HasDeviceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapRequestProvisioning_submitProvisioningRequest_Params) DeviceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapRequestProvisioning_submitProvisioningRequest_Params) SetDeviceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapRequestProvisioning_submitProvisioningRequest_Params) Md5Secret() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapRequestProvisioning_submitProvisioningRequest_Params) HasMd5Secret() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapRequestProvisioning_submitProvisioningRequest_Params) Md5SecretBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapRequestProvisioning_submitProvisioningRequest_Params) SetMd5Secret(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CapRequestProvisioning_submitProvisioningRequest_Params) PubKeyPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CapRequestProvisioning_submitProvisioningRequest_Params) HasPubKeyPEM() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CapRequestProvisioning_submitProvisioningRequest_Params) PubKeyPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CapRequestProvisioning_submitProvisioningRequest_Params) SetPubKeyPEM(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// CapRequestProvisioning_submitProvisioningRequest_Params_List is a list of CapRequestProvisioning_submitProvisioningRequest_Params.
type CapRequestProvisioning_submitProvisioningRequest_Params_List = capnp.StructList[CapRequestProvisioning_submitProvisioningRequest_Params]

// NewCapRequestProvisioning_submitProvisioningRequest_Params creates a new list of CapRequestProvisioning_submitProvisioningRequest_Params.
func NewCapRequestProvisioning_submitProvisioningRequest_Params_List(s *capnp.Segment, sz int32) (CapRequestProvisioning_submitProvisioningRequest_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[CapRequestProvisioning_submitProvisioningRequest_Params](l), err
}

// CapRequestProvisioning_submitProvisioningRequest_Params_Future is a wrapper for a CapRequestProvisioning_submitProvisioningRequest_Params promised by a client call.
type CapRequestProvisioning_submitProvisioningRequest_Params_Future struct{ *capnp.Future }

func (f CapRequestProvisioning_submitProvisioningRequest_Params_Future) Struct() (CapRequestProvisioning_submitProvisioningRequest_Params, error) {
	p, err := f.Future.Ptr()
	return CapRequestProvisioning_submitProvisioningRequest_Params(p.Struct()), err
}

type CapRequestProvisioning_submitProvisioningRequest_Results capnp.Struct

// CapRequestProvisioning_submitProvisioningRequest_Results_TypeID is the unique identifier for the type CapRequestProvisioning_submitProvisioningRequest_Results.
const CapRequestProvisioning_submitProvisioningRequest_Results_TypeID = 0xc3743df7b9645cc6

func NewCapRequestProvisioning_submitProvisioningRequest_Results(s *capnp.Segment) (CapRequestProvisioning_submitProvisioningRequest_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapRequestProvisioning_submitProvisioningRequest_Results(st), err
}

func NewRootCapRequestProvisioning_submitProvisioningRequest_Results(s *capnp.Segment) (CapRequestProvisioning_submitProvisioningRequest_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapRequestProvisioning_submitProvisioningRequest_Results(st), err
}

func ReadRootCapRequestProvisioning_submitProvisioningRequest_Results(msg *capnp.Message) (CapRequestProvisioning_submitProvisioningRequest_Results, error) {
	root, err := msg.Root()
	return CapRequestProvisioning_submitProvisioningRequest_Results(root.Struct()), err
}

func (s CapRequestProvisioning_submitProvisioningRequest_Results) String() string {
	str, _ := text.Marshal(0xc3743df7b9645cc6, capnp.Struct(s))
	return str
}

func (s CapRequestProvisioning_submitProvisioningRequest_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapRequestProvisioning_submitProvisioningRequest_Results) DecodeFromPtr(p capnp.Ptr) CapRequestProvisioning_submitProvisioningRequest_Results {
	return CapRequestProvisioning_submitProvisioningRequest_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapRequestProvisioning_submitProvisioningRequest_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapRequestProvisioning_submitProvisioningRequest_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapRequestProvisioning_submitProvisioningRequest_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapRequestProvisioning_submitProvisioningRequest_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapRequestProvisioning_submitProvisioningRequest_Results) Status() (ProvisionStatus, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ProvisionStatus(p.Struct()), err
}

func (s CapRequestProvisioning_submitProvisioningRequest_Results) HasStatus() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapRequestProvisioning_submitProvisioningRequest_Results) SetStatus(v ProvisionStatus) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStatus sets the status field to a newly
// allocated ProvisionStatus struct, preferring placement in s's segment.
func (s CapRequestProvisioning_submitProvisioningRequest_Results) NewStatus() (ProvisionStatus, error) {
	ss, err := NewProvisionStatus(capnp.Struct(s).Segment())
	if err != nil {
		return ProvisionStatus{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapRequestProvisioning_submitProvisioningRequest_Results_List is a list of CapRequestProvisioning_submitProvisioningRequest_Results.
type CapRequestProvisioning_submitProvisioningRequest_Results_List = capnp.StructList[CapRequestProvisioning_submitProvisioningRequest_Results]

// NewCapRequestProvisioning_submitProvisioningRequest_Results creates a new list of CapRequestProvisioning_submitProvisioningRequest_Results.
func NewCapRequestProvisioning_submitProvisioningRequest_Results_List(s *capnp.Segment, sz int32) (CapRequestProvisioning_submitProvisioningRequest_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapRequestProvisioning_submitProvisioningRequest_Results](l), err
}

// CapRequestProvisioning_submitProvisioningRequest_Results_Future is a wrapper for a CapRequestProvisioning_submitProvisioningRequest_Results promised by a client call.
type CapRequestProvisioning_submitProvisioningRequest_Results_Future struct{ *capnp.Future }

func (f CapRequestProvisioning_submitProvisioningRequest_Results_Future) Struct() (CapRequestProvisioning_submitProvisioningRequest_Results, error) {
	p, err := f.Future.Ptr()
	return CapRequestProvisioning_submitProvisioningRequest_Results(p.Struct()), err
}
func (p CapRequestProvisioning_submitProvisioningRequest_Results_Future) Status() ProvisionStatus_Future {
	return ProvisionStatus_Future{Future: p.Future.Field(0, nil)}
}

type CapRefreshProvisioning capnp.Client

// CapRefreshProvisioning_TypeID is the unique identifier for the type CapRefreshProvisioning.
const CapRefreshProvisioning_TypeID = 0x940570d71d747d70

func (c CapRefreshProvisioning) RefreshDeviceCert(ctx context.Context, params func(CapRefreshProvisioning_refreshDeviceCert_Params) error) (CapRefreshProvisioning_refreshDeviceCert_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x940570d71d747d70,
			MethodID:      0,
			InterfaceName: "hubapi/Provisioning.capnp:CapRefreshProvisioning",
			MethodName:    "refreshDeviceCert",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapRefreshProvisioning_refreshDeviceCert_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapRefreshProvisioning_refreshDeviceCert_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapRefreshProvisioning) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapRefreshProvisioning) AddRef() CapRefreshProvisioning {
	return CapRefreshProvisioning(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapRefreshProvisioning) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapRefreshProvisioning) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapRefreshProvisioning) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapRefreshProvisioning) DecodeFromPtr(p capnp.Ptr) CapRefreshProvisioning {
	return CapRefreshProvisioning(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapRefreshProvisioning) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapRefreshProvisioning) IsSame(other CapRefreshProvisioning) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapRefreshProvisioning) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapRefreshProvisioning) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapRefreshProvisioning_Server is a CapRefreshProvisioning with a local implementation.
type CapRefreshProvisioning_Server interface {
	RefreshDeviceCert(context.Context, CapRefreshProvisioning_refreshDeviceCert) error
}

// CapRefreshProvisioning_NewServer creates a new Server from an implementation of CapRefreshProvisioning_Server.
func CapRefreshProvisioning_NewServer(s CapRefreshProvisioning_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapRefreshProvisioning_Methods(nil, s), s, c)
}

// CapRefreshProvisioning_ServerToClient creates a new Client from an implementation of CapRefreshProvisioning_Server.
// The caller is responsible for calling Release on the returned Client.
func CapRefreshProvisioning_ServerToClient(s CapRefreshProvisioning_Server) CapRefreshProvisioning {
	return CapRefreshProvisioning(capnp.NewClient(CapRefreshProvisioning_NewServer(s)))
}

// CapRefreshProvisioning_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapRefreshProvisioning_Methods(methods []server.Method, s CapRefreshProvisioning_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x940570d71d747d70,
			MethodID:      0,
			InterfaceName: "hubapi/Provisioning.capnp:CapRefreshProvisioning",
			MethodName:    "refreshDeviceCert",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RefreshDeviceCert(ctx, CapRefreshProvisioning_refreshDeviceCert{call})
		},
	})

	return methods
}

// CapRefreshProvisioning_refreshDeviceCert holds the state for a server call to CapRefreshProvisioning.refreshDeviceCert.
// See server.Call for documentation.
type CapRefreshProvisioning_refreshDeviceCert struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapRefreshProvisioning_refreshDeviceCert) Args() CapRefreshProvisioning_refreshDeviceCert_Params {
	return CapRefreshProvisioning_refreshDeviceCert_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapRefreshProvisioning_refreshDeviceCert) AllocResults() (CapRefreshProvisioning_refreshDeviceCert_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapRefreshProvisioning_refreshDeviceCert_Results(r), err
}

// CapRefreshProvisioning_List is a list of CapRefreshProvisioning.
type CapRefreshProvisioning_List = capnp.CapList[CapRefreshProvisioning]

// NewCapRefreshProvisioning creates a new list of CapRefreshProvisioning.
func NewCapRefreshProvisioning_List(s *capnp.Segment, sz int32) (CapRefreshProvisioning_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapRefreshProvisioning](l), err
}

type CapRefreshProvisioning_refreshDeviceCert_Params capnp.Struct

// CapRefreshProvisioning_refreshDeviceCert_Params_TypeID is the unique identifier for the type CapRefreshProvisioning_refreshDeviceCert_Params.
const CapRefreshProvisioning_refreshDeviceCert_Params_TypeID = 0xe07174b85cc1d213

func NewCapRefreshProvisioning_refreshDeviceCert_Params(s *capnp.Segment) (CapRefreshProvisioning_refreshDeviceCert_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapRefreshProvisioning_refreshDeviceCert_Params(st), err
}

func NewRootCapRefreshProvisioning_refreshDeviceCert_Params(s *capnp.Segment) (CapRefreshProvisioning_refreshDeviceCert_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapRefreshProvisioning_refreshDeviceCert_Params(st), err
}

func ReadRootCapRefreshProvisioning_refreshDeviceCert_Params(msg *capnp.Message) (CapRefreshProvisioning_refreshDeviceCert_Params, error) {
	root, err := msg.Root()
	return CapRefreshProvisioning_refreshDeviceCert_Params(root.Struct()), err
}

func (s CapRefreshProvisioning_refreshDeviceCert_Params) String() string {
	str, _ := text.Marshal(0xe07174b85cc1d213, capnp.Struct(s))
	return str
}

func (s CapRefreshProvisioning_refreshDeviceCert_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapRefreshProvisioning_refreshDeviceCert_Params) DecodeFromPtr(p capnp.Ptr) CapRefreshProvisioning_refreshDeviceCert_Params {
	return CapRefreshProvisioning_refreshDeviceCert_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapRefreshProvisioning_refreshDeviceCert_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapRefreshProvisioning_refreshDeviceCert_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapRefreshProvisioning_refreshDeviceCert_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapRefreshProvisioning_refreshDeviceCert_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapRefreshProvisioning_refreshDeviceCert_Params) CertPEM() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapRefreshProvisioning_refreshDeviceCert_Params) HasCertPEM() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapRefreshProvisioning_refreshDeviceCert_Params) CertPEMBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapRefreshProvisioning_refreshDeviceCert_Params) SetCertPEM(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapRefreshProvisioning_refreshDeviceCert_Params_List is a list of CapRefreshProvisioning_refreshDeviceCert_Params.
type CapRefreshProvisioning_refreshDeviceCert_Params_List = capnp.StructList[CapRefreshProvisioning_refreshDeviceCert_Params]

// NewCapRefreshProvisioning_refreshDeviceCert_Params creates a new list of CapRefreshProvisioning_refreshDeviceCert_Params.
func NewCapRefreshProvisioning_refreshDeviceCert_Params_List(s *capnp.Segment, sz int32) (CapRefreshProvisioning_refreshDeviceCert_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapRefreshProvisioning_refreshDeviceCert_Params](l), err
}

// CapRefreshProvisioning_refreshDeviceCert_Params_Future is a wrapper for a CapRefreshProvisioning_refreshDeviceCert_Params promised by a client call.
type CapRefreshProvisioning_refreshDeviceCert_Params_Future struct{ *capnp.Future }

func (f CapRefreshProvisioning_refreshDeviceCert_Params_Future) Struct() (CapRefreshProvisioning_refreshDeviceCert_Params, error) {
	p, err := f.Future.Ptr()
	return CapRefreshProvisioning_refreshDeviceCert_Params(p.Struct()), err
}

type CapRefreshProvisioning_refreshDeviceCert_Results capnp.Struct

// CapRefreshProvisioning_refreshDeviceCert_Results_TypeID is the unique identifier for the type CapRefreshProvisioning_refreshDeviceCert_Results.
const CapRefreshProvisioning_refreshDeviceCert_Results_TypeID = 0xdb45b32e421221f7

func NewCapRefreshProvisioning_refreshDeviceCert_Results(s *capnp.Segment) (CapRefreshProvisioning_refreshDeviceCert_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapRefreshProvisioning_refreshDeviceCert_Results(st), err
}

func NewRootCapRefreshProvisioning_refreshDeviceCert_Results(s *capnp.Segment) (CapRefreshProvisioning_refreshDeviceCert_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapRefreshProvisioning_refreshDeviceCert_Results(st), err
}

func ReadRootCapRefreshProvisioning_refreshDeviceCert_Results(msg *capnp.Message) (CapRefreshProvisioning_refreshDeviceCert_Results, error) {
	root, err := msg.Root()
	return CapRefreshProvisioning_refreshDeviceCert_Results(root.Struct()), err
}

func (s CapRefreshProvisioning_refreshDeviceCert_Results) String() string {
	str, _ := text.Marshal(0xdb45b32e421221f7, capnp.Struct(s))
	return str
}

func (s CapRefreshProvisioning_refreshDeviceCert_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapRefreshProvisioning_refreshDeviceCert_Results) DecodeFromPtr(p capnp.Ptr) CapRefreshProvisioning_refreshDeviceCert_Results {
	return CapRefreshProvisioning_refreshDeviceCert_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapRefreshProvisioning_refreshDeviceCert_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapRefreshProvisioning_refreshDeviceCert_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapRefreshProvisioning_refreshDeviceCert_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapRefreshProvisioning_refreshDeviceCert_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapRefreshProvisioning_refreshDeviceCert_Results) Status() (ProvisionStatus, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ProvisionStatus(p.Struct()), err
}

func (s CapRefreshProvisioning_refreshDeviceCert_Results) HasStatus() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapRefreshProvisioning_refreshDeviceCert_Results) SetStatus(v ProvisionStatus) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStatus sets the status field to a newly
// allocated ProvisionStatus struct, preferring placement in s's segment.
func (s CapRefreshProvisioning_refreshDeviceCert_Results) NewStatus() (ProvisionStatus, error) {
	ss, err := NewProvisionStatus(capnp.Struct(s).Segment())
	if err != nil {
		return ProvisionStatus{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapRefreshProvisioning_refreshDeviceCert_Results_List is a list of CapRefreshProvisioning_refreshDeviceCert_Results.
type CapRefreshProvisioning_refreshDeviceCert_Results_List = capnp.StructList[CapRefreshProvisioning_refreshDeviceCert_Results]

// NewCapRefreshProvisioning_refreshDeviceCert_Results creates a new list of CapRefreshProvisioning_refreshDeviceCert_Results.
func NewCapRefreshProvisioning_refreshDeviceCert_Results_List(s *capnp.Segment, sz int32) (CapRefreshProvisioning_refreshDeviceCert_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapRefreshProvisioning_refreshDeviceCert_Results](l), err
}

// CapRefreshProvisioning_refreshDeviceCert_Results_Future is a wrapper for a CapRefreshProvisioning_refreshDeviceCert_Results promised by a client call.
type CapRefreshProvisioning_refreshDeviceCert_Results_Future struct{ *capnp.Future }

func (f CapRefreshProvisioning_refreshDeviceCert_Results_Future) Struct() (CapRefreshProvisioning_refreshDeviceCert_Results, error) {
	p, err := f.Future.Ptr()
	return CapRefreshProvisioning_refreshDeviceCert_Results(p.Struct()), err
}
func (p CapRefreshProvisioning_refreshDeviceCert_Results_Future) Status() ProvisionStatus_Future {
	return ProvisionStatus_Future{Future: p.Future.Field(0, nil)}
}

const schema_9579ece206ee504b = "x\xda\xacW}l\x14[\x15?g\xee\xcc\xcen\xb7" +
	"\xd0^\xa7$\xd2\xe7{\x8d\xcf\xbe\x08\x98BKi\xa4" +
	"\x0d\xa4\xdd\x96\x86\xf0Q\x98\xd9\x05\x83\x84F\xa7\xbbC" +
	"Y\xd3m\xb7;\xb3\x08&\x88\x8abZ\xad&\x15\xa2" +
	"bDCD\x85\x18\x95\"\x08\xd4\x12\x04\xaaH$\x01" +
	"\xa2\x08\x11\x14+\xa8%|$\x04Cb0\xf3rg" +
	":\xd3\xd9\xddn[J\xff\xdb\xdc\xf9\xdd\xdf9\xbf\xf3" +
	"u\xcfV\x1e\xe6\x1b\xf8\xaa9b\x108\xe5\x0b\x82\xcf" +
	"\xec\xf9\xde\xed\xcb\xc6\xc8\xd7\xf7\x01\xadD\x00^\x04\xa8" +
	"\x8e\x0bK9\xe0\xcd\x93\xdf\x09\xc5\x1e\xb5~\xfe\xcb\x9e" +
	"/\xaa\x10f_z\x97\xf5\x9f\xbf8\xf0\xac\x17\xe8\"" +
	"\x04\x10\x90}j\x15\x1a9@)-\xd4\x03\x9akW" +
	"|\xe4\xe2\x8bO-\xfb\x1a\xd0R\xde\\'?\xf5\x8d" +
	"<\xde}\x10\x00\xab\xbf+\x1cG\xe9\x84 \x02D~" +
	"&\x10\x8c\x9c\x118\x040o|\xbb\xfc\xad5\xdf\xbf" +
	"\xf4\x0d\xdb\x94MxJX\xc4\x08\xafY\x84\xc9=\xc6" +
	"\xdb\x7fI\x0a\x07\x80\x96\x92\x0cB\xf4\xf5\xa24\xdf'" +
	"\x02H\xf3|\xab\xa5f\xf6\xcb\xac\xf9\xe1\x9e\x07\xcf." +
	"\xff\xfc\xc79\xe6+|\xfdhc\"\x0d>\x82\x91\xf5" +
	">\xcb\xfc\x92\xe55\xef\xcc\x9d/\xfe4\x07\xdf\xec;" +
	"\x8eR\xab\x85\xdf\xc2\xf01\x1b\x7f>Z}\xf5\x99\xa8" +
	"\x0f\xe4x\xa3\xfa\xc2(\xa5-o\xba}\xbf\x97Pd" +
	"\xde\xbc#>-:\xda\xc7\xff\xda+n\xd4\xb7\x94\x89" +
	"C\x91\x89\xfb\xdf\xbd\xaf\xfc\xab\xf8V \x03\xf0\x9e\xb8" +
	"\x95\x01B\x16\xa0<\xf6\xe7\x8a\xd3\x17\xee\x0e\x02\xadb" +
	"\x00\xc2\x00i\xb1\x9f\x01\x0e\x8a\xbf\x004\x7ft\xfbc" +
	"\x9f\xd8w\xb6\xf2B\x8eC\xb5\xfe^\x94\x14?s\xa8" +
	"\xc5\xbfZ\xfa\"\xfbe\xfen[\xec\xec\xcb\x95\xc6\xa5" +
	"1:\xcb^\xdc\x7f\x88\xd1\xf5\xf8\x99\xbd\xc1\x1f\\\xfc" +
	"\xdb\xfc\xa1\xab\xc39t\xc7\xfc_Bi\x88\x91T\x9f" +
	"\xf5\x8b(u\x07\x18\xdf\xfa]\xd1\x9f\x1c\x18\x14\xaf\xe4" +
	"\x84\xef\x93\x81#c\x98HG\x80`dW\xc0\x0a\xdf" +
	"AQ\x17\xb7l\xae\xbd\xe5-\x9ft\xc0*\x9f\xbe\x00" +
	"\xb3\xff\xf2\xc3\x1fh\\|\xb2\xf9\xaf^\x07O\x04\xac" +
	"\x80\\\xb3\x00-\xbd7B\x0f\xb7&\xee{J\xf3\x09" +
	"\xfb\xce\x9b\xd2\xcd\xdfn;ct\xdf\xf7^\x1d\x0d\x84" +
	"\xd9U\xa1\x80]]\x14\x90\x97w\xcc\xeb\x18\xf1\\}" +
	"\xaf\xa0\x8e]=\x12\xfa{h\xe8\xab\xad\xff\xf4\xa6\xe1" +
	"\xed\x826v\xb5\xd6\xba\xfax\xff\x82\xd3\xff\xbe\xbe\xe9" +
	"\x89\xd7\xefD\xc1Z+n\x16@\x1a\x1e\xed\x89|\xab" +
	"\xef\xb9\x17p\xcc\x06\x0c[\x80\x9b\xcf\x97\x8b\xbf\xfc#" +
	"\xf7\xc2\x0bxX`)\xff\xbf\x05xz\x98\xce\x1b\xfc" +
	"\xe8\xae\xff\x02-\xc5\xf1P\x0a\x9c\xe5K\xf0]\x94*" +
	"\x82,\x97\x0b\x83\x9f\x054k\xf7\xbf5\xfa\x88|\xfc" +
	"\x95\x97\xad/X\xc7\xd8\x8e\x06\x19[\xec\xf8\x7f6\x8e" +
	"\x9c\xecy\x05J)z\xe9X\xffU\xff!\x18F\xe9" +
	"\x1e\xa3\xab\xbe\x13\xfc&B\x85\xb9#\xdd\xa6&\xe3K" +
	"d1\xd5\xb53\xae\xc7\xbb:\xe3\x9d\xed\x8b\xa3j\xb2" +
	"3Y\xd7\xa4&[\xd4N\xb5]\x93\xbd\xdf\xd4Xl" +
	"\xe3\xc6\xc6\x88\x16Mi\x86^\x1e\xd6\xca\xf4t\x87\xa1" +
	"\xbb<\xfe\xe9\xf2\xb4k\x86\xacu\xc6\xe2\x9d\xeda\xad" +
	";\xad\xe9\x86^.\xab)5\x81Sq\xc9Y\xa7a" +
	"m{J\xd3wx\x8fm&\x1d\x14\x9e\xf0\x00<\x02" +
	"\xd09k\x01\x94B\x82\xca\x0794\xa3\x1dq\xad\xd3" +
	"X\xb3\x0a\x00\xb0\x108,\x04t\x8d\x0a\xb9F\xa3j" +
	"r\x83\x9a\xd0\xc6\xfct\x0c\x151\x84\x8c8\xc6\x00\x14" +
	"\xcf\x99\x96;\xddi\x0d\x1dX\xbdM\xf4\xa6a\x96\xd5" +
	"\"&\xc8\xabg\xeb\x98\x9e\x05\x1c\x9a]]m\x16\x12" +
	"\x88\xa1\xe3\\@\x99 \x16\x8f\xd7\x15 ;\x9cLa" +
	"\xd3\x84a\x04\x90\x11\x15\x9e\x08\x00n\x8f\xa1\xd3\xa7\x94" +
	"\xf6\x03G\xe7\x88f\xca\xbe\xb8\x0a\xb5\x9d\xf1\xa8\xd6\xa4" +
	"\xa5\xd0h@\x19'\xb5\x97\xf4\x1cE\xb4\x14\xbb\xb8A" +
	"M\xa0\x96\x11\xce\xcf\x98\x0e\x0c\x8a2\x828Y\x8a2" +
	"D\xe4M\xd1\xf6\x94\x86\x0e,;E\xfcTU\x87\x8c" +
	"R)\xb4\xc2\xe2\xb4#:]N\x95\x01\xe0h\x8b\x88" +
	"\xe8\x8e<tF\x04\x0d\x9d\x03\x8e\xae\x14\x91s_S" +
	"t\xe6\x0b\xadb\xdf*D\xe6\x9fU\x0e\xe8\xd4C\x99" +
	"\xe5I\x03\xe6-.\xe7\xd3\x04\xa22\x131\xfd\xe2K" +
	"\xb2\xc8;\x05_.\x97\xa9\xd9\xd5\xe7\xed\xa6\x98\x95\xf8" +
	"\x89\xbb\xe9M\xc6AX\xd3\xd3\x1d\xc4\x98\xd0.\xab\xfa" +
	"\xd4\x18\x90\xd9u\x8b\xde\x1d\x7fYE\x1f\xc8S\xf4\x19" +
	"-m}\xd4\xd3m\x89x\xc6\x91\x1b\x07{>)\x85" +
	"\xae?\xcd\xcc\x9fU\x04\x15\x99C\x8aX\x82\xec\xb0%" +
	"\x0c\xa0\xac'\xa8l\xe1\x90r\\\x09r\x00t3;" +
	"\xdcDP\xf9t\x9e\x88%b5v\x0f\xa3\xe1\x9e%" +
	"\xd3m\xeb\xb4\xddr3`\xcbt\xe6\xd4\xc4\x82\xbc]" +
	"\xec,\x15\xe8\xac\x03\x94\xde\x04\x8eR\xd1tTs\xd9" +
	"\xb2\xb3\xbby6\x029Qf\xeb\x00\x14?A\xa5\x84" +
	"\xc3z\xddP\x8d\xb4\x9e\x95\xcd\xe2)\xc5\xe7\x96\x95%" +
	"\xbd\xd8\x92\xee\xac\x9b\xe8,\xbf\xb4;\x05\x1c\x8d\xb3N" +
	"u\xb65t\x16\x05\xda\xfa9\xe0\xe8f\xd6\xa9\xce\xda" +
	"\x81\xce\xaa@\xd7\x1c\x01\x8e6\x8bH\xdcm\x19\x9dm" +
	"\x8e\xd6\x1e\x02\x8e\xd6\x88\xa63\xbe\xa1\xcc\x1a\xe0\x0dh" +
	":=\x05\xf5v\x10\x1a\xd0l\xd7\x8c\x10;\xc5\x9dZ" +
	"\xcc\x0a\x8d\xa8[P\xa7\x17\xd0\x89\x18a\xc7S\x8c\xd4" +
	"\xb1\x09\x98\x15\x031{\x00\x0e\xe4\x1b0\xaf\xfd\xea\xe6" +
	"$\xfcM^]\xfft\xdf\xa4\xc5\xces\xe3\xbc6\xb3" +
	"PM\xaf3\xa4Bv\x1ac\x19K\x0bI\xe8\xb3\xa2" +
	"\xc4\x190\x1e!\x8d\xe3B\xf6F\xb5\x94!7\xe7\x8e" +
	"\x82\x99\xce\xf5p\xbd6\xf3\xe5-'\x10,\x0db\xc7" +
	",\x8d\xeb\x99\xaf~a[\x13d\x94\xe1\xbb\xe3Q\x14" +
	"\xa3j\x12\xe9\xf8\x9fK@\xa430\x9c[\xfd\xd34" +
	"\xec\xfem\x9b\x91\xe1\xdc\\\xb8v'7\xeb\xfe\xbd\xcb" +
	"2Kr\xcd\xda{\xa7\x98\xd2\x0c6=\xfd.\xebB" +
	"\x96\xcd\x05\x04\x95e\x9e\xc7\xae\x8a\xbdk\x95\x04\x95\x15" +
	"y\xde5w7\xf5\xbck\x93\x17\xee44\xd7\xcb\x93" +
	"n$\x93M\x9a\x09\xd6;\x97:\xc2&\x05\xeaL\xf6" +
	"\x87\\\xe6S\x8c\xf9W\x04\x95\x0b\x1e\xd9CL\xf6o" +
	"\x08*W<o\xfcp\x0a@\xb9LP\xb9\xce!\x92" +
	"\x12$\x00\xf4\x1ak\xe0+\x04\x95?qHyR\x82" +
	"<\x00\xbd\xc1n_'\xa8\xdc\xe5\x90\xfa\xb0\x04\x05D" +
	"z\x87\xd9\xb9MPy\xc0!\x15\xf8\x12\xf4\x01\xd0\x7f" +
	"\xb4\x01(\xf7\x09*\x8f\xf3\x847\xaa6YS\xc1\xbb" +
	"\"\xd8\xf2\x9b4(\xcb\x98\x17{\x93\xf6\x82\x85\x08\x1c" +
	"b\x9e\xf5\"\xa5\x19\xa9\xdd\x11-\xcal\xf0\xc0U\xf1" +
	"\xc5s\xc1\xed\xddM \xc6\x13\x9a\x83}?\x00\x00\xff" +
	"\xff\x95\xd4\x95\xcf"

func init() {
	schemas.Register(schema_9579ece206ee504b,
		0x838ce274c4d89b89,
		0x847e5dea644198b3,
		0x8aefb2c2be92348a,
		0x8b345ff4c2233c4a,
		0x8ec39d491b2497d1,
		0x940570d71d747d70,
		0xa6aec4efe47da035,
		0xa807190e1e35382f,
		0xb27307efca3363be,
		0xb7048da50fee071e,
		0xb709d610e685ddfa,
		0xbbdcc0b62dd56424,
		0xc030b983562bd8a4,
		0xc3743df7b9645cc6,
		0xc5cabd19dec29fbb,
		0xc807bb94a763784c,
		0xd639555807730795,
		0xdb45b32e421221f7,
		0xe06d5ae541d18a4d,
		0xe07174b85cc1d213,
		0xe26c156c3850092a,
		0xe35d87bd41df41a2,
		0xed54d0e7b62886ec,
		0xf28d935389e9c513,
		0xf402ccb00738f2d2,
		0xf57827bb15119eee,
		0xfc3703eae91b8639,
		0xfc89b3e24fe8aa64)
}

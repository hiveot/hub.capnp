// Code generated by capnpc-go. DO NOT EDIT.

package hubapi

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

// Constants defined in State.capnp.
const (
	StateServiceName   = "state"
	CapNameClientState = "capClientState"
)

type CapState capnp.Client

// CapState_TypeID is the unique identifier for the type CapState.
const CapState_TypeID = 0xd11db16b4eb22eec

func (c CapState) CapClientState(ctx context.Context, params func(CapState_capClientState_Params) error) (CapState_capClientState_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd11db16b4eb22eec,
			MethodID:      0,
			InterfaceName: "hubapi/State.capnp:CapState",
			MethodName:    "capClientState",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapState_capClientState_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapState_capClientState_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapState) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapState) AddRef() CapState {
	return CapState(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapState) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapState) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapState) DecodeFromPtr(p capnp.Ptr) CapState {
	return CapState(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapState) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapState) IsSame(other CapState) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapState) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapState) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapState_Server is a CapState with a local implementation.
type CapState_Server interface {
	CapClientState(context.Context, CapState_capClientState) error
}

// CapState_NewServer creates a new Server from an implementation of CapState_Server.
func CapState_NewServer(s CapState_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapState_Methods(nil, s), s, c)
}

// CapState_ServerToClient creates a new Client from an implementation of CapState_Server.
// The caller is responsible for calling Release on the returned Client.
func CapState_ServerToClient(s CapState_Server) CapState {
	return CapState(capnp.NewClient(CapState_NewServer(s)))
}

// CapState_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapState_Methods(methods []server.Method, s CapState_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd11db16b4eb22eec,
			MethodID:      0,
			InterfaceName: "hubapi/State.capnp:CapState",
			MethodName:    "capClientState",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapClientState(ctx, CapState_capClientState{call})
		},
	})

	return methods
}

// CapState_capClientState holds the state for a server call to CapState.capClientState.
// See server.Call for documentation.
type CapState_capClientState struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapState_capClientState) Args() CapState_capClientState_Params {
	return CapState_capClientState_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapState_capClientState) AllocResults() (CapState_capClientState_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapState_capClientState_Results(r), err
}

// CapState_List is a list of CapState.
type CapState_List = capnp.CapList[CapState]

// NewCapState creates a new list of CapState.
func NewCapState_List(s *capnp.Segment, sz int32) (CapState_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapState](l), err
}

type CapState_capClientState_Params capnp.Struct

// CapState_capClientState_Params_TypeID is the unique identifier for the type CapState_capClientState_Params.
const CapState_capClientState_Params_TypeID = 0xebba2a63a6381c2f

func NewCapState_capClientState_Params(s *capnp.Segment) (CapState_capClientState_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapState_capClientState_Params(st), err
}

func NewRootCapState_capClientState_Params(s *capnp.Segment) (CapState_capClientState_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapState_capClientState_Params(st), err
}

func ReadRootCapState_capClientState_Params(msg *capnp.Message) (CapState_capClientState_Params, error) {
	root, err := msg.Root()
	return CapState_capClientState_Params(root.Struct()), err
}

func (s CapState_capClientState_Params) String() string {
	str, _ := text.Marshal(0xebba2a63a6381c2f, capnp.Struct(s))
	return str
}

func (s CapState_capClientState_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapState_capClientState_Params) DecodeFromPtr(p capnp.Ptr) CapState_capClientState_Params {
	return CapState_capClientState_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapState_capClientState_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapState_capClientState_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapState_capClientState_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapState_capClientState_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapState_capClientState_Params) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapState_capClientState_Params) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapState_capClientState_Params) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapState_capClientState_Params) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapState_capClientState_Params) AppID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CapState_capClientState_Params) HasAppID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapState_capClientState_Params) AppIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CapState_capClientState_Params) SetAppID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CapState_capClientState_Params_List is a list of CapState_capClientState_Params.
type CapState_capClientState_Params_List = capnp.StructList[CapState_capClientState_Params]

// NewCapState_capClientState_Params creates a new list of CapState_capClientState_Params.
func NewCapState_capClientState_Params_List(s *capnp.Segment, sz int32) (CapState_capClientState_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapState_capClientState_Params](l), err
}

// CapState_capClientState_Params_Future is a wrapper for a CapState_capClientState_Params promised by a client call.
type CapState_capClientState_Params_Future struct{ *capnp.Future }

func (f CapState_capClientState_Params_Future) Struct() (CapState_capClientState_Params, error) {
	p, err := f.Future.Ptr()
	return CapState_capClientState_Params(p.Struct()), err
}

type CapState_capClientState_Results capnp.Struct

// CapState_capClientState_Results_TypeID is the unique identifier for the type CapState_capClientState_Results.
const CapState_capClientState_Results_TypeID = 0x9592f3c8d197afde

func NewCapState_capClientState_Results(s *capnp.Segment) (CapState_capClientState_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapState_capClientState_Results(st), err
}

func NewRootCapState_capClientState_Results(s *capnp.Segment) (CapState_capClientState_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapState_capClientState_Results(st), err
}

func ReadRootCapState_capClientState_Results(msg *capnp.Message) (CapState_capClientState_Results, error) {
	root, err := msg.Root()
	return CapState_capClientState_Results(root.Struct()), err
}

func (s CapState_capClientState_Results) String() string {
	str, _ := text.Marshal(0x9592f3c8d197afde, capnp.Struct(s))
	return str
}

func (s CapState_capClientState_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapState_capClientState_Results) DecodeFromPtr(p capnp.Ptr) CapState_capClientState_Results {
	return CapState_capClientState_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapState_capClientState_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapState_capClientState_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapState_capClientState_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapState_capClientState_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapState_capClientState_Results) Cap() CapClientState {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapClientState(p.Interface().Client())
}

func (s CapState_capClientState_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapState_capClientState_Results) SetCap(v CapClientState) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapState_capClientState_Results_List is a list of CapState_capClientState_Results.
type CapState_capClientState_Results_List = capnp.StructList[CapState_capClientState_Results]

// NewCapState_capClientState_Results creates a new list of CapState_capClientState_Results.
func NewCapState_capClientState_Results_List(s *capnp.Segment, sz int32) (CapState_capClientState_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapState_capClientState_Results](l), err
}

// CapState_capClientState_Results_Future is a wrapper for a CapState_capClientState_Results promised by a client call.
type CapState_capClientState_Results_Future struct{ *capnp.Future }

func (f CapState_capClientState_Results_Future) Struct() (CapState_capClientState_Results, error) {
	p, err := f.Future.Ptr()
	return CapState_capClientState_Results(p.Struct()), err
}
func (p CapState_capClientState_Results_Future) Cap() CapClientState {
	return CapClientState(p.Future.Field(0, nil).Client())
}

type CapClientState capnp.Client

// CapClientState_TypeID is the unique identifier for the type CapClientState.
const CapClientState_TypeID = 0xf78da3a18a6bdd8f

func (c CapClientState) Delete(ctx context.Context, params func(CapClientState_delete_Params) error) (CapClientState_delete_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf78da3a18a6bdd8f,
			MethodID:      0,
			InterfaceName: "hubapi/State.capnp:CapClientState",
			MethodName:    "delete",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapClientState_delete_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapClientState_delete_Results_Future{Future: ans.Future()}, release
}
func (c CapClientState) Get(ctx context.Context, params func(CapClientState_get_Params) error) (CapClientState_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf78da3a18a6bdd8f,
			MethodID:      1,
			InterfaceName: "hubapi/State.capnp:CapClientState",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapClientState_get_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapClientState_get_Results_Future{Future: ans.Future()}, release
}
func (c CapClientState) GetMultiple(ctx context.Context, params func(CapClientState_getMultiple_Params) error) (CapClientState_getMultiple_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf78da3a18a6bdd8f,
			MethodID:      2,
			InterfaceName: "hubapi/State.capnp:CapClientState",
			MethodName:    "getMultiple",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapClientState_getMultiple_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapClientState_getMultiple_Results_Future{Future: ans.Future()}, release
}
func (c CapClientState) Cursor(ctx context.Context, params func(CapClientState_cursor_Params) error) (CapClientState_cursor_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf78da3a18a6bdd8f,
			MethodID:      3,
			InterfaceName: "hubapi/State.capnp:CapClientState",
			MethodName:    "cursor",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapClientState_cursor_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapClientState_cursor_Results_Future{Future: ans.Future()}, release
}
func (c CapClientState) Set(ctx context.Context, params func(CapClientState_set_Params) error) (CapClientState_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf78da3a18a6bdd8f,
			MethodID:      4,
			InterfaceName: "hubapi/State.capnp:CapClientState",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapClientState_set_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapClientState_set_Results_Future{Future: ans.Future()}, release
}
func (c CapClientState) SetMultiple(ctx context.Context, params func(CapClientState_setMultiple_Params) error) (CapClientState_setMultiple_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf78da3a18a6bdd8f,
			MethodID:      5,
			InterfaceName: "hubapi/State.capnp:CapClientState",
			MethodName:    "setMultiple",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapClientState_setMultiple_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapClientState_setMultiple_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapClientState) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapClientState) AddRef() CapClientState {
	return CapClientState(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapClientState) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapClientState) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapClientState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapClientState) DecodeFromPtr(p capnp.Ptr) CapClientState {
	return CapClientState(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapClientState) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapClientState) IsSame(other CapClientState) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapClientState) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapClientState) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CapClientState_Server is a CapClientState with a local implementation.
type CapClientState_Server interface {
	Delete(context.Context, CapClientState_delete) error

	Get(context.Context, CapClientState_get) error

	GetMultiple(context.Context, CapClientState_getMultiple) error

	Cursor(context.Context, CapClientState_cursor) error

	Set(context.Context, CapClientState_set) error

	SetMultiple(context.Context, CapClientState_setMultiple) error
}

// CapClientState_NewServer creates a new Server from an implementation of CapClientState_Server.
func CapClientState_NewServer(s CapClientState_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapClientState_Methods(nil, s), s, c)
}

// CapClientState_ServerToClient creates a new Client from an implementation of CapClientState_Server.
// The caller is responsible for calling Release on the returned Client.
func CapClientState_ServerToClient(s CapClientState_Server) CapClientState {
	return CapClientState(capnp.NewClient(CapClientState_NewServer(s)))
}

// CapClientState_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapClientState_Methods(methods []server.Method, s CapClientState_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf78da3a18a6bdd8f,
			MethodID:      0,
			InterfaceName: "hubapi/State.capnp:CapClientState",
			MethodName:    "delete",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Delete(ctx, CapClientState_delete{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf78da3a18a6bdd8f,
			MethodID:      1,
			InterfaceName: "hubapi/State.capnp:CapClientState",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, CapClientState_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf78da3a18a6bdd8f,
			MethodID:      2,
			InterfaceName: "hubapi/State.capnp:CapClientState",
			MethodName:    "getMultiple",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetMultiple(ctx, CapClientState_getMultiple{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf78da3a18a6bdd8f,
			MethodID:      3,
			InterfaceName: "hubapi/State.capnp:CapClientState",
			MethodName:    "cursor",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cursor(ctx, CapClientState_cursor{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf78da3a18a6bdd8f,
			MethodID:      4,
			InterfaceName: "hubapi/State.capnp:CapClientState",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, CapClientState_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf78da3a18a6bdd8f,
			MethodID:      5,
			InterfaceName: "hubapi/State.capnp:CapClientState",
			MethodName:    "setMultiple",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetMultiple(ctx, CapClientState_setMultiple{call})
		},
	})

	return methods
}

// CapClientState_delete holds the state for a server call to CapClientState.delete.
// See server.Call for documentation.
type CapClientState_delete struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapClientState_delete) Args() CapClientState_delete_Params {
	return CapClientState_delete_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapClientState_delete) AllocResults() (CapClientState_delete_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapClientState_delete_Results(r), err
}

// CapClientState_get holds the state for a server call to CapClientState.get.
// See server.Call for documentation.
type CapClientState_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapClientState_get) Args() CapClientState_get_Params {
	return CapClientState_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapClientState_get) AllocResults() (CapClientState_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_get_Results(r), err
}

// CapClientState_getMultiple holds the state for a server call to CapClientState.getMultiple.
// See server.Call for documentation.
type CapClientState_getMultiple struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapClientState_getMultiple) Args() CapClientState_getMultiple_Params {
	return CapClientState_getMultiple_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapClientState_getMultiple) AllocResults() (CapClientState_getMultiple_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_getMultiple_Results(r), err
}

// CapClientState_cursor holds the state for a server call to CapClientState.cursor.
// See server.Call for documentation.
type CapClientState_cursor struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapClientState_cursor) Args() CapClientState_cursor_Params {
	return CapClientState_cursor_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapClientState_cursor) AllocResults() (CapClientState_cursor_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_cursor_Results(r), err
}

// CapClientState_set holds the state for a server call to CapClientState.set.
// See server.Call for documentation.
type CapClientState_set struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapClientState_set) Args() CapClientState_set_Params {
	return CapClientState_set_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapClientState_set) AllocResults() (CapClientState_set_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapClientState_set_Results(r), err
}

// CapClientState_setMultiple holds the state for a server call to CapClientState.setMultiple.
// See server.Call for documentation.
type CapClientState_setMultiple struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapClientState_setMultiple) Args() CapClientState_setMultiple_Params {
	return CapClientState_setMultiple_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapClientState_setMultiple) AllocResults() (CapClientState_setMultiple_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapClientState_setMultiple_Results(r), err
}

// CapClientState_List is a list of CapClientState.
type CapClientState_List = capnp.CapList[CapClientState]

// NewCapClientState creates a new list of CapClientState.
func NewCapClientState_List(s *capnp.Segment, sz int32) (CapClientState_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapClientState](l), err
}

type CapClientState_delete_Params capnp.Struct

// CapClientState_delete_Params_TypeID is the unique identifier for the type CapClientState_delete_Params.
const CapClientState_delete_Params_TypeID = 0x840787d39c20c911

func NewCapClientState_delete_Params(s *capnp.Segment) (CapClientState_delete_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_delete_Params(st), err
}

func NewRootCapClientState_delete_Params(s *capnp.Segment) (CapClientState_delete_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_delete_Params(st), err
}

func ReadRootCapClientState_delete_Params(msg *capnp.Message) (CapClientState_delete_Params, error) {
	root, err := msg.Root()
	return CapClientState_delete_Params(root.Struct()), err
}

func (s CapClientState_delete_Params) String() string {
	str, _ := text.Marshal(0x840787d39c20c911, capnp.Struct(s))
	return str
}

func (s CapClientState_delete_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapClientState_delete_Params) DecodeFromPtr(p capnp.Ptr) CapClientState_delete_Params {
	return CapClientState_delete_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapClientState_delete_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapClientState_delete_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapClientState_delete_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapClientState_delete_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapClientState_delete_Params) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapClientState_delete_Params) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapClientState_delete_Params) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapClientState_delete_Params) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapClientState_delete_Params_List is a list of CapClientState_delete_Params.
type CapClientState_delete_Params_List = capnp.StructList[CapClientState_delete_Params]

// NewCapClientState_delete_Params creates a new list of CapClientState_delete_Params.
func NewCapClientState_delete_Params_List(s *capnp.Segment, sz int32) (CapClientState_delete_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapClientState_delete_Params](l), err
}

// CapClientState_delete_Params_Future is a wrapper for a CapClientState_delete_Params promised by a client call.
type CapClientState_delete_Params_Future struct{ *capnp.Future }

func (f CapClientState_delete_Params_Future) Struct() (CapClientState_delete_Params, error) {
	p, err := f.Future.Ptr()
	return CapClientState_delete_Params(p.Struct()), err
}

type CapClientState_delete_Results capnp.Struct

// CapClientState_delete_Results_TypeID is the unique identifier for the type CapClientState_delete_Results.
const CapClientState_delete_Results_TypeID = 0xe31782358d7fbadb

func NewCapClientState_delete_Results(s *capnp.Segment) (CapClientState_delete_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapClientState_delete_Results(st), err
}

func NewRootCapClientState_delete_Results(s *capnp.Segment) (CapClientState_delete_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapClientState_delete_Results(st), err
}

func ReadRootCapClientState_delete_Results(msg *capnp.Message) (CapClientState_delete_Results, error) {
	root, err := msg.Root()
	return CapClientState_delete_Results(root.Struct()), err
}

func (s CapClientState_delete_Results) String() string {
	str, _ := text.Marshal(0xe31782358d7fbadb, capnp.Struct(s))
	return str
}

func (s CapClientState_delete_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapClientState_delete_Results) DecodeFromPtr(p capnp.Ptr) CapClientState_delete_Results {
	return CapClientState_delete_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapClientState_delete_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapClientState_delete_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapClientState_delete_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapClientState_delete_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapClientState_delete_Results_List is a list of CapClientState_delete_Results.
type CapClientState_delete_Results_List = capnp.StructList[CapClientState_delete_Results]

// NewCapClientState_delete_Results creates a new list of CapClientState_delete_Results.
func NewCapClientState_delete_Results_List(s *capnp.Segment, sz int32) (CapClientState_delete_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapClientState_delete_Results](l), err
}

// CapClientState_delete_Results_Future is a wrapper for a CapClientState_delete_Results promised by a client call.
type CapClientState_delete_Results_Future struct{ *capnp.Future }

func (f CapClientState_delete_Results_Future) Struct() (CapClientState_delete_Results, error) {
	p, err := f.Future.Ptr()
	return CapClientState_delete_Results(p.Struct()), err
}

type CapClientState_get_Params capnp.Struct

// CapClientState_get_Params_TypeID is the unique identifier for the type CapClientState_get_Params.
const CapClientState_get_Params_TypeID = 0xb1035539ef0fdf36

func NewCapClientState_get_Params(s *capnp.Segment) (CapClientState_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_get_Params(st), err
}

func NewRootCapClientState_get_Params(s *capnp.Segment) (CapClientState_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_get_Params(st), err
}

func ReadRootCapClientState_get_Params(msg *capnp.Message) (CapClientState_get_Params, error) {
	root, err := msg.Root()
	return CapClientState_get_Params(root.Struct()), err
}

func (s CapClientState_get_Params) String() string {
	str, _ := text.Marshal(0xb1035539ef0fdf36, capnp.Struct(s))
	return str
}

func (s CapClientState_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapClientState_get_Params) DecodeFromPtr(p capnp.Ptr) CapClientState_get_Params {
	return CapClientState_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapClientState_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapClientState_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapClientState_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapClientState_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapClientState_get_Params) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapClientState_get_Params) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapClientState_get_Params) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapClientState_get_Params) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapClientState_get_Params_List is a list of CapClientState_get_Params.
type CapClientState_get_Params_List = capnp.StructList[CapClientState_get_Params]

// NewCapClientState_get_Params creates a new list of CapClientState_get_Params.
func NewCapClientState_get_Params_List(s *capnp.Segment, sz int32) (CapClientState_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapClientState_get_Params](l), err
}

// CapClientState_get_Params_Future is a wrapper for a CapClientState_get_Params promised by a client call.
type CapClientState_get_Params_Future struct{ *capnp.Future }

func (f CapClientState_get_Params_Future) Struct() (CapClientState_get_Params, error) {
	p, err := f.Future.Ptr()
	return CapClientState_get_Params(p.Struct()), err
}

type CapClientState_get_Results capnp.Struct

// CapClientState_get_Results_TypeID is the unique identifier for the type CapClientState_get_Results.
const CapClientState_get_Results_TypeID = 0xa1b5065fb07e3b9f

func NewCapClientState_get_Results(s *capnp.Segment) (CapClientState_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_get_Results(st), err
}

func NewRootCapClientState_get_Results(s *capnp.Segment) (CapClientState_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_get_Results(st), err
}

func ReadRootCapClientState_get_Results(msg *capnp.Message) (CapClientState_get_Results, error) {
	root, err := msg.Root()
	return CapClientState_get_Results(root.Struct()), err
}

func (s CapClientState_get_Results) String() string {
	str, _ := text.Marshal(0xa1b5065fb07e3b9f, capnp.Struct(s))
	return str
}

func (s CapClientState_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapClientState_get_Results) DecodeFromPtr(p capnp.Ptr) CapClientState_get_Results {
	return CapClientState_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapClientState_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapClientState_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapClientState_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapClientState_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapClientState_get_Results) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s CapClientState_get_Results) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapClientState_get_Results) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// CapClientState_get_Results_List is a list of CapClientState_get_Results.
type CapClientState_get_Results_List = capnp.StructList[CapClientState_get_Results]

// NewCapClientState_get_Results creates a new list of CapClientState_get_Results.
func NewCapClientState_get_Results_List(s *capnp.Segment, sz int32) (CapClientState_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapClientState_get_Results](l), err
}

// CapClientState_get_Results_Future is a wrapper for a CapClientState_get_Results promised by a client call.
type CapClientState_get_Results_Future struct{ *capnp.Future }

func (f CapClientState_get_Results_Future) Struct() (CapClientState_get_Results, error) {
	p, err := f.Future.Ptr()
	return CapClientState_get_Results(p.Struct()), err
}

type CapClientState_getMultiple_Params capnp.Struct

// CapClientState_getMultiple_Params_TypeID is the unique identifier for the type CapClientState_getMultiple_Params.
const CapClientState_getMultiple_Params_TypeID = 0xc95153c3f6bd2763

func NewCapClientState_getMultiple_Params(s *capnp.Segment) (CapClientState_getMultiple_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_getMultiple_Params(st), err
}

func NewRootCapClientState_getMultiple_Params(s *capnp.Segment) (CapClientState_getMultiple_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_getMultiple_Params(st), err
}

func ReadRootCapClientState_getMultiple_Params(msg *capnp.Message) (CapClientState_getMultiple_Params, error) {
	root, err := msg.Root()
	return CapClientState_getMultiple_Params(root.Struct()), err
}

func (s CapClientState_getMultiple_Params) String() string {
	str, _ := text.Marshal(0xc95153c3f6bd2763, capnp.Struct(s))
	return str
}

func (s CapClientState_getMultiple_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapClientState_getMultiple_Params) DecodeFromPtr(p capnp.Ptr) CapClientState_getMultiple_Params {
	return CapClientState_getMultiple_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapClientState_getMultiple_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapClientState_getMultiple_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapClientState_getMultiple_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapClientState_getMultiple_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapClientState_getMultiple_Params) Keys() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s CapClientState_getMultiple_Params) HasKeys() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapClientState_getMultiple_Params) SetKeys(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewKeys sets the keys field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s CapClientState_getMultiple_Params) NewKeys(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapClientState_getMultiple_Params_List is a list of CapClientState_getMultiple_Params.
type CapClientState_getMultiple_Params_List = capnp.StructList[CapClientState_getMultiple_Params]

// NewCapClientState_getMultiple_Params creates a new list of CapClientState_getMultiple_Params.
func NewCapClientState_getMultiple_Params_List(s *capnp.Segment, sz int32) (CapClientState_getMultiple_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapClientState_getMultiple_Params](l), err
}

// CapClientState_getMultiple_Params_Future is a wrapper for a CapClientState_getMultiple_Params promised by a client call.
type CapClientState_getMultiple_Params_Future struct{ *capnp.Future }

func (f CapClientState_getMultiple_Params_Future) Struct() (CapClientState_getMultiple_Params, error) {
	p, err := f.Future.Ptr()
	return CapClientState_getMultiple_Params(p.Struct()), err
}

type CapClientState_getMultiple_Results capnp.Struct

// CapClientState_getMultiple_Results_TypeID is the unique identifier for the type CapClientState_getMultiple_Results.
const CapClientState_getMultiple_Results_TypeID = 0xb099e855eea7fd92

func NewCapClientState_getMultiple_Results(s *capnp.Segment) (CapClientState_getMultiple_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_getMultiple_Results(st), err
}

func NewRootCapClientState_getMultiple_Results(s *capnp.Segment) (CapClientState_getMultiple_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_getMultiple_Results(st), err
}

func ReadRootCapClientState_getMultiple_Results(msg *capnp.Message) (CapClientState_getMultiple_Results, error) {
	root, err := msg.Root()
	return CapClientState_getMultiple_Results(root.Struct()), err
}

func (s CapClientState_getMultiple_Results) String() string {
	str, _ := text.Marshal(0xb099e855eea7fd92, capnp.Struct(s))
	return str
}

func (s CapClientState_getMultiple_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapClientState_getMultiple_Results) DecodeFromPtr(p capnp.Ptr) CapClientState_getMultiple_Results {
	return CapClientState_getMultiple_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapClientState_getMultiple_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapClientState_getMultiple_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapClientState_getMultiple_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapClientState_getMultiple_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapClientState_getMultiple_Results) Docs() (KeyValueMap, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return KeyValueMap(p.Struct()), err
}

func (s CapClientState_getMultiple_Results) HasDocs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapClientState_getMultiple_Results) SetDocs(v KeyValueMap) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDocs sets the docs field to a newly
// allocated KeyValueMap struct, preferring placement in s's segment.
func (s CapClientState_getMultiple_Results) NewDocs() (KeyValueMap, error) {
	ss, err := NewKeyValueMap(capnp.Struct(s).Segment())
	if err != nil {
		return KeyValueMap{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapClientState_getMultiple_Results_List is a list of CapClientState_getMultiple_Results.
type CapClientState_getMultiple_Results_List = capnp.StructList[CapClientState_getMultiple_Results]

// NewCapClientState_getMultiple_Results creates a new list of CapClientState_getMultiple_Results.
func NewCapClientState_getMultiple_Results_List(s *capnp.Segment, sz int32) (CapClientState_getMultiple_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapClientState_getMultiple_Results](l), err
}

// CapClientState_getMultiple_Results_Future is a wrapper for a CapClientState_getMultiple_Results promised by a client call.
type CapClientState_getMultiple_Results_Future struct{ *capnp.Future }

func (f CapClientState_getMultiple_Results_Future) Struct() (CapClientState_getMultiple_Results, error) {
	p, err := f.Future.Ptr()
	return CapClientState_getMultiple_Results(p.Struct()), err
}
func (p CapClientState_getMultiple_Results_Future) Docs() KeyValueMap_Future {
	return KeyValueMap_Future{Future: p.Future.Field(0, nil)}
}

type CapClientState_cursor_Params capnp.Struct

// CapClientState_cursor_Params_TypeID is the unique identifier for the type CapClientState_cursor_Params.
const CapClientState_cursor_Params_TypeID = 0xd4943dfea8634d13

func NewCapClientState_cursor_Params(s *capnp.Segment) (CapClientState_cursor_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapClientState_cursor_Params(st), err
}

func NewRootCapClientState_cursor_Params(s *capnp.Segment) (CapClientState_cursor_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapClientState_cursor_Params(st), err
}

func ReadRootCapClientState_cursor_Params(msg *capnp.Message) (CapClientState_cursor_Params, error) {
	root, err := msg.Root()
	return CapClientState_cursor_Params(root.Struct()), err
}

func (s CapClientState_cursor_Params) String() string {
	str, _ := text.Marshal(0xd4943dfea8634d13, capnp.Struct(s))
	return str
}

func (s CapClientState_cursor_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapClientState_cursor_Params) DecodeFromPtr(p capnp.Ptr) CapClientState_cursor_Params {
	return CapClientState_cursor_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapClientState_cursor_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapClientState_cursor_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapClientState_cursor_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapClientState_cursor_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapClientState_cursor_Params_List is a list of CapClientState_cursor_Params.
type CapClientState_cursor_Params_List = capnp.StructList[CapClientState_cursor_Params]

// NewCapClientState_cursor_Params creates a new list of CapClientState_cursor_Params.
func NewCapClientState_cursor_Params_List(s *capnp.Segment, sz int32) (CapClientState_cursor_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapClientState_cursor_Params](l), err
}

// CapClientState_cursor_Params_Future is a wrapper for a CapClientState_cursor_Params promised by a client call.
type CapClientState_cursor_Params_Future struct{ *capnp.Future }

func (f CapClientState_cursor_Params_Future) Struct() (CapClientState_cursor_Params, error) {
	p, err := f.Future.Ptr()
	return CapClientState_cursor_Params(p.Struct()), err
}

type CapClientState_cursor_Results capnp.Struct

// CapClientState_cursor_Results_TypeID is the unique identifier for the type CapClientState_cursor_Results.
const CapClientState_cursor_Results_TypeID = 0x830a47d5d26db3aa

func NewCapClientState_cursor_Results(s *capnp.Segment) (CapClientState_cursor_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_cursor_Results(st), err
}

func NewRootCapClientState_cursor_Results(s *capnp.Segment) (CapClientState_cursor_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_cursor_Results(st), err
}

func ReadRootCapClientState_cursor_Results(msg *capnp.Message) (CapClientState_cursor_Results, error) {
	root, err := msg.Root()
	return CapClientState_cursor_Results(root.Struct()), err
}

func (s CapClientState_cursor_Results) String() string {
	str, _ := text.Marshal(0x830a47d5d26db3aa, capnp.Struct(s))
	return str
}

func (s CapClientState_cursor_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapClientState_cursor_Results) DecodeFromPtr(p capnp.Ptr) CapClientState_cursor_Results {
	return CapClientState_cursor_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapClientState_cursor_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapClientState_cursor_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapClientState_cursor_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapClientState_cursor_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapClientState_cursor_Results) Cap() CapBucketCursor {
	p, _ := capnp.Struct(s).Ptr(0)
	return CapBucketCursor(p.Interface().Client())
}

func (s CapClientState_cursor_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapClientState_cursor_Results) SetCap(v CapBucketCursor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapClientState_cursor_Results_List is a list of CapClientState_cursor_Results.
type CapClientState_cursor_Results_List = capnp.StructList[CapClientState_cursor_Results]

// NewCapClientState_cursor_Results creates a new list of CapClientState_cursor_Results.
func NewCapClientState_cursor_Results_List(s *capnp.Segment, sz int32) (CapClientState_cursor_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapClientState_cursor_Results](l), err
}

// CapClientState_cursor_Results_Future is a wrapper for a CapClientState_cursor_Results promised by a client call.
type CapClientState_cursor_Results_Future struct{ *capnp.Future }

func (f CapClientState_cursor_Results_Future) Struct() (CapClientState_cursor_Results, error) {
	p, err := f.Future.Ptr()
	return CapClientState_cursor_Results(p.Struct()), err
}
func (p CapClientState_cursor_Results_Future) Cap() CapBucketCursor {
	return CapBucketCursor(p.Future.Field(0, nil).Client())
}

type CapClientState_set_Params capnp.Struct

// CapClientState_set_Params_TypeID is the unique identifier for the type CapClientState_set_Params.
const CapClientState_set_Params_TypeID = 0xcbe2b3ca9a99a0dd

func NewCapClientState_set_Params(s *capnp.Segment) (CapClientState_set_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapClientState_set_Params(st), err
}

func NewRootCapClientState_set_Params(s *capnp.Segment) (CapClientState_set_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapClientState_set_Params(st), err
}

func ReadRootCapClientState_set_Params(msg *capnp.Message) (CapClientState_set_Params, error) {
	root, err := msg.Root()
	return CapClientState_set_Params(root.Struct()), err
}

func (s CapClientState_set_Params) String() string {
	str, _ := text.Marshal(0xcbe2b3ca9a99a0dd, capnp.Struct(s))
	return str
}

func (s CapClientState_set_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapClientState_set_Params) DecodeFromPtr(p capnp.Ptr) CapClientState_set_Params {
	return CapClientState_set_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapClientState_set_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapClientState_set_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapClientState_set_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapClientState_set_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapClientState_set_Params) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapClientState_set_Params) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapClientState_set_Params) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapClientState_set_Params) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapClientState_set_Params) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s CapClientState_set_Params) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapClientState_set_Params) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// CapClientState_set_Params_List is a list of CapClientState_set_Params.
type CapClientState_set_Params_List = capnp.StructList[CapClientState_set_Params]

// NewCapClientState_set_Params creates a new list of CapClientState_set_Params.
func NewCapClientState_set_Params_List(s *capnp.Segment, sz int32) (CapClientState_set_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapClientState_set_Params](l), err
}

// CapClientState_set_Params_Future is a wrapper for a CapClientState_set_Params promised by a client call.
type CapClientState_set_Params_Future struct{ *capnp.Future }

func (f CapClientState_set_Params_Future) Struct() (CapClientState_set_Params, error) {
	p, err := f.Future.Ptr()
	return CapClientState_set_Params(p.Struct()), err
}

type CapClientState_set_Results capnp.Struct

// CapClientState_set_Results_TypeID is the unique identifier for the type CapClientState_set_Results.
const CapClientState_set_Results_TypeID = 0xe5c3705eca013d26

func NewCapClientState_set_Results(s *capnp.Segment) (CapClientState_set_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapClientState_set_Results(st), err
}

func NewRootCapClientState_set_Results(s *capnp.Segment) (CapClientState_set_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapClientState_set_Results(st), err
}

func ReadRootCapClientState_set_Results(msg *capnp.Message) (CapClientState_set_Results, error) {
	root, err := msg.Root()
	return CapClientState_set_Results(root.Struct()), err
}

func (s CapClientState_set_Results) String() string {
	str, _ := text.Marshal(0xe5c3705eca013d26, capnp.Struct(s))
	return str
}

func (s CapClientState_set_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapClientState_set_Results) DecodeFromPtr(p capnp.Ptr) CapClientState_set_Results {
	return CapClientState_set_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapClientState_set_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapClientState_set_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapClientState_set_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapClientState_set_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapClientState_set_Results_List is a list of CapClientState_set_Results.
type CapClientState_set_Results_List = capnp.StructList[CapClientState_set_Results]

// NewCapClientState_set_Results creates a new list of CapClientState_set_Results.
func NewCapClientState_set_Results_List(s *capnp.Segment, sz int32) (CapClientState_set_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapClientState_set_Results](l), err
}

// CapClientState_set_Results_Future is a wrapper for a CapClientState_set_Results promised by a client call.
type CapClientState_set_Results_Future struct{ *capnp.Future }

func (f CapClientState_set_Results_Future) Struct() (CapClientState_set_Results, error) {
	p, err := f.Future.Ptr()
	return CapClientState_set_Results(p.Struct()), err
}

type CapClientState_setMultiple_Params capnp.Struct

// CapClientState_setMultiple_Params_TypeID is the unique identifier for the type CapClientState_setMultiple_Params.
const CapClientState_setMultiple_Params_TypeID = 0x9a088b173cbfb244

func NewCapClientState_setMultiple_Params(s *capnp.Segment) (CapClientState_setMultiple_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_setMultiple_Params(st), err
}

func NewRootCapClientState_setMultiple_Params(s *capnp.Segment) (CapClientState_setMultiple_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapClientState_setMultiple_Params(st), err
}

func ReadRootCapClientState_setMultiple_Params(msg *capnp.Message) (CapClientState_setMultiple_Params, error) {
	root, err := msg.Root()
	return CapClientState_setMultiple_Params(root.Struct()), err
}

func (s CapClientState_setMultiple_Params) String() string {
	str, _ := text.Marshal(0x9a088b173cbfb244, capnp.Struct(s))
	return str
}

func (s CapClientState_setMultiple_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapClientState_setMultiple_Params) DecodeFromPtr(p capnp.Ptr) CapClientState_setMultiple_Params {
	return CapClientState_setMultiple_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapClientState_setMultiple_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapClientState_setMultiple_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapClientState_setMultiple_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapClientState_setMultiple_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapClientState_setMultiple_Params) Docs() (KeyValueMap, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return KeyValueMap(p.Struct()), err
}

func (s CapClientState_setMultiple_Params) HasDocs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapClientState_setMultiple_Params) SetDocs(v KeyValueMap) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDocs sets the docs field to a newly
// allocated KeyValueMap struct, preferring placement in s's segment.
func (s CapClientState_setMultiple_Params) NewDocs() (KeyValueMap, error) {
	ss, err := NewKeyValueMap(capnp.Struct(s).Segment())
	if err != nil {
		return KeyValueMap{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CapClientState_setMultiple_Params_List is a list of CapClientState_setMultiple_Params.
type CapClientState_setMultiple_Params_List = capnp.StructList[CapClientState_setMultiple_Params]

// NewCapClientState_setMultiple_Params creates a new list of CapClientState_setMultiple_Params.
func NewCapClientState_setMultiple_Params_List(s *capnp.Segment, sz int32) (CapClientState_setMultiple_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapClientState_setMultiple_Params](l), err
}

// CapClientState_setMultiple_Params_Future is a wrapper for a CapClientState_setMultiple_Params promised by a client call.
type CapClientState_setMultiple_Params_Future struct{ *capnp.Future }

func (f CapClientState_setMultiple_Params_Future) Struct() (CapClientState_setMultiple_Params, error) {
	p, err := f.Future.Ptr()
	return CapClientState_setMultiple_Params(p.Struct()), err
}
func (p CapClientState_setMultiple_Params_Future) Docs() KeyValueMap_Future {
	return KeyValueMap_Future{Future: p.Future.Field(0, nil)}
}

type CapClientState_setMultiple_Results capnp.Struct

// CapClientState_setMultiple_Results_TypeID is the unique identifier for the type CapClientState_setMultiple_Results.
const CapClientState_setMultiple_Results_TypeID = 0xc22fbd0fa669f905

func NewCapClientState_setMultiple_Results(s *capnp.Segment) (CapClientState_setMultiple_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapClientState_setMultiple_Results(st), err
}

func NewRootCapClientState_setMultiple_Results(s *capnp.Segment) (CapClientState_setMultiple_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapClientState_setMultiple_Results(st), err
}

func ReadRootCapClientState_setMultiple_Results(msg *capnp.Message) (CapClientState_setMultiple_Results, error) {
	root, err := msg.Root()
	return CapClientState_setMultiple_Results(root.Struct()), err
}

func (s CapClientState_setMultiple_Results) String() string {
	str, _ := text.Marshal(0xc22fbd0fa669f905, capnp.Struct(s))
	return str
}

func (s CapClientState_setMultiple_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapClientState_setMultiple_Results) DecodeFromPtr(p capnp.Ptr) CapClientState_setMultiple_Results {
	return CapClientState_setMultiple_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapClientState_setMultiple_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapClientState_setMultiple_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapClientState_setMultiple_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapClientState_setMultiple_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapClientState_setMultiple_Results_List is a list of CapClientState_setMultiple_Results.
type CapClientState_setMultiple_Results_List = capnp.StructList[CapClientState_setMultiple_Results]

// NewCapClientState_setMultiple_Results creates a new list of CapClientState_setMultiple_Results.
func NewCapClientState_setMultiple_Results_List(s *capnp.Segment, sz int32) (CapClientState_setMultiple_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapClientState_setMultiple_Results](l), err
}

// CapClientState_setMultiple_Results_Future is a wrapper for a CapClientState_setMultiple_Results promised by a client call.
type CapClientState_setMultiple_Results_Future struct{ *capnp.Future }

func (f CapClientState_setMultiple_Results_Future) Struct() (CapClientState_setMultiple_Results, error) {
	p, err := f.Future.Ptr()
	return CapClientState_setMultiple_Results(p.Struct()), err
}

const schema_9a80401eba6f7fe3 = "x\xda\xacVmh[U\x18~\xdf{ornF" +
	"\xb3\xecx'\xb38\xad\x96\xcc\x8f\xa1\xeb\xd6\xda1\xa7" +
	"\xa5\x91\x15F\x85\x95\xa4!?\xfc3\xbd\xcd\x0e56" +
	"i\xefro&\x1d\xb8\xcd*\x0c*A,\x8a6L" +
	"\\\xd1M\xdd\x0f];\xa6\xb6P&N\xd0L\x06\xce" +
	"\x0fPd*\x1b\x03\xc1/P\xa6\xf4\x87^9'\xbd" +
	"7\xa7\x1f\xd9R\xf0_r\xdf\xe7}\xce\xf3\xbe\xcf9" +
	"\xe7=\x9b{\xd5\x98\xb6%\xfcI\x18\x94\xc4\xd1@\xd0" +
	"=q*\xf7\xc5\xd7;W=\x03\xb4\x19\x01\x02H\x00" +
	"\xda\xca\xc1Q\x044\xbe\x0dv\x02\xba\xb4|\xdb\x91/" +
	"\x0f\x93ge\xc0\\p\x84\x03\x02\x84\x03\xbe\x7f\xf7\xe5" +
	"\x0b\x9f\xfe9\xf6\x12\xd0\xf5>`\x03)q@\xbb\x00" +
	"\xbcW:\xf3~\xf1H\xdb+@\x0d\xcd\xbd|ph" +
	"\xe6\xd6\xd8\xa1\x12\x00\xb6\xa5H3\x1a\x8c\x10\x80\xe4c" +
	"D\xc5d\x96(\x08\xe0vM\x9dyp\xddszI" +
	"^\xd1$'8\xe1^A\xf8\xda\x03\x07N>\x1a<" +
	"=!\x03^ y\x0exU\x00\xc6\xfey\xf3\xb7\xd4" +
	"O\xe3'e\xc0,\x99\xe2\x80\xf3\x02\xb0\xf5\x87\xc8\xef" +
	"\xf7\xa7\xd4I\x19\xf0+y\x82\x03\xe6\x04 0\x979" +
	"\x1e\x99m\xf9\xa8\x02\xd0x\xbcQ\x9fB\xd0\xdc\xf4\x9d" +
	"\xb3\x7f\x9dM&\xcarjH\x17\xea\x1au\x9ez\xf1" +
	"\xe8x\xe9\xdc\xa9K\x9f\xcd\x03\x14\x0e\xe8\xd6\x05wJ" +
	"\x7f\x12\xd0\xfde\xd3T\xcf\xc0\xe4-\x17\x80\x1a\xaa\xdc" +
	"\x0fcR\xbfd\xcc\xea\x04\xc0\x98\xd6w\x1aW\xf8/" +
	"\xd7\xd8\x95~\xeb\xdf\x8e\x17\xbf\x92\x84\x9c\xd7G\xb8\x90" +
	"o\xdeyh\xef\x1b\xbb\xdf\xfeqI[\xa7\xf5V4" +
	"\xca<;\xf9\xb1\xaeb\xf2s]\xb4\xf5\xbb\x99\x83\xc5" +
	"\xf6\x91u\x97%\xa6\xb2>\xca\x99\xee\xe8\xc0s\xbb\xad" +
	"\xb3W\xa4\xc8\xb4\x9e\xe7\x91\x96\xf5\xdb\x8e\xa77\xce\xfc" +
	"<\xef\xad\xa8\xe5\x98>\xc6k9-jy\xfe\xe2\xc0" +
	"\xe8\xc4\xeb\xc5\xbf\x17\xd7\xd2vc\xe8\x0646\x84x" +
	"\xc2\xed\xa1\xc3h4\xae\"\xf0\x87\xfbx\xa1\xcf\xb42" +
	"-\xc9\x80c:lS\xda\xb4\x06\xad\xed;LkG" +
	"6\xc3\x06\x9dd\xe5c!o\x0f\xe5\xa3\xbd\xcc.d" +
	"\x1d\x1b \xa1\xa9\x1a\x80\x86\x004\xdc\x0c\x90\xd0UL" +
	"\xacU\x90\xa4M\x0b\xa9\x1b\xe9;\xd4p\xe0\xc3\x9b'" +
	"\x00\x10)`=\x0b\xecaY\xe6\xb0h\xdc\xcc\x9b9" +
	"\xbb&\xfd\x00\x1b\xc6\x06P\xb0\xa16i\xd2\xfb+\xb1" +
	"Wt\xab\x8e}m\xd9~\xdb\x16\xc9V\xa5\x15l\xfe" +
	";\xc9\xf2\xfb2i\xd6C\xcc\x1c\x8b#\xceK\x02\x8a" +
	"\xadM\"^O\xc16sv\x15\xb2N\xc6\xca\xf2\xaa" +
	"#\xbclY\xdd\xc6\xaa\xba\xc8\x9e\xa1\xb4\x8dk\xdc\xa7" +
	"\x8a\x83[\x1f\xb9\xfa\xc1U.o\x8d$O\xab\xbdH" +
	"?s\xa2\xbd\xacI\x98&\xb3\xb7V\xd9\x9b\xf6\x99\xd9" +
	"\x02\xc30(\x18\xae\xcf\xaa~I\xf9r\xe4\xff\x9f\xf4" +
	"e\xfa\xb2\xc2\xddP\xab\xe3\x9e\xee\x95\xd6{\x0d\xa7\xa2" +
	"\x0aF\x06\xd8\xb0\x8d\xab\x01\xe3jeS\xac\xae\xafV" +
	"[\xaaU\xf7\x99\xef\xe6\xb5FULlV\x90\"\xae" +
	"E\xfe\xf1^n\xdd]*&\xee[\xd8\x80\x1a6*" +
	"\x8b\x0f\x071\x1d\xbee\x13\x9a\x1a\x00\xf0o\x12\xf4\xc6" +
	"\x05\xa5\xfbA\xa1!\xe2z\x07\x08:+\x1ac\x18\xc7" +
	"*m\xe8\xba7\xc5\xfcA\xf6\x12$|\xda\xb4z\xcc" +
	"\x1c\xab\xe44\x89\xc8\x823\xb4\x7f\xc9\xda+\xb8?\xfc" +
	"\x0b\xaa\xde\xb6_o#,{\x9d\x88\xe2p\x81W\x0f" +
	"Wm\xf1\xbd\xda\xc2\xbd\xbaG\xc5\xc46\x05\xdd\xb4\xc8" +
	"\xef\xee\x02\x00\xdf3\xd3\xb2\xba\xbb\x96la\xb5\x96b" +
	"\x14\xce\xdd$\x9c\xf3\x1e\x00\xe8\x0d\x10:\xb9\x1d\x14z" +
	"\x8c`u\x8e\xa27\x92\xe9x3(\xb4HP\xf1\x07" +
	"%z\xd3\x98>\xdd\x07\x0a\x1d&\xa8\xfaS\x0d\xbd\xe7" +
	"\x07\xcdqN\x93\xa0\xe6\xcfO\xf4\xc6\x12Mq\xcen" +
	"\x82\x01\xffi\x80\xde|\xa6\x1d\x9c\xb3\x9dtV\\\x89" +
	"!\xe9gN\x0c]\xef$\x01\xb1\xb2,\x86\x9d\x95\xbd" +
	"\x12Cb\x8b\xb0\xbd0\x1cG\xfc/\x00\x00\xff\xff\xa8" +
	"\x0f\x9fF"

func init() {
	schemas.Register(schema_9a80401eba6f7fe3,
		0x830a47d5d26db3aa,
		0x840787d39c20c911,
		0x9592f3c8d197afde,
		0x98339c8db7bf9ab6,
		0x9a088b173cbfb244,
		0xa1b5065fb07e3b9f,
		0xb099e855eea7fd92,
		0xb1035539ef0fdf36,
		0xc22fbd0fa669f905,
		0xc95153c3f6bd2763,
		0xcbe2b3ca9a99a0dd,
		0xd11db16b4eb22eec,
		0xd4943dfea8634d13,
		0xe0a95ea47141aed8,
		0xe31782358d7fbadb,
		0xe5c3705eca013d26,
		0xebba2a63a6381c2f,
		0xf78da3a18a6bdd8f)
}

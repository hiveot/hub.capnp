package client

import (
	"context"
	"net"
	"time"

	"github.com/hiveot/hub/pkg/resolver"
	"github.com/hiveot/hub/pkg/resolver/capnpclient"
)

// NewCapClient starts a new client to get capabilities from the resolver.
// Users should call Release when done
//
//	resolverSocket is the path to the socket the resolver listens on or "" for the default
//
// This returns the provider for use by this client
func NewCapClient(resolverSocket string, clientID, clientType string) (capClient resolver.ICapProvider, err error) {
	if resolverSocket == "" {
		resolverSocket = resolver.DefaultResolverPath
	}
	conn, err := net.DialTimeout("unix", resolverSocket, time.Second)
	ctx := context.Background()
	resolver, err := capnpclient.NewResolverCapnpClient(ctx, conn)
	if err == nil {
		//release with close the connection
		//defer resolver.Release()

		capClient = resolver.CapProvider(ctx, clientID, clientType)
	}
	return capClient, err
}

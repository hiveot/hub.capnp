package capnpclient

import (
	"context"

	"github.com/hiveot/hub.capnp/go/hubapi"
	"github.com/hiveot/hub/pkg/resolver"
	"github.com/hiveot/hub/pkg/resolver/capserializer"
)

type CapRegistrationCapnpClient struct {
	capRegistration hubapi.CapRegistration // capnp client
}

// RegisterCapabilities registers a service's capabilities along with the CapProvider
func (cl *CapRegistrationCapnpClient) RegisterCapabilities(ctx context.Context,
	serviceID string, capInfoList []resolver.CapabilityInfo,
	capProvider hubapi.CapProvider) (err error) {

	capInfoListCapnp := capserializer.MarshalCapabilityInfoList(capInfoList)
	method, release := cl.capRegistration.RegisterCapabilities(ctx,
		func(params hubapi.CapRegistration_registerCapabilities_Params) error {
			err = params.SetCapInfo(capInfoListCapnp)
			_ = params.SetServiceID(serviceID)
			_ = params.SetProvider(capProvider)
			return err
		})
	defer release()
	_, err = method.Struct()
	return err
}

// Release this client
func (cl *CapRegistrationCapnpClient) Release() {
	cl.capRegistration.Release()
}

// NewCapRegistrationCapnpClient create a new resolver client for obtaining capnp capabilities.
// The provided connection is optional and intended for testing or running multiple resolvers.
// In most cases simply pass nil to use the standard socket path.
//
//	conn is the optional network connection interface to use. nil to auto resolve.
func NewCapRegistrationCapnpClient(ctx context.Context, capRegistration hubapi.CapRegistration) (cl *CapRegistrationCapnpClient) {
	cl = &CapRegistrationCapnpClient{
		capRegistration: capRegistration,
	}
	return cl
}

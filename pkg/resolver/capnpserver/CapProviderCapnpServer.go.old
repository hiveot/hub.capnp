package capnpserver

import (
	"context"

	"github.com/sirupsen/logrus"

	"github.com/hiveot/hub.capnp/go/hubapi"
	"github.com/hiveot/hub/internal/caphelp"
	"github.com/hiveot/hub/pkg/resolver"
	"github.com/hiveot/hub/pkg/resolver/capserializer"
)

// CapProviderCapnpServer implements the capnp server of the capability provider, eg the service.
// This implements the capnp hubapi.CapProvider_server interface.
type CapProviderCapnpServer struct {
	// Pogs provider of capabilities
	provider resolver.IProvider
}

// GetCapability invokes the requested method to return the capability it provides
// This returns an error if the capability is not found or not available to the client type
func (capsrv *CapProviderCapnpServer) GetCapability(
	ctx context.Context, call hubapi.CapProvider_getCapability) (err error) {

	args := call.Args()
	capabilityName, _ := args.CapabilityName()
	clientID, _ := args.ClientID()
	clientType, _ := args.ClientType()
	methodArgsCapnp, _ := args.Args()
	methodArgs := caphelp.UnmarshalStringList(methodArgsCapnp)
	capability, err := capsrv.provider.GetCapability(ctx, clientID, clientType, capabilityName, methodArgs)
	capability.State().Metadata.Put("a", "b")
	if err != nil {
		return err
	}
	resp, err := call.AllocResults()
	if err != nil {
		return err
	}
	err = resp.SetCapability(capability)

	return err
}

// ListCapabilities returns the aggregated list of capabilities from all connected services.
func (capsrv *CapProviderCapnpServer) ListCapabilities(
	ctx context.Context, call hubapi.CapProvider_listCapabilities) (err error) {

	infoList, err := capsrv.provider.ListCapabilities(ctx)
	resp, err2 := call.AllocResults()
	if err = err2; err == nil {
		infoListCapnp := capserializer.MarshalCapabilityInfoList(infoList)
		err = resp.SetInfoList(infoListCapnp)
	}
	return err
}

// Shutdown the client is released or connection broken. Notify the service.
func (capsrv *CapProviderCapnpServer) Shutdown() {
	logrus.Infof("Provider client connection dropped")
}

// NewCapProviderCapnpServer create a new instance of the capability provider capnp server
// This is used by the service provider to respond to capability requests in capnp format
// and pass them to the service in POGS format.
func NewCapProviderCapnpServer(provider resolver.IProvider) *CapProviderCapnpServer {
	capProvider := &CapProviderCapnpServer{
		provider: provider,
	}
	return capProvider
}

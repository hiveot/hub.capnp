package capnpserver

import (
	"context"

	"github.com/sirupsen/logrus"

	"github.com/hiveot/hub.capnp/go/hubapi"
	"github.com/hiveot/hub/pkg/resolver"
	"github.com/hiveot/hub/pkg/resolver/capserializer"
)

type CapRegistrationCapnpServer struct {
	svc resolver.ICapRegistration
}

// RegisterCapabilities sets the capabilities from a provider
// Used by providers that do no implement the CapProvider capability.
func (capsrv *CapRegistrationCapnpServer) RegisterCapabilities(
	ctx context.Context, call hubapi.CapRegistration_registerCapabilities) (err error) {
	args := call.Args()
	providerID, _ := args.ServiceID()
	capInfoCapnp, _ := args.CapInfo()
	capInfo := capserializer.UnmarshalCapabilyInfoList(capInfoCapnp)
	provider := args.Provider()

	err = capsrv.svc.RegisterCapabilities(ctx, providerID, capInfo, provider)
	return err
}

//// RegisterCapabilities is used by services to register what capabilities are available from the service
//func (capsrv *ResolverServiceCapnpServer) RegisterCapabilities(
//	ctx context.Context, call hubapi.CapResolver_registerCapabilities) (err error) {
//
//	args := call.Args()
//	infoListCapnp, _ := args.InfoList()
//	infoList := capserializer.UnmarshalCapabilyInfoList(infoListCapnp)
//	serviceID, _ := args.ServiceID()
//	serviceResolver := args.ServiceResolver()
//	err = capsrv.svc.RegisterCapabilities(ctx, serviceID, infoList, &serviceResolver)
//	return err
//}

// Shutdown the client is released or connection broken. Notify the service.
func (capsrv *CapRegistrationCapnpServer) Shutdown() {
	logrus.Infof("Registration server client connection dropped")
}
